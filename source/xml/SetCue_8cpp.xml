<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="SetCue_8cpp" kind="file" language="C++">
    <compoundname>SetCue.cpp</compoundname>
    <includes refid="MUSIC__CTR_8hpp" local="yes">MUSIC_CTR.hpp</includes>
    <includes local="no">iostream</includes>
    <incdepgraph>
      <node id="13">
        <label>functional</label>
      </node>
      <node id="5">
        <label>dbRoot.hpp</label>
        <link refid="dbRoot_8hpp"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="32">
        <label>miniaudio.h</label>
      </node>
      <node id="20">
        <label>capnp/serialize.h</label>
      </node>
      <node id="26">
        <label>cmath</label>
      </node>
      <node id="21">
        <label>MixBinary.capnp.h</label>
      </node>
      <node id="2">
        <label>MUSIC_CTR.hpp</label>
        <link refid="MUSIC__CTR_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>MixTranslator.hpp</label>
        <link refid="MixTranslator_8hpp"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>string</label>
      </node>
      <node id="29">
        <label>Bpm.hpp</label>
        <link refid="Bpm_8hpp"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>sqlite3.h</label>
      </node>
      <node id="4">
        <label>SoundTouch.h</label>
      </node>
      <node id="28">
        <label>hwy/aligned_allocator.h</label>
      </node>
      <node id="31">
        <label>Decoder.hpp</label>
        <link refid="Decoder_8hpp"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>dbState.hpp</label>
        <link refid="dbState_8hpp"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>CapnpBinary.hpp</label>
        <link refid="CapnpBinary_8hpp"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>optional</label>
      </node>
      <node id="7">
        <label>vector</label>
      </node>
      <node id="1">
        <label>include/audioRender/MixMachine/MUSIC_CTR/SetCue.cpp</label>
        <link refid="SetCue_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>DeckData.hpp</label>
        <link refid="DeckData_8hpp"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>NoteBinary.capnp.h</label>
      </node>
      <node id="9">
        <label>musicDB.hpp</label>
        <link refid="musicDB_8hpp"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>iostream</label>
      </node>
      <node id="30">
        <label>MusicTranslator.hpp</label>
        <link refid="MusicTranslator_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>trackDB.hpp</label>
        <link refid="trackDB_8hpp"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>mutex</label>
      </node>
      <node id="27">
        <label>hwy/highway.h</label>
      </node>
      <node id="16">
        <label>thread</label>
      </node>
      <node id="25">
        <label>FrameCalc.hpp</label>
        <link refid="FrameCalc_8hpp"/>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>Mix.hpp</label>
        <link refid="Mix_8hpp"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>MusicBinary.capnp.h</label>
      </node>
      <node id="15">
        <label>algorithm</label>
      </node>
      <node id="19">
        <label>capnp/message.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="SetCue_8cpp_1afa79dd1db9e2fd2c971c2cf4912a65c6" prot="public" static="no">
        <name>ORIGIN_TO_TARGET</name>
        <param><defname>TARGET</defname></param>
        <param><defname>ORIGIN</defname></param>
        <initializer>(TARGET / ORIGIN)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/audioRender/MixMachine/MUSIC_CTR/SetCue.cpp" line="3" column="9" bodyfile="include/audioRender/MixMachine/MUSIC_CTR/SetCue.cpp" bodystart="3" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="SetCue_8cpp_1a1f615c872155c73a92999c0b91f904eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void AddGBpm</definition>
        <argsstring>(std::vector&lt; PlayPosition &gt; &amp;vec, BpmFragment fragment)</argsstring>
        <name>AddGBpm</name>
        <param>
          <type>std::vector&lt; <ref refid="structPlayPosition" kindref="compound">PlayPosition</ref> &gt; &amp;</type>
          <declname>vec</declname>
        </param>
        <param>
          <type><ref refid="structBpmFragment" kindref="compound">BpmFragment</ref></type>
          <declname>fragment</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/audioRender/MixMachine/MUSIC_CTR/SetCue.cpp" line="15" column="1" bodyfile="include/audioRender/MixMachine/MUSIC_CTR/SetCue.cpp" bodystart="15" bodyend="22"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="MUSIC__CTR_8hpp" kindref="compound">MUSIC_CTR.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3" refid="SetCue_8cpp_1afa79dd1db9e2fd2c971c2cf4912a65c6" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ORIGIN_TO_TARGET(TARGET,<sp/>ORIGIN)<sp/>(TARGET<sp/>/<sp/>ORIGIN)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6" refid="structIngredients_1ae41e97f65aee799e5714b33b8f78f78f" refkind="member"><highlight class="normal"><ref refid="structIngredients_1ae41e97f65aee799e5714b33b8f78f78f" kindref="member">Ingredients::SORT</ref>()</highlight></codeline>
<codeline lineno="7"><highlight class="normal">{</highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/>std::sort(<ref refid="structIngredients_1a7e4785fdee02fc7bbd011d90923c621b" kindref="member">pos</ref>.begin(),<sp/><ref refid="structIngredients_1a7e4785fdee02fc7bbd011d90923c621b" kindref="member">pos</ref>.end(),<sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structPlayPosition" kindref="compound">PlayPosition</ref>&amp;<sp/>first,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structPlayPosition" kindref="compound">PlayPosition</ref>&amp;<sp/>second){</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>first.Gidx<sp/>&lt;<sp/>second.Gidx;</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal">}</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15" refid="SetCue_8cpp_1a1f615c872155c73a92999c0b91f904eb" refkind="member"><highlight class="normal"><ref refid="SetCue_8cpp_1a1f615c872155c73a92999c0b91f904eb" kindref="member">AddGBpm</ref>(std::vector&lt;PlayPosition&gt;&amp;<sp/>vec,<sp/><ref refid="structBpmFragment" kindref="compound">BpmFragment</ref><sp/>fragment)</highlight></codeline>
<codeline lineno="16"><highlight class="normal">{</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structPlayPosition" kindref="compound">PlayPosition</ref><sp/>pos;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>pos.<ref refid="structPlayPosition_1a4635b071695e4f80cd2e96fd50365f7d" kindref="member">Gidx</ref><sp/>=<sp/>fragment.<ref refid="structBpmFragment_1a2a8288e055869bb966d381378b908b48" kindref="member">frame_to_here</ref>;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>pos.<ref refid="structPlayPosition_1ac0d6bafa64ed39667b3c4bd5aa8aea2e" kindref="member">TargetBPM</ref><sp/>=<sp/>fragment.<ref refid="structBpmFragment_1aff3e11fa4ee76d171b5bf93da9a27002" kindref="member">bpm</ref>;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>pos.<ref refid="structPlayPosition_1a011e77559f34aa0b42b728695d88ef6c" kindref="member">status</ref><sp/>=<sp/><ref refid="MUSIC__CTR_8hpp_1ad09eb1f46069ed7c9f6854a9a57ad4e9a7398a67796cb3e33425d196933fb5fdf" kindref="member">MIXSTATE::BPMCHANGE</ref>;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>vec.push_back(pos);</highlight></codeline>
<codeline lineno="22"><highlight class="normal">}</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25" refid="structIngredients_1a09cad7b3bab8bcba75d317782a228486" refkind="member"><highlight class="normal"><ref refid="structIngredients_1a09cad7b3bab8bcba75d317782a228486" kindref="member">Ingredients::FillGlobal</ref>(std::vector&lt;PlayPosition&gt;&amp;<sp/>Gbpm,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structBpmStruct" kindref="compound">BpmStruct</ref>&amp;<sp/>Global)</highlight></codeline>
<codeline lineno="26"><highlight class="normal">{</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>GRes<sp/>=<sp/>Global.<ref refid="structBpmStruct_1aa7822b3c4a6dcc0686c19ba42d7697da" kindref="member">getAffectedList</ref>(<ref refid="structIngredients_1a7e4785fdee02fc7bbd011d90923c621b" kindref="member">pos</ref>.front().Gidx,<sp/><ref refid="structIngredients_1a7e4785fdee02fc7bbd011d90923c621b" kindref="member">pos</ref>.back().Gidx);</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(GRes.empty()){</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>FRes<sp/>=<sp/>Global.<ref refid="structBpmStruct_1a4ee2251fd59f29de1284e938b616293e" kindref="member">getAffected</ref>(<ref refid="structIngredients_1a7e4785fdee02fc7bbd011d90923c621b" kindref="member">pos</ref>.front().Gidx);</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="SetCue_8cpp_1a1f615c872155c73a92999c0b91f904eb" kindref="member">AddGBpm</ref>(Gbpm,<sp/>FRes);</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>i<sp/>:<sp/>GRes){</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="SetCue_8cpp_1a1f615c872155c73a92999c0b91f904eb" kindref="member">AddGBpm</ref>(Gbpm,<sp/>*i);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structIngredients_1a7e4785fdee02fc7bbd011d90923c621b" kindref="member">pos</ref>.front().TargetBPM<sp/>=<sp/>Gbpm.front().TargetBPM;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>Gbpm.erase(Gbpm.begin());</highlight></codeline>
<codeline lineno="40"><highlight class="normal">}</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43" refid="structIngredients_1aff9ab6a76facc3cc2352b587659726cb" refkind="member"><highlight class="normal"><ref refid="structIngredients_1aff9ab6a76facc3cc2352b587659726cb" kindref="member">Ingredients::FillLocal</ref>(std::vector&lt;PlayPosition&gt;&amp;<sp/>Lbpm,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structBpmStruct" kindref="compound">BpmStruct</ref>&amp;<sp/>Local)</highlight></codeline>
<codeline lineno="44"><highlight class="normal">{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;<ref refid="structIngredients_1a7e4785fdee02fc7bbd011d90923c621b" kindref="member">pos</ref>.size();<sp/>++i){</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>now<sp/>=<sp/><ref refid="structIngredients_1a7e4785fdee02fc7bbd011d90923c621b" kindref="member">pos</ref>[i];</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(now.status<sp/>==<sp/><ref refid="MUSIC__CTR_8hpp_1ad09eb1f46069ed7c9f6854a9a57ad4e9a0352906d1ea1dfcd663c918f3a86755b" kindref="member">MIXSTATE::PLAY</ref>){</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>nextLidx<sp/>=<sp/>now.Lidx<sp/>+<sp/></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="structIngredients_1a7e4785fdee02fc7bbd011d90923c621b" kindref="member">pos</ref>[i+1].Gidx<sp/>-<sp/>now.Gidx)<sp/>*<sp/><ref refid="SetCue_8cpp_1afa79dd1db9e2fd2c971c2cf4912a65c6" kindref="member">ORIGIN_TO_TARGET</ref>(now.TargetBPM,<sp/>now.OriginBPM);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>betweenBpm<sp/>=<sp/>Local.<ref refid="structBpmStruct_1aa7822b3c4a6dcc0686c19ba42d7697da" kindref="member">getAffectedList</ref>(now.Lidx,<sp/>nextLidx);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(betweenBpm.empty()){</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>LocalAffect<sp/>=<sp/>Local.<ref refid="structBpmStruct_1a4ee2251fd59f29de1284e938b616293e" kindref="member">getAffected</ref>(now.Lidx);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structIngredients_1a7e4785fdee02fc7bbd011d90923c621b" kindref="member">pos</ref>[i].OriginBPM<sp/>=<sp/>LocalAffect.bpm;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>j<sp/>:<sp/>betweenBpm){</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(j-&gt;frame_to_here<sp/>&lt;=<sp/>now.Lidx){</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structIngredients_1a7e4785fdee02fc7bbd011d90923c621b" kindref="member">pos</ref>[i].OriginBPM<sp/>=<sp/>j-&gt;bpm;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>FromOriginRange<sp/>=<sp/>j-&gt;frame_to_here<sp/>-<sp/>now.Lidx;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structPlayPosition" kindref="compound">PlayPosition</ref><sp/>tempos;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tempos.<ref refid="structPlayPosition_1a6c2c05c4c20026b86e83265dd01ff5a3" kindref="member">OriginBPM</ref><sp/>=<sp/>j-&gt;bpm;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tempos.<ref refid="structPlayPosition_1a4635b071695e4f80cd2e96fd50365f7d" kindref="member">Gidx</ref><sp/>=<sp/>now.Gidx<sp/>+<sp/>FromOriginRange;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>tempos.Lidx<sp/>=<sp/>j-&gt;frame_to_here;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tempos.<ref refid="structPlayPosition_1a011e77559f34aa0b42b728695d88ef6c" kindref="member">status</ref><sp/>=<sp/><ref refid="MUSIC__CTR_8hpp_1ad09eb1f46069ed7c9f6854a9a57ad4e9a7398a67796cb3e33425d196933fb5fdf" kindref="member">MIXSTATE::BPMCHANGE</ref>;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Lbpm.push_back(tempos);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="75"><highlight class="normal">}</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal">std::vector&lt;PlayPosition&gt;::iterator</highlight></codeline>
<codeline lineno="78" refid="structIngredients_1a7210e8202f533b09a297998e7b69219a" refkind="member"><highlight class="normal"><ref refid="structIngredients_1a7210e8202f533b09a297998e7b69219a" kindref="member">Ingredients::GetSameGidx</ref>(<ref refid="MUSIC__CTR_8hpp_1a8eb890bb773b5395e6df7e10882ee435" kindref="member">GLOBAL_POS</ref><sp/>gidx)</highlight></codeline>
<codeline lineno="79"><highlight class="normal">{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>std::find_if(<ref refid="structIngredients_1a7e4785fdee02fc7bbd011d90923c621b" kindref="member">pos</ref>.begin(),<sp/><ref refid="structIngredients_1a7e4785fdee02fc7bbd011d90923c621b" kindref="member">pos</ref>.end(),<sp/>[gidx](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structPlayPosition" kindref="compound">PlayPosition</ref>&amp;<sp/>P){</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>P.Gidx<sp/>==<sp/>gidx;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="84"><highlight class="normal">}</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87" refid="structIngredients_1a408def0555c4f3c401aeeef44a86e3fc" refkind="member"><highlight class="normal"><ref refid="structIngredients_1a408def0555c4f3c401aeeef44a86e3fc" kindref="member">Ingredients::Ready</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structBpmStruct" kindref="compound">BpmStruct</ref>&amp;<sp/>Global,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structBpmStruct" kindref="compound">BpmStruct</ref>&amp;<sp/>Local)</highlight></codeline>
<codeline lineno="88"><highlight class="normal">{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structIngredients_1ae41e97f65aee799e5714b33b8f78f78f" kindref="member">SORT</ref>();</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;PlayPosition&gt;<sp/>Gbpm;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structIngredients_1a09cad7b3bab8bcba75d317782a228486" kindref="member">FillGlobal</ref>(Gbpm,<sp/>Global);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;PlayPosition&gt;<sp/>Lbpm;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structIngredients_1aff9ab6a76facc3cc2352b587659726cb" kindref="member">FillLocal</ref>(Lbpm,<sp/>Local);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>i<sp/>:<sp/>Gbpm){</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>matched<sp/>=<sp/><ref refid="structIngredients_1a7210e8202f533b09a297998e7b69219a" kindref="member">GetSameGidx</ref>(i.Gidx);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(matched<sp/>!=<sp/><ref refid="structIngredients_1a7e4785fdee02fc7bbd011d90923c621b" kindref="member">pos</ref>.end()){</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>matched-&gt;TargetBPM<sp/>=<sp/>i.TargetBPM;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structIngredients_1a7e4785fdee02fc7bbd011d90923c621b" kindref="member">pos</ref>.push_back(i);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>i<sp/>:<sp/>Lbpm){</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>matched<sp/>=<sp/><ref refid="structIngredients_1a7210e8202f533b09a297998e7b69219a" kindref="member">GetSameGidx</ref>(i.Gidx);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(matched<sp/>!=<sp/><ref refid="structIngredients_1a7e4785fdee02fc7bbd011d90923c621b" kindref="member">pos</ref>.end()){</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>matched-&gt;OriginBPM<sp/>=<sp/>i.OriginBPM;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structIngredients_1a7e4785fdee02fc7bbd011d90923c621b" kindref="member">pos</ref>.push_back(i);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structIngredients_1ae41e97f65aee799e5714b33b8f78f78f" kindref="member">SORT</ref>();</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Stacked_Origin_BPM<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Stacked_TargetBPM<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>i<sp/>:<sp/><ref refid="structIngredients_1a7e4785fdee02fc7bbd011d90923c621b" kindref="member">pos</ref>){</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(i.OriginBPM<sp/>&lt;<sp/>0){</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i.OriginBPM<sp/>=<sp/>Stacked_Origin_BPM;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Stacked_Origin_BPM<sp/>=<sp/>i.OriginBPM;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(i.TargetBPM<sp/>&lt;<sp/>0){</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i.TargetBPM<sp/>=<sp/>Stacked_TargetBPM;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Stacked_TargetBPM<sp/>=<sp/>i.TargetBPM;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=1;<sp/>i&lt;<ref refid="structIngredients_1a7e4785fdee02fc7bbd011d90923c621b" kindref="member">pos</ref>.size();<sp/>++i){</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="structIngredients_1a7e4785fdee02fc7bbd011d90923c621b" kindref="member">pos</ref>[i].status<sp/>==<sp/><ref refid="MUSIC__CTR_8hpp_1ad09eb1f46069ed7c9f6854a9a57ad4e9a7398a67796cb3e33425d196933fb5fdf" kindref="member">MIXSTATE::BPMCHANGE</ref>){</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>Range<sp/>=<sp/><ref refid="structIngredients_1a7e4785fdee02fc7bbd011d90923c621b" kindref="member">pos</ref>[i].Gidx<sp/>-<sp/><ref refid="structIngredients_1a7e4785fdee02fc7bbd011d90923c621b" kindref="member">pos</ref>[i<sp/>-<sp/>1].Gidx;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structIngredients_1a7e4785fdee02fc7bbd011d90923c621b" kindref="member">pos</ref>[i].Lidx<sp/>=<sp/><ref refid="structIngredients_1a7e4785fdee02fc7bbd011d90923c621b" kindref="member">pos</ref>[i<sp/>-<sp/>1].Lidx<sp/>+<sp/>(Range<sp/>*<sp/><ref refid="SetCue_8cpp_1afa79dd1db9e2fd2c971c2cf4912a65c6" kindref="member">ORIGIN_TO_TARGET</ref>(<ref refid="structIngredients_1a7e4785fdee02fc7bbd011d90923c621b" kindref="member">pos</ref>[i<sp/>-<sp/>1].TargetBPM,<sp/><ref refid="structIngredients_1a7e4785fdee02fc7bbd011d90923c621b" kindref="member">pos</ref>[i<sp/>-<sp/>1].OriginBPM));</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structIngredients_1a7e4785fdee02fc7bbd011d90923c621b" kindref="member">pos</ref>[i].status<sp/>=<sp/><ref refid="MUSIC__CTR_8hpp_1ad09eb1f46069ed7c9f6854a9a57ad4e9a0352906d1ea1dfcd663c918f3a86755b" kindref="member">MIXSTATE::PLAY</ref>;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="141"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="include/audioRender/MixMachine/MUSIC_CTR/SetCue.cpp"/>
  </compounddef>
</doxygen>
