<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.14.0" xml:lang="en-US">
  <compounddef id="classeditorObject" kind="class" language="C++" prot="public">
    <compoundname>editorObject</compoundname>
    <includes refid="editorObject_8hpp" local="no">editorObject.hpp</includes>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classeditorObject_1afe3027bfdc86cf213b3d44191e4ce4e7" prot="private" static="no" mutable="no">
        <type>std::optional&lt; <ref refid="classtempDB" kindref="compound">tempDB</ref> &gt;</type>
        <definition>std::optional&lt;tempDB&gt; editorObject::projectLocalDB</definition>
        <argsstring></argsstring>
        <name>projectLocalDB</name>
        <qualifiedname>editorObject::projectLocalDB</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MainObjects/editorObject/editorObject.hpp" line="41" column="19" bodyfile="include/MainObjects/editorObject/editorObject.hpp" bodystart="41" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classeditorObject_1a9409f6aef52b2cb8a361674da49b97e1" prot="private" static="no" mutable="no">
        <type>fs::path</type>
        <definition>fs::path editorObject::projectRoot</definition>
        <argsstring></argsstring>
        <name>projectRoot</name>
        <qualifiedname>editorObject::projectRoot</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MainObjects/editorObject/editorObject.hpp" line="42" column="14" bodyfile="include/MainObjects/editorObject/editorObject.hpp" bodystart="42" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classeditorObject_1a3172e809911096988531fc5228f7055e" prot="private" static="no" mutable="no">
        <type>fs::path</type>
        <definition>fs::path editorObject::mixFilePath</definition>
        <argsstring></argsstring>
        <name>mixFilePath</name>
        <qualifiedname>editorObject::mixFilePath</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MainObjects/editorObject/editorObject.hpp" line="43" column="14" bodyfile="include/MainObjects/editorObject/editorObject.hpp" bodystart="43" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classeditorObject_1abeaedacd9b6d9e2fb61772aa348431b1" prot="private" static="no" mutable="no">
        <type>fs::path</type>
        <definition>fs::path editorObject::noteFilePath</definition>
        <argsstring></argsstring>
        <name>noteFilePath</name>
        <qualifiedname>editorObject::noteFilePath</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MainObjects/editorObject/editorObject.hpp" line="44" column="14" bodyfile="include/MainObjects/editorObject/editorObject.hpp" bodystart="44" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classeditorObject_1a1a72aaa0a758b9c32f2bcd603a607f3c" prot="private" static="no" mutable="no">
        <type>fs::path</type>
        <definition>fs::path editorObject::kvFilePath</definition>
        <argsstring></argsstring>
        <name>kvFilePath</name>
        <qualifiedname>editorObject::kvFilePath</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MainObjects/editorObject/editorObject.hpp" line="45" column="14" bodyfile="include/MainObjects/editorObject/editorObject.hpp" bodystart="45" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classeditorObject_1a76050465d4780555d62af1f9faee05e7" prot="private" static="no" mutable="no">
        <type>fs::path</type>
        <definition>fs::path editorObject::musicFileRootPath</definition>
        <argsstring></argsstring>
        <name>musicFileRootPath</name>
        <qualifiedname>editorObject::musicFileRootPath</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MainObjects/editorObject/editorObject.hpp" line="46" column="14" bodyfile="include/MainObjects/editorObject/editorObject.hpp" bodystart="46" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classeditorObject_1a23655580a822a7ae6c96ece123f0574d" prot="private" static="no" mutable="no">
        <type>std::optional&lt; <ref refid="classPDJE__Editor" kindref="compound">PDJE_Editor</ref> &gt;</type>
        <definition>std::optional&lt;PDJE_Editor&gt; editorObject::E_obj</definition>
        <argsstring></argsstring>
        <name>E_obj</name>
        <qualifiedname>editorObject::E_obj</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MainObjects/editorObject/editorObject.hpp" line="47" column="19" bodyfile="include/MainObjects/editorObject/editorObject.hpp" bodystart="47" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-func">
      <memberdef kind="function" id="classeditorObject_1a59f64efda4392df5f97a1fc893d234dc" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename EDIT_ARG_TYPE</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool editorObject::DefaultSaveFuntion</definition>
        <argsstring>()</argsstring>
        <name>DefaultSaveFuntion</name>
        <qualifiedname>editorObject::DefaultSaveFuntion</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MainObjects/editorObject/editorObject.hpp" line="50" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classeditorObject_1aebd96635e0fb0919b6560d2e8cd0a5ec" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename EDIT_ARG_TYPE</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool editorObject::DefaultSaveFuntion</definition>
        <argsstring>(PDJE_Editor::MusicHandleStruct &amp;i, const EDIT_ARG_MUSIC &amp;obj)</argsstring>
        <name>DefaultSaveFuntion</name>
        <qualifiedname>editorObject::DefaultSaveFuntion</qualifiedname>
        <param>
          <type><ref refid="structPDJE__Editor_1_1MusicHandleStruct" kindref="compound">PDJE_Editor::MusicHandleStruct</ref> &amp;</type>
          <declname>i</declname>
        </param>
        <param>
          <type>const <ref refid="structEDIT__ARG__MUSIC" kindref="compound">EDIT_ARG_MUSIC</ref> &amp;</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MainObjects/editorObject/editorObject.hpp" line="53" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classeditorObject_1a3bb22fbeed9a7e1516f3ab6461698f0b" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structtrackdata" kindref="compound">trackdata</ref></type>
        <definition>trackdata editorObject::makeTrackData</definition>
        <argsstring>(const UNSANITIZED &amp;trackTitle, TITLE_COMPOSER &amp;titles)</argsstring>
        <name>makeTrackData</name>
        <qualifiedname>editorObject::makeTrackData</qualifiedname>
        <param>
          <type>const <ref refid="fileNameSanitizer_8hpp_1a3dbfced66c4bb073515956060fd59604" kindref="member">UNSANITIZED</ref> &amp;</type>
          <declname>trackTitle</declname>
        </param>
        <param>
          <type><ref refid="editorObject_8hpp_1a899c0028ff4e674c7145d4c77087f957" kindref="member">TITLE_COMPOSER</ref> &amp;</type>
          <declname>titles</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MainObjects/editorObject/editorObject.hpp" line="55" column="15" bodyfile="include/MainObjects/editorObject/editorObject.cpp" bodystart="6" bodyend="37"/>
      </memberdef>
      <memberdef kind="function" id="classeditorObject_1a0a2005b586956c8e00cf5dc434360f01" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="PDJE__EXPORT__SETTER_8hpp_1a881b531a2da9c72650a79edb575b6c8c" kindref="member">PDJE_API</ref> bool</type>
        <definition>PDJE_API bool editorObject::DefaultSaveFuntion</definition>
        <argsstring>()</argsstring>
        <name>DefaultSaveFuntion</name>
        <qualifiedname>editorObject::DefaultSaveFuntion</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MainObjects/editorObject/commonfunction.cpp" line="7" column="1" bodyfile="include/MainObjects/editorObject/commonfunction.cpp" bodystart="8" bodyend="21"/>
      </memberdef>
      <memberdef kind="function" id="classeditorObject_1a0a2005b586956c8e00cf5dc434360f01" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="PDJE__EXPORT__SETTER_8hpp_1a881b531a2da9c72650a79edb575b6c8c" kindref="member">PDJE_API</ref> bool</type>
        <definition>PDJE_API bool editorObject::DefaultSaveFuntion</definition>
        <argsstring>()</argsstring>
        <name>DefaultSaveFuntion</name>
        <qualifiedname>editorObject::DefaultSaveFuntion</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MainObjects/editorObject/commonfunction.cpp" line="25" column="1" bodyfile="include/MainObjects/editorObject/commonfunction.cpp" bodystart="26" bodyend="39"/>
      </memberdef>
      <memberdef kind="function" id="classeditorObject_1a0a2005b586956c8e00cf5dc434360f01" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="PDJE__EXPORT__SETTER_8hpp_1a881b531a2da9c72650a79edb575b6c8c" kindref="member">PDJE_API</ref> bool</type>
        <definition>PDJE_API bool editorObject::DefaultSaveFuntion</definition>
        <argsstring>()</argsstring>
        <name>DefaultSaveFuntion</name>
        <qualifiedname>editorObject::DefaultSaveFuntion</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MainObjects/editorObject/commonfunction.cpp" line="43" column="1" bodyfile="include/MainObjects/editorObject/commonfunction.cpp" bodystart="44" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="classeditorObject_1a7701a7956fd850031ef6adef9e9a2947" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="PDJE__EXPORT__SETTER_8hpp_1a881b531a2da9c72650a79edb575b6c8c" kindref="member">PDJE_API</ref> bool</type>
        <definition>PDJE_API bool editorObject::DefaultSaveFuntion</definition>
        <argsstring>(PDJE_Editor::MusicHandleStruct &amp;i, const EDIT_ARG_MUSIC &amp;obj)</argsstring>
        <name>DefaultSaveFuntion</name>
        <qualifiedname>editorObject::DefaultSaveFuntion</qualifiedname>
        <param>
          <type><ref refid="structPDJE__Editor_1_1MusicHandleStruct" kindref="compound">PDJE_Editor::MusicHandleStruct</ref> &amp;</type>
          <declname>i</declname>
        </param>
        <param>
          <type>const <ref refid="structEDIT__ARG__MUSIC" kindref="compound">EDIT_ARG_MUSIC</ref> &amp;</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MainObjects/editorObject/commonfunction.cpp" line="61" column="1" bodyfile="include/MainObjects/editorObject/commonfunction.cpp" bodystart="62" bodyend="87"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classeditorObject_1ae5300f1a0b6d39b6fb1e6c79d2bcc91d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>git_repository *</type>
        <definition>git_repository * editorObject::getMixRepo</definition>
        <argsstring>()</argsstring>
        <name>getMixRepo</name>
        <qualifiedname>editorObject::getMixRepo</qualifiedname>
        <briefdescription>
<para>Gets the Git repository for the mix data. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A pointer to the Git repository, or <computeroutput>nullptr</computeroutput> if not available. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MainObjects/editorObject/editorObject.hpp" line="64" column="20"/>
      </memberdef>
      <memberdef kind="function" id="classeditorObject_1ad4983a3abef2c8acadc325f26a6128d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>git_repository *</type>
        <definition>git_repository * editorObject::getMusicRepo</definition>
        <argsstring>(const UNSANITIZED &amp;Title)</argsstring>
        <name>getMusicRepo</name>
        <qualifiedname>editorObject::getMusicRepo</qualifiedname>
        <param>
          <type>const <ref refid="fileNameSanitizer_8hpp_1a3dbfced66c4bb073515956060fd59604" kindref="member">UNSANITIZED</ref> &amp;</type>
          <declname>Title</declname>
        </param>
        <briefdescription>
<para>Gets the Git repository for a specific music entry. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Title</parametername>
</parameternamelist>
<parameterdescription>
<para>The unsanitized title of the music. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pointer to the Git repository, or <computeroutput>nullptr</computeroutput> if not found. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MainObjects/editorObject/editorObject.hpp" line="71" column="20"/>
      </memberdef>
      <memberdef kind="function" id="classeditorObject_1a3bd541d0ff2a00541fad343c31742c71" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>git_repository *</type>
        <definition>git_repository * editorObject::getNoteRepo</definition>
        <argsstring>()</argsstring>
        <name>getNoteRepo</name>
        <qualifiedname>editorObject::getNoteRepo</qualifiedname>
        <briefdescription>
<para>Gets the Git repository for the note data. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A pointer to the Git repository, or <computeroutput>nullptr</computeroutput> if not available. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MainObjects/editorObject/editorObject.hpp" line="77" column="20"/>
      </memberdef>
      <memberdef kind="function" id="classeditorObject_1a7276d008fdf2ce71165d9f8f8332317d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>git_repository *</type>
        <definition>git_repository * editorObject::getKVRepo</definition>
        <argsstring>()</argsstring>
        <name>getKVRepo</name>
        <qualifiedname>editorObject::getKVRepo</qualifiedname>
        <briefdescription>
<para>Gets the Git repository for the key-value data. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A pointer to the Git repository, or <computeroutput>nullptr</computeroutput> if not available. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MainObjects/editorObject/editorObject.hpp" line="83" column="20"/>
      </memberdef>
      <memberdef kind="function" id="classeditorObject_1a77eaf52d8c470aadb9af3f3140e6beee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename EDIT_ARG_TYPE</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool editorObject::AddLine</definition>
        <argsstring>(const EDIT_ARG_TYPE &amp;obj)</argsstring>
        <name>AddLine</name>
        <qualifiedname>editorObject::AddLine</qualifiedname>
        <param>
          <type>const EDIT_ARG_TYPE &amp;</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
<para>Adds a new line of data to the editor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>EDIT_ARG_TYPE</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of data to add. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>The data object to add. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if the line was added successfully, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MainObjects/editorObject/editorObject.hpp" line="92" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classeditorObject_1a5bcc99b22a0c1b7377467c4090b31c3f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool editorObject::AddLine</definition>
        <argsstring>(const UNSANITIZED &amp;musicName, const DONT_SANITIZE &amp;firstBar)</argsstring>
        <name>AddLine</name>
        <qualifiedname>editorObject::AddLine</qualifiedname>
        <param>
          <type>const <ref refid="fileNameSanitizer_8hpp_1a3dbfced66c4bb073515956060fd59604" kindref="member">UNSANITIZED</ref> &amp;</type>
          <declname>musicName</declname>
        </param>
        <param>
          <type>const <ref refid="fileNameSanitizer_8hpp_1a2ec6d785f45dccabee178706d40c0d7d" kindref="member">DONT_SANITIZE</ref> &amp;</type>
          <declname>firstBar</declname>
        </param>
        <briefdescription>
<para>Adds a new music entry with a specified first bar. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>musicName</parametername>
</parameternamelist>
<parameterdescription>
<para>The unsanitized name of the music. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>firstBar</parametername>
</parameternamelist>
<parameterdescription>
<para>The first bar of the music. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if the line was added successfully, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MainObjects/editorObject/editorObject.hpp" line="100" column="10" bodyfile="include/MainObjects/editorObject/addline.cpp" bodystart="100" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="classeditorObject_1acec5f49ab4cc77cd842d4eaf1a25ff87" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int editorObject::deleteLine</definition>
        <argsstring>(const EDIT_ARG_MIX &amp;obj, bool skipType, bool skipDetail)</argsstring>
        <name>deleteLine</name>
        <qualifiedname>editorObject::deleteLine</qualifiedname>
        <param>
          <type>const <ref refid="editorObject_8hpp_1a8c7c688d1e63ff780f13669e00fc091c" kindref="member">EDIT_ARG_MIX</ref> &amp;</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>skipType</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>skipDetail</declname>
        </param>
        <briefdescription>
<para>Deletes a line of mix data. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>The mix data to delete. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>skipType</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether to skip matching the <computeroutput>type</computeroutput> field. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>skipDetail</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether to skip matching the <computeroutput>details</computeroutput> field. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The number of lines deleted. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MainObjects/editorObject/editorObject.hpp" line="109" column="9" bodyfile="include/MainObjects/editorObject/deleteline.cpp" bodystart="4" bodyend="21"/>
      </memberdef>
      <memberdef kind="function" id="classeditorObject_1a74c726d83f0402fa3df6f74ac501dfea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename EDIT_ARG_TYPE</type>
          </param>
        </templateparamlist>
        <type>int</type>
        <definition>int editorObject::deleteLine</definition>
        <argsstring>(const EDIT_ARG_TYPE &amp;obj)</argsstring>
        <name>deleteLine</name>
        <qualifiedname>editorObject::deleteLine</qualifiedname>
        <param>
          <type>const EDIT_ARG_TYPE &amp;</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
<para>Deletes a line of data from the editor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>EDIT_ARG_TYPE</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of data to delete. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>The data object to delete. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The number of lines deleted. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MainObjects/editorObject/editorObject.hpp" line="121" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classeditorObject_1a4d830121f5d68c47448ec062e015cae5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool editorObject::render</definition>
        <argsstring>(const UNSANITIZED &amp;trackTitle, litedb &amp;ROOTDB)</argsstring>
        <name>render</name>
        <qualifiedname>editorObject::render</qualifiedname>
        <param>
          <type>const <ref refid="fileNameSanitizer_8hpp_1a3dbfced66c4bb073515956060fd59604" kindref="member">UNSANITIZED</ref> &amp;</type>
          <declname>trackTitle</declname>
        </param>
        <param>
          <type><ref refid="classlitedb" kindref="compound">litedb</ref> &amp;</type>
          <declname>ROOTDB</declname>
        </param>
        <briefdescription>
<para>Renders the project data to the root database. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>trackTitle</parametername>
</parameternamelist>
<parameterdescription>
<para>The unsanitized title of the track to render. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ROOTDB</parametername>
</parameternamelist>
<parameterdescription>
<para>The root database to render to. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if the rendering was successful, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MainObjects/editorObject/editorObject.hpp" line="129" column="10" bodyfile="include/MainObjects/editorObject/render.cpp" bodystart="3" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="classeditorObject_1a394a200d5cf41ec74152c799d17b35e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void editorObject::demoPlayInit</definition>
        <argsstring>(std::shared_ptr&lt; audioPlayer &gt; &amp;player, unsigned int frameBufferSize, const UNSANITIZED &amp;trackTitle)</argsstring>
        <name>demoPlayInit</name>
        <qualifiedname>editorObject::demoPlayInit</qualifiedname>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classaudioPlayer" kindref="compound">audioPlayer</ref> &gt; &amp;</type>
          <declname>player</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>frameBufferSize</declname>
        </param>
        <param>
          <type>const <ref refid="fileNameSanitizer_8hpp_1a3dbfced66c4bb073515956060fd59604" kindref="member">UNSANITIZED</ref> &amp;</type>
          <declname>trackTitle</declname>
        </param>
        <briefdescription>
<para>Initializes a demo player for a given track. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">player</parametername>
</parameternamelist>
<parameterdescription>
<para>A shared pointer to the audio player to initialize. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>frameBufferSize</parametername>
</parameternamelist>
<parameterdescription>
<para>The frame buffer size for the player. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>trackTitle</parametername>
</parameternamelist>
<parameterdescription>
<para>The unsanitized title of the track to play. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MainObjects/editorObject/editorObject.hpp" line="137" column="10" bodyfile="include/MainObjects/editorObject/editorObject.cpp" bodystart="40" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="classeditorObject_1ae4f8059616e377582bade705a44aafb6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool editorObject::pushToRootDB</definition>
        <argsstring>(litedb &amp;ROOTDB, const UNSANITIZED &amp;trackTitleToPush)</argsstring>
        <name>pushToRootDB</name>
        <qualifiedname>editorObject::pushToRootDB</qualifiedname>
        <param>
          <type><ref refid="classlitedb" kindref="compound">litedb</ref> &amp;</type>
          <declname>ROOTDB</declname>
        </param>
        <param>
          <type>const <ref refid="fileNameSanitizer_8hpp_1a3dbfced66c4bb073515956060fd59604" kindref="member">UNSANITIZED</ref> &amp;</type>
          <declname>trackTitleToPush</declname>
        </param>
        <briefdescription>
<para>Pushes a track to the root database. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ROOTDB</parametername>
</parameternamelist>
<parameterdescription>
<para>The root database to push to. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>trackTitleToPush</parametername>
</parameternamelist>
<parameterdescription>
<para>The unsanitized title of the track to push. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if the push was successful, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MainObjects/editorObject/editorObject.hpp" line="148" column="10" bodyfile="include/MainObjects/editorObject/editorObject.cpp" bodystart="158" bodyend="173"/>
      </memberdef>
      <memberdef kind="function" id="classeditorObject_1a634c551a93f376650075d82dcbe1ffd5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool editorObject::pushToRootDB</definition>
        <argsstring>(litedb &amp;ROOTDB, const UNSANITIZED &amp;musicTitle, const UNSANITIZED &amp;musicComposer)</argsstring>
        <name>pushToRootDB</name>
        <qualifiedname>editorObject::pushToRootDB</qualifiedname>
        <param>
          <type><ref refid="classlitedb" kindref="compound">litedb</ref> &amp;</type>
          <declname>ROOTDB</declname>
        </param>
        <param>
          <type>const <ref refid="fileNameSanitizer_8hpp_1a3dbfced66c4bb073515956060fd59604" kindref="member">UNSANITIZED</ref> &amp;</type>
          <declname>musicTitle</declname>
        </param>
        <param>
          <type>const <ref refid="fileNameSanitizer_8hpp_1a3dbfced66c4bb073515956060fd59604" kindref="member">UNSANITIZED</ref> &amp;</type>
          <declname>musicComposer</declname>
        </param>
        <briefdescription>
<para>Pushes a music entry to the root database. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ROOTDB</parametername>
</parameternamelist>
<parameterdescription>
<para>The root database to push to. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>musicTitle</parametername>
</parameternamelist>
<parameterdescription>
<para>The unsanitized title of the music. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>musicComposer</parametername>
</parameternamelist>
<parameterdescription>
<para>The unsanitized composer of the music. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if the push was successful, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MainObjects/editorObject/editorObject.hpp" line="157" column="10" bodyfile="include/MainObjects/editorObject/editorObject.cpp" bodystart="176" bodyend="255"/>
      </memberdef>
      <memberdef kind="function" id="classeditorObject_1a720a623f570f5fbeafb28e812a127938" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename EDIT_ARG_TYPE</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void editorObject::getAll</definition>
        <argsstring>(std::function&lt; void(const EDIT_ARG_TYPE &amp;obj)&gt; jsonCallback)</argsstring>
        <name>getAll</name>
        <qualifiedname>editorObject::getAll</qualifiedname>
        <param>
          <type>std::function&lt; void(const EDIT_ARG_TYPE &amp;obj)&gt;</type>
          <declname>jsonCallback</declname>
        </param>
        <briefdescription>
<para>Gets all data of a specific type from the editor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>EDIT_ARG_TYPE</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of data to get. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>jsonCallback</parametername>
</parameternamelist>
<parameterdescription>
<para>A callback function to process each data object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MainObjects/editorObject/editorObject.hpp" line="168" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classeditorObject_1af807921cf49ccaa0d561badcb5348087" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename EDIT_ARG_TYPE</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool editorObject::Undo</definition>
        <argsstring>()</argsstring>
        <name>Undo</name>
        <qualifiedname>editorObject::Undo</qualifiedname>
        <briefdescription>
<para>Undoes the last operation. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>EDIT_ARG_TYPE</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of data to undo. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if the undo was successful, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MainObjects/editorObject/editorObject.hpp" line="176" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classeditorObject_1a70a6c28f2ad7b19ff50427f14378291a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename EDIT_ARG_TYPE</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool editorObject::Undo</definition>
        <argsstring>(const UNSANITIZED &amp;musicName)</argsstring>
        <name>Undo</name>
        <qualifiedname>editorObject::Undo</qualifiedname>
        <param>
          <type>const <ref refid="fileNameSanitizer_8hpp_1a3dbfced66c4bb073515956060fd59604" kindref="member">UNSANITIZED</ref> &amp;</type>
          <declname>musicName</declname>
        </param>
        <briefdescription>
<para>Undoes the last operation for a specific music entry. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>EDIT_ARG_TYPE</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of data to undo. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>musicName</parametername>
</parameternamelist>
<parameterdescription>
<para>The unsanitized name of the music. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if the undo was successful, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MainObjects/editorObject/editorObject.hpp" line="185" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classeditorObject_1ae24df06774592614acbfb17701f4e2e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename EDIT_ARG_TYPE</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool editorObject::Redo</definition>
        <argsstring>()</argsstring>
        <name>Redo</name>
        <qualifiedname>editorObject::Redo</qualifiedname>
        <briefdescription>
<para>Redoes the last undone operation. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>EDIT_ARG_TYPE</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of data to redo. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if the redo was successful, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MainObjects/editorObject/editorObject.hpp" line="193" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classeditorObject_1a2987ce88cb1d9a435871f80398a76e63" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename EDIT_ARG_TYPE</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool editorObject::Redo</definition>
        <argsstring>(const UNSANITIZED &amp;musicName)</argsstring>
        <name>Redo</name>
        <qualifiedname>editorObject::Redo</qualifiedname>
        <param>
          <type>const <ref refid="fileNameSanitizer_8hpp_1a3dbfced66c4bb073515956060fd59604" kindref="member">UNSANITIZED</ref> &amp;</type>
          <declname>musicName</declname>
        </param>
        <briefdescription>
<para>Redoes the last undone operation for a specific music entry. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>EDIT_ARG_TYPE</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of data to redo. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>musicName</parametername>
</parameternamelist>
<parameterdescription>
<para>The unsanitized name of the music. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if the redo was successful, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MainObjects/editorObject/editorObject.hpp" line="202" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classeditorObject_1a03c8ce3bddba220df4e2f9c90ab25ca0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename EDIT_ARG_TYPE</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool editorObject::Go</definition>
        <argsstring>(const DONT_SANITIZE &amp;branchName, git_oid *commitID)</argsstring>
        <name>Go</name>
        <qualifiedname>editorObject::Go</qualifiedname>
        <param>
          <type>const <ref refid="fileNameSanitizer_8hpp_1a2ec6d785f45dccabee178706d40c0d7d" kindref="member">DONT_SANITIZE</ref> &amp;</type>
          <declname>branchName</declname>
        </param>
        <param>
          <type>git_oid *</type>
          <declname>commitID</declname>
        </param>
        <briefdescription>
<para>Switches to a specific branch or commit. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>EDIT_ARG_TYPE</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of data to operate on. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>branchName</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the branch to switch to. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>commitID</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the commit <ref refid="MixMachine_8hpp_1a61bcf5b33c99ebcd26c016da6c8a69bc" kindref="member">ID</ref> to switch to (optional). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if the operation was successful, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MainObjects/editorObject/editorObject.hpp" line="212" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classeditorObject_1a360e0000f965db643a0127f7240a425a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename EDIT_ARG_TYPE</type>
          </param>
        </templateparamlist>
        <type><ref refid="fileNameSanitizer_8hpp_1a2ec6d785f45dccabee178706d40c0d7d" kindref="member">DONT_SANITIZE</ref></type>
        <definition>DONT_SANITIZE editorObject::GetLogWithJSONGraph</definition>
        <argsstring>()</argsstring>
        <name>GetLogWithJSONGraph</name>
        <qualifiedname>editorObject::GetLogWithJSONGraph</qualifiedname>
        <briefdescription>
<para>Gets the commit log as a JSON graph. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>EDIT_ARG_TYPE</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of data to get the log for. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The commit log as a JSON string. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MainObjects/editorObject/editorObject.hpp" line="220" column="19"/>
      </memberdef>
      <memberdef kind="function" id="classeditorObject_1a994b27da4e10c21758c374d77b638cad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename EDIT_ARG_TYPE</type>
          </param>
        </templateparamlist>
        <type><ref refid="fileNameSanitizer_8hpp_1a2ec6d785f45dccabee178706d40c0d7d" kindref="member">DONT_SANITIZE</ref></type>
        <definition>DONT_SANITIZE editorObject::GetLogWithJSONGraph</definition>
        <argsstring>(const UNSANITIZED &amp;musicName)</argsstring>
        <name>GetLogWithJSONGraph</name>
        <qualifiedname>editorObject::GetLogWithJSONGraph</qualifiedname>
        <param>
          <type>const <ref refid="fileNameSanitizer_8hpp_1a3dbfced66c4bb073515956060fd59604" kindref="member">UNSANITIZED</ref> &amp;</type>
          <declname>musicName</declname>
        </param>
        <briefdescription>
<para>Gets the commit log for a specific music entry as a JSON graph. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>EDIT_ARG_TYPE</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of data to get the log for. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>musicName</parametername>
</parameternamelist>
<parameterdescription>
<para>The unsanitized name of the music. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The commit log as a JSON string. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MainObjects/editorObject/editorObject.hpp" line="229" column="19"/>
      </memberdef>
      <memberdef kind="function" id="classeditorObject_1af72d99c3cb239afe1f633ad592327ae7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename EDIT_ARG_TYPE</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool editorObject::UpdateLog</definition>
        <argsstring>()</argsstring>
        <name>UpdateLog</name>
        <qualifiedname>editorObject::UpdateLog</qualifiedname>
        <briefdescription>
<para>Updates the commit log. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>EDIT_ARG_TYPE</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of data to update the log for. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if the update was successful, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MainObjects/editorObject/editorObject.hpp" line="237" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classeditorObject_1a551a8f7e02b6d1723a8699af450daa79" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename EDIT_ARG_TYPE</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool editorObject::UpdateLog</definition>
        <argsstring>(const DONT_SANITIZE &amp;branchName)</argsstring>
        <name>UpdateLog</name>
        <qualifiedname>editorObject::UpdateLog</qualifiedname>
        <param>
          <type>const <ref refid="fileNameSanitizer_8hpp_1a2ec6d785f45dccabee178706d40c0d7d" kindref="member">DONT_SANITIZE</ref> &amp;</type>
          <declname>branchName</declname>
        </param>
        <briefdescription>
<para>Updates the commit log for a specific branch. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>EDIT_ARG_TYPE</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of data to update the log for. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>branchName</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the branch to update. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if the update was successful, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MainObjects/editorObject/editorObject.hpp" line="246" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classeditorObject_1a28dc3aa435512e4ad16ad0f821c64907" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename EDIT_ARG_TYPE</type>
          </param>
        </templateparamlist>
        <type><ref refid="structDiffResult" kindref="compound">DiffResult</ref></type>
        <definition>DiffResult editorObject::GetDiff</definition>
        <argsstring>(const gitwrap::commit &amp;oldTimeStamp, const gitwrap::commit &amp;newTimeStamp)</argsstring>
        <name>GetDiff</name>
        <qualifiedname>editorObject::GetDiff</qualifiedname>
        <param>
          <type>const <ref refid="structgitwrap_1_1commit" kindref="compound">gitwrap::commit</ref> &amp;</type>
          <declname>oldTimeStamp</declname>
        </param>
        <param>
          <type>const <ref refid="structgitwrap_1_1commit" kindref="compound">gitwrap::commit</ref> &amp;</type>
          <declname>newTimeStamp</declname>
        </param>
        <briefdescription>
<para>Gets the diff between two timestamps. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>EDIT_ARG_TYPE</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of data to get the diff for. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>oldTimeStamp</parametername>
</parameternamelist>
<parameterdescription>
<para>The old timestamp. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>newTimeStamp</parametername>
</parameternamelist>
<parameterdescription>
<para>The new timestamp. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A <computeroutput><ref refid="structDiffResult" kindref="compound">DiffResult</ref></computeroutput> object containing the diff. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MainObjects/editorObject/editorObject.hpp" line="256" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classeditorObject_1aa664471474287d500e65d09f08f61001" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="jsonWrapper_8hpp_1a6c08a6bca89aa954d4bf90371a27dfa9" kindref="member">nj</ref> &amp;</type>
        <definition>nj &amp; editorObject::operator[]</definition>
        <argsstring>(const DONT_SANITIZE &amp;key)</argsstring>
        <name>operator[]</name>
        <qualifiedname>editorObject::operator[]</qualifiedname>
        <param>
          <type>const <ref refid="fileNameSanitizer_8hpp_1a2ec6d785f45dccabee178706d40c0d7d" kindref="member">DONT_SANITIZE</ref> &amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>Provides access to the underlying JSON data for key-value pairs. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>The key to access. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A reference to the JSON value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MainObjects/editorObject/editorObject.hpp" line="263" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classeditorObject_1a9e14b13d0a93115510856587e3d0b597" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="fileNameSanitizer_8hpp_1a2ec6d785f45dccabee178706d40c0d7d" kindref="member">DONT_SANITIZE</ref></type>
        <definition>DONT_SANITIZE editorObject::DESTROY_PROJECT</definition>
        <argsstring>()</argsstring>
        <name>DESTROY_PROJECT</name>
        <qualifiedname>editorObject::DESTROY_PROJECT</qualifiedname>
        <briefdescription>
<para>Destroys the entire project. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>This operation is irreversible. </para>
</simplesect>
<simplesect kind="return"><para>A string indicating the result of the operation. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MainObjects/editorObject/editorObject.hpp" line="270" column="19" bodyfile="include/MainObjects/editorObject/editorObject.cpp" bodystart="68" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="classeditorObject_1a21d30e041cf35f40d4070a622256575c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool editorObject::ConfigNewMusic</definition>
        <argsstring>(const UNSANITIZED &amp;NewMusicName, const UNSANITIZED &amp;composer, const fs::path &amp;musicPath, const DONT_SANITIZE &amp;firstBar=&quot;0&quot;)</argsstring>
        <name>ConfigNewMusic</name>
        <qualifiedname>editorObject::ConfigNewMusic</qualifiedname>
        <param>
          <type>const <ref refid="fileNameSanitizer_8hpp_1a3dbfced66c4bb073515956060fd59604" kindref="member">UNSANITIZED</ref> &amp;</type>
          <declname>NewMusicName</declname>
        </param>
        <param>
          <type>const <ref refid="fileNameSanitizer_8hpp_1a3dbfced66c4bb073515956060fd59604" kindref="member">UNSANITIZED</ref> &amp;</type>
          <declname>composer</declname>
        </param>
        <param>
          <type>const fs::path &amp;</type>
          <declname>musicPath</declname>
        </param>
        <param>
          <type>const <ref refid="fileNameSanitizer_8hpp_1a2ec6d785f45dccabee178706d40c0d7d" kindref="member">DONT_SANITIZE</ref> &amp;</type>
          <declname>firstBar</declname>
          <defval>&quot;0&quot;</defval>
        </param>
        <briefdescription>
<para>Configures a new music entry. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>NewMusicName</parametername>
</parameternamelist>
<parameterdescription>
<para>The unsanitized name of the new music. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>composer</parametername>
</parameternamelist>
<parameterdescription>
<para>The unsanitized composer of the new music. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>musicPath</parametername>
</parameternamelist>
<parameterdescription>
<para>The path to the music file. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>firstBar</parametername>
</parameternamelist>
<parameterdescription>
<para>The first bar of the music (defaults to &quot;0&quot;). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if the configuration was successful, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MainObjects/editorObject/editorObject.hpp" line="280" column="10" bodyfile="include/MainObjects/editorObject/editorObject.cpp" bodystart="91" bodyend="142"/>
      </memberdef>
      <memberdef kind="function" id="classeditorObject_1adb7115154add6c06baf9c4e090977d24" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool editorObject::Open</definition>
        <argsstring>(const fs::path &amp;projectPath)</argsstring>
        <name>Open</name>
        <qualifiedname>editorObject::Open</qualifiedname>
        <param>
          <type>const fs::path &amp;</type>
          <declname>projectPath</declname>
        </param>
        <briefdescription>
<para>Opens an existing editor project. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>projectPath</parametername>
</parameternamelist>
<parameterdescription>
<para>The path to the project. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if the project was opened successfully, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MainObjects/editorObject/editorObject.hpp" line="290" column="10" bodyfile="include/MainObjects/editorObject/editorObject.cpp" bodystart="145" bodyend="155"/>
      </memberdef>
      <memberdef kind="function" id="classeditorObject_1a690ad4f1302edbb56c2ae2cdba91189d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>editorObject::editorObject</definition>
        <argsstring>()=delete</argsstring>
        <name>editorObject</name>
        <qualifiedname>editorObject::editorObject</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MainObjects/editorObject/editorObject.hpp" line="292" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classeditorObject_1a7a44ba5a8abd1bdacdf538b08360339b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>editorObject::editorObject</definition>
        <argsstring>(const DONT_SANITIZE &amp;auth_name, const DONT_SANITIZE &amp;auth_email)</argsstring>
        <name>editorObject</name>
        <qualifiedname>editorObject::editorObject</qualifiedname>
        <param>
          <type>const <ref refid="fileNameSanitizer_8hpp_1a2ec6d785f45dccabee178706d40c0d7d" kindref="member">DONT_SANITIZE</ref> &amp;</type>
          <declname>auth_name</declname>
        </param>
        <param>
          <type>const <ref refid="fileNameSanitizer_8hpp_1a2ec6d785f45dccabee178706d40c0d7d" kindref="member">DONT_SANITIZE</ref> &amp;</type>
          <declname>auth_email</declname>
        </param>
        <briefdescription>
<para>Constructs a new editor object with author information. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>auth_name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the author. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>auth_email</parametername>
</parameternamelist>
<parameterdescription>
<para>The email of the author. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MainObjects/editorObject/editorObject.hpp" line="299" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classeditorObject_1ae5c4229489a3b798968960d7806a96a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>editorObject::~editorObject</definition>
        <argsstring>()=default</argsstring>
        <name>~editorObject</name>
        <qualifiedname>editorObject::~editorObject</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MainObjects/editorObject/editorObject.hpp" line="301" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classeditorObject_1a7c16eefe332608bafb37c26698bce30d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="PDJE__EXPORT__SETTER_8hpp_1a881b531a2da9c72650a79edb575b6c8c" kindref="member">PDJE_API</ref> bool</type>
        <definition>PDJE_API bool editorObject::AddLine</definition>
        <argsstring>(const EDIT_ARG_MUSIC &amp;obj)</argsstring>
        <name>AddLine</name>
        <qualifiedname>editorObject::AddLine</qualifiedname>
        <param>
          <type>const <ref refid="structEDIT__ARG__MUSIC" kindref="compound">EDIT_ARG_MUSIC</ref> &amp;</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MainObjects/editorObject/addline.cpp" line="6" column="1" bodyfile="include/MainObjects/editorObject/addline.cpp" bodystart="6" bodyend="22"/>
      </memberdef>
      <memberdef kind="function" id="classeditorObject_1a58952da718803281ea57414250a0d1a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="PDJE__EXPORT__SETTER_8hpp_1a881b531a2da9c72650a79edb575b6c8c" kindref="member">PDJE_API</ref> bool</type>
        <definition>PDJE_API bool editorObject::AddLine</definition>
        <argsstring>(const EDIT_ARG_MIX &amp;obj)</argsstring>
        <name>AddLine</name>
        <qualifiedname>editorObject::AddLine</qualifiedname>
        <param>
          <type>const <ref refid="editorObject_8hpp_1a8c7c688d1e63ff780f13669e00fc091c" kindref="member">EDIT_ARG_MIX</ref> &amp;</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MainObjects/editorObject/addline.cpp" line="27" column="1" bodyfile="include/MainObjects/editorObject/addline.cpp" bodystart="27" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="classeditorObject_1a615a1f759e859e6b33a534ed9f463aa6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="PDJE__EXPORT__SETTER_8hpp_1a881b531a2da9c72650a79edb575b6c8c" kindref="member">PDJE_API</ref> bool</type>
        <definition>PDJE_API bool editorObject::AddLine</definition>
        <argsstring>(const EDIT_ARG_NOTE &amp;obj)</argsstring>
        <name>AddLine</name>
        <qualifiedname>editorObject::AddLine</qualifiedname>
        <param>
          <type>const <ref refid="editorObject_8hpp_1a2de2e14491806b81a5ba85836b550f18" kindref="member">EDIT_ARG_NOTE</ref> &amp;</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MainObjects/editorObject/addline.cpp" line="66" column="1" bodyfile="include/MainObjects/editorObject/addline.cpp" bodystart="66" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="classeditorObject_1a7114ff449a4f6f057020da88acf1b7cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="PDJE__EXPORT__SETTER_8hpp_1a881b531a2da9c72650a79edb575b6c8c" kindref="member">PDJE_API</ref> bool</type>
        <definition>PDJE_API bool editorObject::AddLine</definition>
        <argsstring>(const EDIT_ARG_KEY_VALUE &amp;obj)</argsstring>
        <name>AddLine</name>
        <qualifiedname>editorObject::AddLine</qualifiedname>
        <param>
          <type>const <ref refid="editorObject_8hpp_1a305098bfe154230cbef2fbe44e5f9220" kindref="member">EDIT_ARG_KEY_VALUE</ref> &amp;</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MainObjects/editorObject/addline.cpp" line="85" column="1" bodyfile="include/MainObjects/editorObject/addline.cpp" bodystart="85" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="classeditorObject_1affb96a97230130694103174193185c63" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="PDJE__EXPORT__SETTER_8hpp_1a881b531a2da9c72650a79edb575b6c8c" kindref="member">PDJE_API</ref> int</type>
        <definition>PDJE_API int editorObject::deleteLine</definition>
        <argsstring>(const EDIT_ARG_NOTE &amp;obj)</argsstring>
        <name>deleteLine</name>
        <qualifiedname>editorObject::deleteLine</qualifiedname>
        <param>
          <type>const <ref refid="editorObject_8hpp_1a2de2e14491806b81a5ba85836b550f18" kindref="member">EDIT_ARG_NOTE</ref> &amp;</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MainObjects/editorObject/deleteline.cpp" line="27" column="1" bodyfile="include/MainObjects/editorObject/deleteline.cpp" bodystart="27" bodyend="38"/>
      </memberdef>
      <memberdef kind="function" id="classeditorObject_1a4039d7882c1b739e1729ff2e92b26aca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="PDJE__EXPORT__SETTER_8hpp_1a881b531a2da9c72650a79edb575b6c8c" kindref="member">PDJE_API</ref> int</type>
        <definition>PDJE_API int editorObject::deleteLine</definition>
        <argsstring>(const EDIT_ARG_KEY_VALUE &amp;obj)</argsstring>
        <name>deleteLine</name>
        <qualifiedname>editorObject::deleteLine</qualifiedname>
        <param>
          <type>const <ref refid="editorObject_8hpp_1a305098bfe154230cbef2fbe44e5f9220" kindref="member">EDIT_ARG_KEY_VALUE</ref> &amp;</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MainObjects/editorObject/deleteline.cpp" line="43" column="1" bodyfile="include/MainObjects/editorObject/deleteline.cpp" bodystart="43" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="classeditorObject_1a203de908ea6b1b165bd3db4d1c6ad9ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="PDJE__EXPORT__SETTER_8hpp_1a881b531a2da9c72650a79edb575b6c8c" kindref="member">PDJE_API</ref> int</type>
        <definition>PDJE_API int editorObject::deleteLine</definition>
        <argsstring>(const EDIT_ARG_MUSIC &amp;obj)</argsstring>
        <name>deleteLine</name>
        <qualifiedname>editorObject::deleteLine</qualifiedname>
        <param>
          <type>const <ref refid="structEDIT__ARG__MUSIC" kindref="compound">EDIT_ARG_MUSIC</ref> &amp;</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MainObjects/editorObject/deleteline.cpp" line="59" column="1" bodyfile="include/MainObjects/editorObject/deleteline.cpp" bodystart="59" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="classeditorObject_1aa98ae8a1affe56149fce60791cc095b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="PDJE__EXPORT__SETTER_8hpp_1a881b531a2da9c72650a79edb575b6c8c" kindref="member">PDJE_API</ref> void</type>
        <definition>PDJE_API void editorObject::getAll</definition>
        <argsstring>(std::function&lt; void(const EDIT_ARG_KEY_VALUE &amp;obj)&gt; jsonCallback)</argsstring>
        <name>getAll</name>
        <qualifiedname>editorObject::getAll</qualifiedname>
        <param>
          <type>std::function&lt; void(const <ref refid="editorObject_8hpp_1a305098bfe154230cbef2fbe44e5f9220" kindref="member">EDIT_ARG_KEY_VALUE</ref> &amp;obj)&gt;</type>
          <declname>jsonCallback</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MainObjects/editorObject/getall.cpp" line="6" column="1" bodyfile="include/MainObjects/editorObject/getall.cpp" bodystart="6" bodyend="9"/>
      </memberdef>
      <memberdef kind="function" id="classeditorObject_1ad2bd7260eb834fb55e0971862edab937" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="PDJE__EXPORT__SETTER_8hpp_1a881b531a2da9c72650a79edb575b6c8c" kindref="member">PDJE_API</ref> void</type>
        <definition>PDJE_API void editorObject::getAll</definition>
        <argsstring>(std::function&lt; void(const EDIT_ARG_MIX &amp;obj)&gt; jsonCallback)</argsstring>
        <name>getAll</name>
        <qualifiedname>editorObject::getAll</qualifiedname>
        <param>
          <type>std::function&lt; void(const <ref refid="editorObject_8hpp_1a8c7c688d1e63ff780f13669e00fc091c" kindref="member">EDIT_ARG_MIX</ref> &amp;obj)&gt;</type>
          <declname>jsonCallback</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MainObjects/editorObject/getall.cpp" line="14" column="1" bodyfile="include/MainObjects/editorObject/getall.cpp" bodystart="14" bodyend="17"/>
      </memberdef>
      <memberdef kind="function" id="classeditorObject_1a6982572c1a01fa74ae3574562274af29" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="PDJE__EXPORT__SETTER_8hpp_1a881b531a2da9c72650a79edb575b6c8c" kindref="member">PDJE_API</ref> void</type>
        <definition>PDJE_API void editorObject::getAll</definition>
        <argsstring>(std::function&lt; void(const EDIT_ARG_NOTE &amp;obj)&gt; jsonCallback)</argsstring>
        <name>getAll</name>
        <qualifiedname>editorObject::getAll</qualifiedname>
        <param>
          <type>std::function&lt; void(const <ref refid="editorObject_8hpp_1a2de2e14491806b81a5ba85836b550f18" kindref="member">EDIT_ARG_NOTE</ref> &amp;obj)&gt;</type>
          <declname>jsonCallback</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MainObjects/editorObject/getall.cpp" line="22" column="1" bodyfile="include/MainObjects/editorObject/getall.cpp" bodystart="22" bodyend="25"/>
      </memberdef>
      <memberdef kind="function" id="classeditorObject_1af6b09aa1cea6655b5a63f3e6e25ddba8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="PDJE__EXPORT__SETTER_8hpp_1a881b531a2da9c72650a79edb575b6c8c" kindref="member">PDJE_API</ref> void</type>
        <definition>PDJE_API void editorObject::getAll</definition>
        <argsstring>(std::function&lt; void(const EDIT_ARG_MUSIC &amp;obj)&gt; jsonCallback)</argsstring>
        <name>getAll</name>
        <qualifiedname>editorObject::getAll</qualifiedname>
        <param>
          <type>std::function&lt; void(const <ref refid="structEDIT__ARG__MUSIC" kindref="compound">EDIT_ARG_MUSIC</ref> &amp;obj)&gt;</type>
          <declname>jsonCallback</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MainObjects/editorObject/getall.cpp" line="30" column="1" bodyfile="include/MainObjects/editorObject/getall.cpp" bodystart="30" bodyend="35"/>
      </memberdef>
      <memberdef kind="function" id="classeditorObject_1a2b6e0ddcc5927083e534abeb7330abc2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="PDJE__EXPORT__SETTER_8hpp_1a881b531a2da9c72650a79edb575b6c8c" kindref="member">PDJE_API</ref> <ref refid="structDiffResult" kindref="compound">DiffResult</ref></type>
        <definition>PDJE_API DiffResult editorObject::GetDiff</definition>
        <argsstring>(const gitwrap::commit &amp;oldTimeStamp, const gitwrap::commit &amp;newTimeStamp)</argsstring>
        <name>GetDiff</name>
        <qualifiedname>editorObject::GetDiff</qualifiedname>
        <param>
          <type>const <ref refid="structgitwrap_1_1commit" kindref="compound">gitwrap::commit</ref> &amp;</type>
          <declname>oldTimeStamp</declname>
        </param>
        <param>
          <type>const <ref refid="structgitwrap_1_1commit" kindref="compound">gitwrap::commit</ref> &amp;</type>
          <declname>newTimeStamp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MainObjects/editorObject/getdiff.cpp" line="5" column="1" bodyfile="include/MainObjects/editorObject/getdiff.cpp" bodystart="6" bodyend="10"/>
      </memberdef>
      <memberdef kind="function" id="classeditorObject_1a2b6e0ddcc5927083e534abeb7330abc2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="PDJE__EXPORT__SETTER_8hpp_1a881b531a2da9c72650a79edb575b6c8c" kindref="member">PDJE_API</ref> <ref refid="structDiffResult" kindref="compound">DiffResult</ref></type>
        <definition>PDJE_API DiffResult editorObject::GetDiff</definition>
        <argsstring>(const gitwrap::commit &amp;oldTimeStamp, const gitwrap::commit &amp;newTimeStamp)</argsstring>
        <name>GetDiff</name>
        <qualifiedname>editorObject::GetDiff</qualifiedname>
        <param>
          <type>const <ref refid="structgitwrap_1_1commit" kindref="compound">gitwrap::commit</ref> &amp;</type>
          <declname>oldTimeStamp</declname>
        </param>
        <param>
          <type>const <ref refid="structgitwrap_1_1commit" kindref="compound">gitwrap::commit</ref> &amp;</type>
          <declname>newTimeStamp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MainObjects/editorObject/getdiff.cpp" line="14" column="1" bodyfile="include/MainObjects/editorObject/getdiff.cpp" bodystart="15" bodyend="19"/>
      </memberdef>
      <memberdef kind="function" id="classeditorObject_1a2b6e0ddcc5927083e534abeb7330abc2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="PDJE__EXPORT__SETTER_8hpp_1a881b531a2da9c72650a79edb575b6c8c" kindref="member">PDJE_API</ref> <ref refid="structDiffResult" kindref="compound">DiffResult</ref></type>
        <definition>PDJE_API DiffResult editorObject::GetDiff</definition>
        <argsstring>(const gitwrap::commit &amp;oldTimeStamp, const gitwrap::commit &amp;newTimeStamp)</argsstring>
        <name>GetDiff</name>
        <qualifiedname>editorObject::GetDiff</qualifiedname>
        <param>
          <type>const <ref refid="structgitwrap_1_1commit" kindref="compound">gitwrap::commit</ref> &amp;</type>
          <declname>oldTimeStamp</declname>
        </param>
        <param>
          <type>const <ref refid="structgitwrap_1_1commit" kindref="compound">gitwrap::commit</ref> &amp;</type>
          <declname>newTimeStamp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MainObjects/editorObject/getdiff.cpp" line="23" column="1" bodyfile="include/MainObjects/editorObject/getdiff.cpp" bodystart="24" bodyend="28"/>
      </memberdef>
      <memberdef kind="function" id="classeditorObject_1a2b6e0ddcc5927083e534abeb7330abc2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="PDJE__EXPORT__SETTER_8hpp_1a881b531a2da9c72650a79edb575b6c8c" kindref="member">PDJE_API</ref> <ref refid="structDiffResult" kindref="compound">DiffResult</ref></type>
        <definition>PDJE_API DiffResult editorObject::GetDiff</definition>
        <argsstring>(const gitwrap::commit &amp;oldTimeStamp, const gitwrap::commit &amp;newTimeStamp)</argsstring>
        <name>GetDiff</name>
        <qualifiedname>editorObject::GetDiff</qualifiedname>
        <param>
          <type>const <ref refid="structgitwrap_1_1commit" kindref="compound">gitwrap::commit</ref> &amp;</type>
          <declname>oldTimeStamp</declname>
        </param>
        <param>
          <type>const <ref refid="structgitwrap_1_1commit" kindref="compound">gitwrap::commit</ref> &amp;</type>
          <declname>newTimeStamp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MainObjects/editorObject/getdiff.cpp" line="32" column="1" bodyfile="include/MainObjects/editorObject/getdiff.cpp" bodystart="33" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="classeditorObject_1a083291e2d68bd0105a45351d38a79d90" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="PDJE__EXPORT__SETTER_8hpp_1a881b531a2da9c72650a79edb575b6c8c" kindref="member">PDJE_API</ref> <ref refid="fileNameSanitizer_8hpp_1a2ec6d785f45dccabee178706d40c0d7d" kindref="member">DONT_SANITIZE</ref></type>
        <definition>PDJE_API DONT_SANITIZE editorObject::GetLogWithJSONGraph</definition>
        <argsstring>()</argsstring>
        <name>GetLogWithJSONGraph</name>
        <qualifiedname>editorObject::GetLogWithJSONGraph</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MainObjects/editorObject/getlogwithjsongraph.cpp" line="5" column="1" bodyfile="include/MainObjects/editorObject/getlogwithjsongraph.cpp" bodystart="6" bodyend="9"/>
      </memberdef>
      <memberdef kind="function" id="classeditorObject_1a083291e2d68bd0105a45351d38a79d90" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="PDJE__EXPORT__SETTER_8hpp_1a881b531a2da9c72650a79edb575b6c8c" kindref="member">PDJE_API</ref> <ref refid="fileNameSanitizer_8hpp_1a2ec6d785f45dccabee178706d40c0d7d" kindref="member">DONT_SANITIZE</ref></type>
        <definition>PDJE_API DONT_SANITIZE editorObject::GetLogWithJSONGraph</definition>
        <argsstring>()</argsstring>
        <name>GetLogWithJSONGraph</name>
        <qualifiedname>editorObject::GetLogWithJSONGraph</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MainObjects/editorObject/getlogwithjsongraph.cpp" line="13" column="1" bodyfile="include/MainObjects/editorObject/getlogwithjsongraph.cpp" bodystart="14" bodyend="17"/>
      </memberdef>
      <memberdef kind="function" id="classeditorObject_1a083291e2d68bd0105a45351d38a79d90" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="PDJE__EXPORT__SETTER_8hpp_1a881b531a2da9c72650a79edb575b6c8c" kindref="member">PDJE_API</ref> <ref refid="fileNameSanitizer_8hpp_1a2ec6d785f45dccabee178706d40c0d7d" kindref="member">DONT_SANITIZE</ref></type>
        <definition>PDJE_API DONT_SANITIZE editorObject::GetLogWithJSONGraph</definition>
        <argsstring>()</argsstring>
        <name>GetLogWithJSONGraph</name>
        <qualifiedname>editorObject::GetLogWithJSONGraph</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MainObjects/editorObject/getlogwithjsongraph.cpp" line="21" column="1" bodyfile="include/MainObjects/editorObject/getlogwithjsongraph.cpp" bodystart="22" bodyend="25"/>
      </memberdef>
      <memberdef kind="function" id="classeditorObject_1ad0b23d260054975199e1053bd6598ece" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="PDJE__EXPORT__SETTER_8hpp_1a881b531a2da9c72650a79edb575b6c8c" kindref="member">PDJE_API</ref> <ref refid="fileNameSanitizer_8hpp_1a2ec6d785f45dccabee178706d40c0d7d" kindref="member">DONT_SANITIZE</ref></type>
        <definition>PDJE_API DONT_SANITIZE editorObject::GetLogWithJSONGraph</definition>
        <argsstring>(const UNSANITIZED &amp;musicName)</argsstring>
        <name>GetLogWithJSONGraph</name>
        <qualifiedname>editorObject::GetLogWithJSONGraph</qualifiedname>
        <param>
          <type>const <ref refid="fileNameSanitizer_8hpp_1a3dbfced66c4bb073515956060fd59604" kindref="member">UNSANITIZED</ref> &amp;</type>
          <declname>musicName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MainObjects/editorObject/getlogwithjsongraph.cpp" line="29" column="1" bodyfile="include/MainObjects/editorObject/getlogwithjsongraph.cpp" bodystart="30" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="classeditorObject_1a81f7af7c5f4dee33a21bd22d01c68171" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="PDJE__EXPORT__SETTER_8hpp_1a881b531a2da9c72650a79edb575b6c8c" kindref="member">PDJE_API</ref> bool</type>
        <definition>PDJE_API bool editorObject::Go</definition>
        <argsstring>(const DONT_SANITIZE &amp;branchName, git_oid *commitID)</argsstring>
        <name>Go</name>
        <qualifiedname>editorObject::Go</qualifiedname>
        <param>
          <type>const <ref refid="fileNameSanitizer_8hpp_1a2ec6d785f45dccabee178706d40c0d7d" kindref="member">DONT_SANITIZE</ref> &amp;</type>
          <declname>branchName</declname>
        </param>
        <param>
          <type>git_oid *</type>
          <declname>commitID</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MainObjects/editorObject/go.cpp" line="5" column="1" bodyfile="include/MainObjects/editorObject/go.cpp" bodystart="6" bodyend="9"/>
      </memberdef>
      <memberdef kind="function" id="classeditorObject_1a81f7af7c5f4dee33a21bd22d01c68171" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="PDJE__EXPORT__SETTER_8hpp_1a881b531a2da9c72650a79edb575b6c8c" kindref="member">PDJE_API</ref> bool</type>
        <definition>PDJE_API bool editorObject::Go</definition>
        <argsstring>(const DONT_SANITIZE &amp;branchName, git_oid *commitID)</argsstring>
        <name>Go</name>
        <qualifiedname>editorObject::Go</qualifiedname>
        <param>
          <type>const <ref refid="fileNameSanitizer_8hpp_1a2ec6d785f45dccabee178706d40c0d7d" kindref="member">DONT_SANITIZE</ref> &amp;</type>
          <declname>branchName</declname>
        </param>
        <param>
          <type>git_oid *</type>
          <declname>commitID</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MainObjects/editorObject/go.cpp" line="13" column="1" bodyfile="include/MainObjects/editorObject/go.cpp" bodystart="14" bodyend="17"/>
      </memberdef>
      <memberdef kind="function" id="classeditorObject_1a81f7af7c5f4dee33a21bd22d01c68171" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="PDJE__EXPORT__SETTER_8hpp_1a881b531a2da9c72650a79edb575b6c8c" kindref="member">PDJE_API</ref> bool</type>
        <definition>PDJE_API bool editorObject::Go</definition>
        <argsstring>(const DONT_SANITIZE &amp;branchName, git_oid *commitID)</argsstring>
        <name>Go</name>
        <qualifiedname>editorObject::Go</qualifiedname>
        <param>
          <type>const <ref refid="fileNameSanitizer_8hpp_1a2ec6d785f45dccabee178706d40c0d7d" kindref="member">DONT_SANITIZE</ref> &amp;</type>
          <declname>branchName</declname>
        </param>
        <param>
          <type>git_oid *</type>
          <declname>commitID</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MainObjects/editorObject/go.cpp" line="21" column="1" bodyfile="include/MainObjects/editorObject/go.cpp" bodystart="22" bodyend="25"/>
      </memberdef>
      <memberdef kind="function" id="classeditorObject_1a81f7af7c5f4dee33a21bd22d01c68171" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="PDJE__EXPORT__SETTER_8hpp_1a881b531a2da9c72650a79edb575b6c8c" kindref="member">PDJE_API</ref> bool</type>
        <definition>PDJE_API bool editorObject::Go</definition>
        <argsstring>(const DONT_SANITIZE &amp;branchName, git_oid *commitID)</argsstring>
        <name>Go</name>
        <qualifiedname>editorObject::Go</qualifiedname>
        <param>
          <type>const <ref refid="fileNameSanitizer_8hpp_1a2ec6d785f45dccabee178706d40c0d7d" kindref="member">DONT_SANITIZE</ref> &amp;</type>
          <declname>branchName</declname>
        </param>
        <param>
          <type>git_oid *</type>
          <declname>commitID</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MainObjects/editorObject/go.cpp" line="29" column="1" bodyfile="include/MainObjects/editorObject/go.cpp" bodystart="30" bodyend="37"/>
      </memberdef>
      <memberdef kind="function" id="classeditorObject_1ad1d187780c05e8be6b4a674b39439410" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="PDJE__EXPORT__SETTER_8hpp_1a881b531a2da9c72650a79edb575b6c8c" kindref="member">PDJE_API</ref> bool</type>
        <definition>PDJE_API bool editorObject::Redo</definition>
        <argsstring>()</argsstring>
        <name>Redo</name>
        <qualifiedname>editorObject::Redo</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MainObjects/editorObject/redo.cpp" line="5" column="1" bodyfile="include/MainObjects/editorObject/redo.cpp" bodystart="6" bodyend="9"/>
      </memberdef>
      <memberdef kind="function" id="classeditorObject_1ad1d187780c05e8be6b4a674b39439410" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="PDJE__EXPORT__SETTER_8hpp_1a881b531a2da9c72650a79edb575b6c8c" kindref="member">PDJE_API</ref> bool</type>
        <definition>PDJE_API bool editorObject::Redo</definition>
        <argsstring>()</argsstring>
        <name>Redo</name>
        <qualifiedname>editorObject::Redo</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MainObjects/editorObject/redo.cpp" line="13" column="1" bodyfile="include/MainObjects/editorObject/redo.cpp" bodystart="14" bodyend="17"/>
      </memberdef>
      <memberdef kind="function" id="classeditorObject_1a6e1f247bff8d06697d445d47d3c27fa3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="PDJE__EXPORT__SETTER_8hpp_1a881b531a2da9c72650a79edb575b6c8c" kindref="member">PDJE_API</ref> bool</type>
        <definition>PDJE_API bool editorObject::Redo</definition>
        <argsstring>(const UNSANITIZED &amp;musicName)</argsstring>
        <name>Redo</name>
        <qualifiedname>editorObject::Redo</qualifiedname>
        <param>
          <type>const <ref refid="fileNameSanitizer_8hpp_1a3dbfced66c4bb073515956060fd59604" kindref="member">UNSANITIZED</ref> &amp;</type>
          <declname>musicName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MainObjects/editorObject/redo.cpp" line="20" column="1" bodyfile="include/MainObjects/editorObject/redo.cpp" bodystart="21" bodyend="37"/>
      </memberdef>
      <memberdef kind="function" id="classeditorObject_1ad1d187780c05e8be6b4a674b39439410" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="PDJE__EXPORT__SETTER_8hpp_1a881b531a2da9c72650a79edb575b6c8c" kindref="member">PDJE_API</ref> bool</type>
        <definition>PDJE_API bool editorObject::Redo</definition>
        <argsstring>()</argsstring>
        <name>Redo</name>
        <qualifiedname>editorObject::Redo</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MainObjects/editorObject/redo.cpp" line="40" column="1" bodyfile="include/MainObjects/editorObject/redo.cpp" bodystart="41" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="classeditorObject_1a6c49a7cb6015b83bcb83ab0344df989d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="PDJE__EXPORT__SETTER_8hpp_1a881b531a2da9c72650a79edb575b6c8c" kindref="member">PDJE_API</ref> bool</type>
        <definition>PDJE_API bool editorObject::Undo</definition>
        <argsstring>()</argsstring>
        <name>Undo</name>
        <qualifiedname>editorObject::Undo</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MainObjects/editorObject/undo.cpp" line="5" column="1" bodyfile="include/MainObjects/editorObject/undo.cpp" bodystart="6" bodyend="9"/>
      </memberdef>
      <memberdef kind="function" id="classeditorObject_1a6c49a7cb6015b83bcb83ab0344df989d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="PDJE__EXPORT__SETTER_8hpp_1a881b531a2da9c72650a79edb575b6c8c" kindref="member">PDJE_API</ref> bool</type>
        <definition>PDJE_API bool editorObject::Undo</definition>
        <argsstring>()</argsstring>
        <name>Undo</name>
        <qualifiedname>editorObject::Undo</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MainObjects/editorObject/undo.cpp" line="13" column="1" bodyfile="include/MainObjects/editorObject/undo.cpp" bodystart="14" bodyend="17"/>
      </memberdef>
      <memberdef kind="function" id="classeditorObject_1aa8965e5b43d8b4ad823bb5f0630ba0d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="PDJE__EXPORT__SETTER_8hpp_1a881b531a2da9c72650a79edb575b6c8c" kindref="member">PDJE_API</ref> bool</type>
        <definition>PDJE_API bool editorObject::Undo</definition>
        <argsstring>(const UNSANITIZED &amp;musicName)</argsstring>
        <name>Undo</name>
        <qualifiedname>editorObject::Undo</qualifiedname>
        <param>
          <type>const <ref refid="fileNameSanitizer_8hpp_1a3dbfced66c4bb073515956060fd59604" kindref="member">UNSANITIZED</ref> &amp;</type>
          <declname>musicName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MainObjects/editorObject/undo.cpp" line="21" column="1" bodyfile="include/MainObjects/editorObject/undo.cpp" bodystart="22" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="classeditorObject_1a6c49a7cb6015b83bcb83ab0344df989d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="PDJE__EXPORT__SETTER_8hpp_1a881b531a2da9c72650a79edb575b6c8c" kindref="member">PDJE_API</ref> bool</type>
        <definition>PDJE_API bool editorObject::Undo</definition>
        <argsstring>()</argsstring>
        <name>Undo</name>
        <qualifiedname>editorObject::Undo</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MainObjects/editorObject/undo.cpp" line="44" column="1" bodyfile="include/MainObjects/editorObject/undo.cpp" bodystart="45" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="classeditorObject_1a4a5b660ce635b5eb25bf31d1e7f0ec63" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="PDJE__EXPORT__SETTER_8hpp_1a881b531a2da9c72650a79edb575b6c8c" kindref="member">PDJE_API</ref> bool</type>
        <definition>PDJE_API bool editorObject::UpdateLog</definition>
        <argsstring>()</argsstring>
        <name>UpdateLog</name>
        <qualifiedname>editorObject::UpdateLog</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MainObjects/editorObject/updatelog.cpp" line="5" column="1" bodyfile="include/MainObjects/editorObject/updatelog.cpp" bodystart="6" bodyend="9"/>
      </memberdef>
      <memberdef kind="function" id="classeditorObject_1a2b82635c605b3ec08aa3bd84b692f809" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="PDJE__EXPORT__SETTER_8hpp_1a881b531a2da9c72650a79edb575b6c8c" kindref="member">PDJE_API</ref> bool</type>
        <definition>PDJE_API bool editorObject::UpdateLog</definition>
        <argsstring>(const DONT_SANITIZE &amp;branchName)</argsstring>
        <name>UpdateLog</name>
        <qualifiedname>editorObject::UpdateLog</qualifiedname>
        <param>
          <type>const <ref refid="fileNameSanitizer_8hpp_1a2ec6d785f45dccabee178706d40c0d7d" kindref="member">DONT_SANITIZE</ref> &amp;</type>
          <declname>branchName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MainObjects/editorObject/updatelog.cpp" line="13" column="1" bodyfile="include/MainObjects/editorObject/updatelog.cpp" bodystart="14" bodyend="18"/>
      </memberdef>
      <memberdef kind="function" id="classeditorObject_1a4a5b660ce635b5eb25bf31d1e7f0ec63" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="PDJE__EXPORT__SETTER_8hpp_1a881b531a2da9c72650a79edb575b6c8c" kindref="member">PDJE_API</ref> bool</type>
        <definition>PDJE_API bool editorObject::UpdateLog</definition>
        <argsstring>()</argsstring>
        <name>UpdateLog</name>
        <qualifiedname>editorObject::UpdateLog</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MainObjects/editorObject/updatelog.cpp" line="23" column="1" bodyfile="include/MainObjects/editorObject/updatelog.cpp" bodystart="24" bodyend="27"/>
      </memberdef>
      <memberdef kind="function" id="classeditorObject_1a2b82635c605b3ec08aa3bd84b692f809" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="PDJE__EXPORT__SETTER_8hpp_1a881b531a2da9c72650a79edb575b6c8c" kindref="member">PDJE_API</ref> bool</type>
        <definition>PDJE_API bool editorObject::UpdateLog</definition>
        <argsstring>(const DONT_SANITIZE &amp;branchName)</argsstring>
        <name>UpdateLog</name>
        <qualifiedname>editorObject::UpdateLog</qualifiedname>
        <param>
          <type>const <ref refid="fileNameSanitizer_8hpp_1a2ec6d785f45dccabee178706d40c0d7d" kindref="member">DONT_SANITIZE</ref> &amp;</type>
          <declname>branchName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MainObjects/editorObject/updatelog.cpp" line="31" column="1" bodyfile="include/MainObjects/editorObject/updatelog.cpp" bodystart="32" bodyend="35"/>
      </memberdef>
      <memberdef kind="function" id="classeditorObject_1a4a5b660ce635b5eb25bf31d1e7f0ec63" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="PDJE__EXPORT__SETTER_8hpp_1a881b531a2da9c72650a79edb575b6c8c" kindref="member">PDJE_API</ref> bool</type>
        <definition>PDJE_API bool editorObject::UpdateLog</definition>
        <argsstring>()</argsstring>
        <name>UpdateLog</name>
        <qualifiedname>editorObject::UpdateLog</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MainObjects/editorObject/updatelog.cpp" line="39" column="1" bodyfile="include/MainObjects/editorObject/updatelog.cpp" bodystart="40" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="classeditorObject_1a2b82635c605b3ec08aa3bd84b692f809" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="PDJE__EXPORT__SETTER_8hpp_1a881b531a2da9c72650a79edb575b6c8c" kindref="member">PDJE_API</ref> bool</type>
        <definition>PDJE_API bool editorObject::UpdateLog</definition>
        <argsstring>(const DONT_SANITIZE &amp;branchName)</argsstring>
        <name>UpdateLog</name>
        <qualifiedname>editorObject::UpdateLog</qualifiedname>
        <param>
          <type>const <ref refid="fileNameSanitizer_8hpp_1a2ec6d785f45dccabee178706d40c0d7d" kindref="member">DONT_SANITIZE</ref> &amp;</type>
          <declname>branchName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MainObjects/editorObject/updatelog.cpp" line="47" column="1" bodyfile="include/MainObjects/editorObject/updatelog.cpp" bodystart="48" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="classeditorObject_1a4a5b660ce635b5eb25bf31d1e7f0ec63" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="PDJE__EXPORT__SETTER_8hpp_1a881b531a2da9c72650a79edb575b6c8c" kindref="member">PDJE_API</ref> bool</type>
        <definition>PDJE_API bool editorObject::UpdateLog</definition>
        <argsstring>()</argsstring>
        <name>UpdateLog</name>
        <qualifiedname>editorObject::UpdateLog</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MainObjects/editorObject/updatelog.cpp" line="56" column="1" bodyfile="include/MainObjects/editorObject/updatelog.cpp" bodystart="57" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="classeditorObject_1ae5268e6cb844181d61a2735a3f1a1c79" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="PDJE__EXPORT__SETTER_8hpp_1a881b531a2da9c72650a79edb575b6c8c" kindref="member">PDJE_API</ref> bool</type>
        <definition>PDJE_API bool editorObject::UpdateLog</definition>
        <argsstring>(const UNSANITIZED &amp;musicName)</argsstring>
        <name>UpdateLog</name>
        <qualifiedname>editorObject::UpdateLog</qualifiedname>
        <param>
          <type>const <ref refid="fileNameSanitizer_8hpp_1a3dbfced66c4bb073515956060fd59604" kindref="member">UNSANITIZED</ref> &amp;</type>
          <declname>musicName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MainObjects/editorObject/updatelog.cpp" line="71" column="1" bodyfile="include/MainObjects/editorObject/updatelog.cpp" bodystart="72" bodyend="88"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>The main editor object for managing project data. </para>
    </briefdescription>
    <detaileddescription>
<para>This class provides a high-level interface for interacting with the editor, including file I/O, version control, and data rendering. </para>
    </detaileddescription>
    <location file="include/MainObjects/editorObject/editorObject.hpp" line="39" column="1" bodyfile="include/MainObjects/editorObject/editorObject.hpp" bodystart="39" bodyend="302"/>
    <listofallmembers>
      <member refid="classeditorObject_1a77eaf52d8c470aadb9af3f3140e6beee" prot="public" virt="non-virtual"><scope>editorObject</scope><name>AddLine</name></member>
      <member refid="classeditorObject_1a5bcc99b22a0c1b7377467c4090b31c3f" prot="public" virt="non-virtual"><scope>editorObject</scope><name>AddLine</name></member>
      <member refid="classeditorObject_1a7c16eefe332608bafb37c26698bce30d" prot="public" virt="non-virtual"><scope>editorObject</scope><name>AddLine</name></member>
      <member refid="classeditorObject_1a58952da718803281ea57414250a0d1a7" prot="public" virt="non-virtual"><scope>editorObject</scope><name>AddLine</name></member>
      <member refid="classeditorObject_1a615a1f759e859e6b33a534ed9f463aa6" prot="public" virt="non-virtual"><scope>editorObject</scope><name>AddLine</name></member>
      <member refid="classeditorObject_1a7114ff449a4f6f057020da88acf1b7cd" prot="public" virt="non-virtual"><scope>editorObject</scope><name>AddLine</name></member>
      <member refid="classeditorObject_1a21d30e041cf35f40d4070a622256575c" prot="public" virt="non-virtual"><scope>editorObject</scope><name>ConfigNewMusic</name></member>
      <member refid="classeditorObject_1a59f64efda4392df5f97a1fc893d234dc" prot="private" virt="non-virtual"><scope>editorObject</scope><name>DefaultSaveFuntion</name></member>
      <member refid="classeditorObject_1aebd96635e0fb0919b6560d2e8cd0a5ec" prot="private" virt="non-virtual"><scope>editorObject</scope><name>DefaultSaveFuntion</name></member>
      <member refid="classeditorObject_1a0a2005b586956c8e00cf5dc434360f01" prot="private" virt="non-virtual"><scope>editorObject</scope><name>DefaultSaveFuntion</name></member>
      <member refid="classeditorObject_1a0a2005b586956c8e00cf5dc434360f01" prot="private" virt="non-virtual"><scope>editorObject</scope><name>DefaultSaveFuntion</name></member>
      <member refid="classeditorObject_1a0a2005b586956c8e00cf5dc434360f01" prot="private" virt="non-virtual"><scope>editorObject</scope><name>DefaultSaveFuntion</name></member>
      <member refid="classeditorObject_1a7701a7956fd850031ef6adef9e9a2947" prot="private" virt="non-virtual"><scope>editorObject</scope><name>DefaultSaveFuntion</name></member>
      <member refid="classeditorObject_1acec5f49ab4cc77cd842d4eaf1a25ff87" prot="public" virt="non-virtual"><scope>editorObject</scope><name>deleteLine</name></member>
      <member refid="classeditorObject_1a74c726d83f0402fa3df6f74ac501dfea" prot="public" virt="non-virtual"><scope>editorObject</scope><name>deleteLine</name></member>
      <member refid="classeditorObject_1affb96a97230130694103174193185c63" prot="public" virt="non-virtual"><scope>editorObject</scope><name>deleteLine</name></member>
      <member refid="classeditorObject_1a4039d7882c1b739e1729ff2e92b26aca" prot="public" virt="non-virtual"><scope>editorObject</scope><name>deleteLine</name></member>
      <member refid="classeditorObject_1a203de908ea6b1b165bd3db4d1c6ad9ea" prot="public" virt="non-virtual"><scope>editorObject</scope><name>deleteLine</name></member>
      <member refid="classeditorObject_1a394a200d5cf41ec74152c799d17b35e7" prot="public" virt="non-virtual"><scope>editorObject</scope><name>demoPlayInit</name></member>
      <member refid="classeditorObject_1a9e14b13d0a93115510856587e3d0b597" prot="public" virt="non-virtual"><scope>editorObject</scope><name>DESTROY_PROJECT</name></member>
      <member refid="classeditorObject_1a23655580a822a7ae6c96ece123f0574d" prot="private" virt="non-virtual"><scope>editorObject</scope><name>E_obj</name></member>
      <member refid="classeditorObject_1a690ad4f1302edbb56c2ae2cdba91189d" prot="public" virt="non-virtual"><scope>editorObject</scope><name>editorObject</name></member>
      <member refid="classeditorObject_1a7a44ba5a8abd1bdacdf538b08360339b" prot="public" virt="non-virtual"><scope>editorObject</scope><name>editorObject</name></member>
      <member refid="classeditorObject_1a720a623f570f5fbeafb28e812a127938" prot="public" virt="non-virtual"><scope>editorObject</scope><name>getAll</name></member>
      <member refid="classeditorObject_1aa98ae8a1affe56149fce60791cc095b1" prot="public" virt="non-virtual"><scope>editorObject</scope><name>getAll</name></member>
      <member refid="classeditorObject_1ad2bd7260eb834fb55e0971862edab937" prot="public" virt="non-virtual"><scope>editorObject</scope><name>getAll</name></member>
      <member refid="classeditorObject_1a6982572c1a01fa74ae3574562274af29" prot="public" virt="non-virtual"><scope>editorObject</scope><name>getAll</name></member>
      <member refid="classeditorObject_1af6b09aa1cea6655b5a63f3e6e25ddba8" prot="public" virt="non-virtual"><scope>editorObject</scope><name>getAll</name></member>
      <member refid="classeditorObject_1a28dc3aa435512e4ad16ad0f821c64907" prot="public" virt="non-virtual"><scope>editorObject</scope><name>GetDiff</name></member>
      <member refid="classeditorObject_1a2b6e0ddcc5927083e534abeb7330abc2" prot="public" virt="non-virtual"><scope>editorObject</scope><name>GetDiff</name></member>
      <member refid="classeditorObject_1a2b6e0ddcc5927083e534abeb7330abc2" prot="public" virt="non-virtual"><scope>editorObject</scope><name>GetDiff</name></member>
      <member refid="classeditorObject_1a2b6e0ddcc5927083e534abeb7330abc2" prot="public" virt="non-virtual"><scope>editorObject</scope><name>GetDiff</name></member>
      <member refid="classeditorObject_1a2b6e0ddcc5927083e534abeb7330abc2" prot="public" virt="non-virtual"><scope>editorObject</scope><name>GetDiff</name></member>
      <member refid="classeditorObject_1a7276d008fdf2ce71165d9f8f8332317d" prot="public" virt="non-virtual"><scope>editorObject</scope><name>getKVRepo</name></member>
      <member refid="classeditorObject_1a360e0000f965db643a0127f7240a425a" prot="public" virt="non-virtual"><scope>editorObject</scope><name>GetLogWithJSONGraph</name></member>
      <member refid="classeditorObject_1a994b27da4e10c21758c374d77b638cad" prot="public" virt="non-virtual"><scope>editorObject</scope><name>GetLogWithJSONGraph</name></member>
      <member refid="classeditorObject_1a083291e2d68bd0105a45351d38a79d90" prot="public" virt="non-virtual"><scope>editorObject</scope><name>GetLogWithJSONGraph</name></member>
      <member refid="classeditorObject_1a083291e2d68bd0105a45351d38a79d90" prot="public" virt="non-virtual"><scope>editorObject</scope><name>GetLogWithJSONGraph</name></member>
      <member refid="classeditorObject_1a083291e2d68bd0105a45351d38a79d90" prot="public" virt="non-virtual"><scope>editorObject</scope><name>GetLogWithJSONGraph</name></member>
      <member refid="classeditorObject_1ad0b23d260054975199e1053bd6598ece" prot="public" virt="non-virtual"><scope>editorObject</scope><name>GetLogWithJSONGraph</name></member>
      <member refid="classeditorObject_1ae5300f1a0b6d39b6fb1e6c79d2bcc91d" prot="public" virt="non-virtual"><scope>editorObject</scope><name>getMixRepo</name></member>
      <member refid="classeditorObject_1ad4983a3abef2c8acadc325f26a6128d6" prot="public" virt="non-virtual"><scope>editorObject</scope><name>getMusicRepo</name></member>
      <member refid="classeditorObject_1a3bd541d0ff2a00541fad343c31742c71" prot="public" virt="non-virtual"><scope>editorObject</scope><name>getNoteRepo</name></member>
      <member refid="classeditorObject_1a03c8ce3bddba220df4e2f9c90ab25ca0" prot="public" virt="non-virtual"><scope>editorObject</scope><name>Go</name></member>
      <member refid="classeditorObject_1a81f7af7c5f4dee33a21bd22d01c68171" prot="public" virt="non-virtual"><scope>editorObject</scope><name>Go</name></member>
      <member refid="classeditorObject_1a81f7af7c5f4dee33a21bd22d01c68171" prot="public" virt="non-virtual"><scope>editorObject</scope><name>Go</name></member>
      <member refid="classeditorObject_1a81f7af7c5f4dee33a21bd22d01c68171" prot="public" virt="non-virtual"><scope>editorObject</scope><name>Go</name></member>
      <member refid="classeditorObject_1a81f7af7c5f4dee33a21bd22d01c68171" prot="public" virt="non-virtual"><scope>editorObject</scope><name>Go</name></member>
      <member refid="classeditorObject_1a1a72aaa0a758b9c32f2bcd603a607f3c" prot="private" virt="non-virtual"><scope>editorObject</scope><name>kvFilePath</name></member>
      <member refid="classeditorObject_1a3bb22fbeed9a7e1516f3ab6461698f0b" prot="private" virt="non-virtual"><scope>editorObject</scope><name>makeTrackData</name></member>
      <member refid="classeditorObject_1a3172e809911096988531fc5228f7055e" prot="private" virt="non-virtual"><scope>editorObject</scope><name>mixFilePath</name></member>
      <member refid="classeditorObject_1a76050465d4780555d62af1f9faee05e7" prot="private" virt="non-virtual"><scope>editorObject</scope><name>musicFileRootPath</name></member>
      <member refid="classeditorObject_1abeaedacd9b6d9e2fb61772aa348431b1" prot="private" virt="non-virtual"><scope>editorObject</scope><name>noteFilePath</name></member>
      <member refid="classeditorObject_1adb7115154add6c06baf9c4e090977d24" prot="public" virt="non-virtual"><scope>editorObject</scope><name>Open</name></member>
      <member refid="classeditorObject_1aa664471474287d500e65d09f08f61001" prot="public" virt="non-virtual"><scope>editorObject</scope><name>operator[]</name></member>
      <member refid="classeditorObject_1afe3027bfdc86cf213b3d44191e4ce4e7" prot="private" virt="non-virtual"><scope>editorObject</scope><name>projectLocalDB</name></member>
      <member refid="classeditorObject_1a9409f6aef52b2cb8a361674da49b97e1" prot="private" virt="non-virtual"><scope>editorObject</scope><name>projectRoot</name></member>
      <member refid="classeditorObject_1ae4f8059616e377582bade705a44aafb6" prot="public" virt="non-virtual"><scope>editorObject</scope><name>pushToRootDB</name></member>
      <member refid="classeditorObject_1a634c551a93f376650075d82dcbe1ffd5" prot="public" virt="non-virtual"><scope>editorObject</scope><name>pushToRootDB</name></member>
      <member refid="classeditorObject_1ae24df06774592614acbfb17701f4e2e1" prot="public" virt="non-virtual"><scope>editorObject</scope><name>Redo</name></member>
      <member refid="classeditorObject_1a2987ce88cb1d9a435871f80398a76e63" prot="public" virt="non-virtual"><scope>editorObject</scope><name>Redo</name></member>
      <member refid="classeditorObject_1ad1d187780c05e8be6b4a674b39439410" prot="public" virt="non-virtual"><scope>editorObject</scope><name>Redo</name></member>
      <member refid="classeditorObject_1ad1d187780c05e8be6b4a674b39439410" prot="public" virt="non-virtual"><scope>editorObject</scope><name>Redo</name></member>
      <member refid="classeditorObject_1a6e1f247bff8d06697d445d47d3c27fa3" prot="public" virt="non-virtual"><scope>editorObject</scope><name>Redo</name></member>
      <member refid="classeditorObject_1ad1d187780c05e8be6b4a674b39439410" prot="public" virt="non-virtual"><scope>editorObject</scope><name>Redo</name></member>
      <member refid="classeditorObject_1a4d830121f5d68c47448ec062e015cae5" prot="public" virt="non-virtual"><scope>editorObject</scope><name>render</name></member>
      <member refid="classeditorObject_1af807921cf49ccaa0d561badcb5348087" prot="public" virt="non-virtual"><scope>editorObject</scope><name>Undo</name></member>
      <member refid="classeditorObject_1a70a6c28f2ad7b19ff50427f14378291a" prot="public" virt="non-virtual"><scope>editorObject</scope><name>Undo</name></member>
      <member refid="classeditorObject_1a6c49a7cb6015b83bcb83ab0344df989d" prot="public" virt="non-virtual"><scope>editorObject</scope><name>Undo</name></member>
      <member refid="classeditorObject_1a6c49a7cb6015b83bcb83ab0344df989d" prot="public" virt="non-virtual"><scope>editorObject</scope><name>Undo</name></member>
      <member refid="classeditorObject_1aa8965e5b43d8b4ad823bb5f0630ba0d9" prot="public" virt="non-virtual"><scope>editorObject</scope><name>Undo</name></member>
      <member refid="classeditorObject_1a6c49a7cb6015b83bcb83ab0344df989d" prot="public" virt="non-virtual"><scope>editorObject</scope><name>Undo</name></member>
      <member refid="classeditorObject_1af72d99c3cb239afe1f633ad592327ae7" prot="public" virt="non-virtual"><scope>editorObject</scope><name>UpdateLog</name></member>
      <member refid="classeditorObject_1a551a8f7e02b6d1723a8699af450daa79" prot="public" virt="non-virtual"><scope>editorObject</scope><name>UpdateLog</name></member>
      <member refid="classeditorObject_1a4a5b660ce635b5eb25bf31d1e7f0ec63" prot="public" virt="non-virtual"><scope>editorObject</scope><name>UpdateLog</name></member>
      <member refid="classeditorObject_1a2b82635c605b3ec08aa3bd84b692f809" prot="public" virt="non-virtual"><scope>editorObject</scope><name>UpdateLog</name></member>
      <member refid="classeditorObject_1a4a5b660ce635b5eb25bf31d1e7f0ec63" prot="public" virt="non-virtual"><scope>editorObject</scope><name>UpdateLog</name></member>
      <member refid="classeditorObject_1a2b82635c605b3ec08aa3bd84b692f809" prot="public" virt="non-virtual"><scope>editorObject</scope><name>UpdateLog</name></member>
      <member refid="classeditorObject_1a4a5b660ce635b5eb25bf31d1e7f0ec63" prot="public" virt="non-virtual"><scope>editorObject</scope><name>UpdateLog</name></member>
      <member refid="classeditorObject_1a2b82635c605b3ec08aa3bd84b692f809" prot="public" virt="non-virtual"><scope>editorObject</scope><name>UpdateLog</name></member>
      <member refid="classeditorObject_1a4a5b660ce635b5eb25bf31d1e7f0ec63" prot="public" virt="non-virtual"><scope>editorObject</scope><name>UpdateLog</name></member>
      <member refid="classeditorObject_1ae5268e6cb844181d61a2735a3f1a1c79" prot="public" virt="non-virtual"><scope>editorObject</scope><name>UpdateLog</name></member>
      <member refid="classeditorObject_1ae5c4229489a3b798968960d7806a96a9" prot="public" virt="non-virtual"><scope>editorObject</scope><name>~editorObject</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
