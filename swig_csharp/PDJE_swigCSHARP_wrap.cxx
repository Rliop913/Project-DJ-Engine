/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.1.1
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


#define SWIG_VERSION 0x040101
#define SWIGCSHARP
#define SWIG_DIRECTORS

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types: 
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidCastException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidCastException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL }
};

static void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_pdje_POLYGLOT(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback, 
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback, 
                                                SWIG_CSharpExceptionCallback_t invalidCastCallback,
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback, 
                                                SWIG_CSharpExceptionCallback_t overflowCallback, 
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidCastException].callback = invalidCastCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_pdje_POLYGLOT(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_pdje_POLYGLOT(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) do { if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } } while (0)

/* SWIG Errors applicable to all language modules, values are reserved from -1 to -99 */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13


/* -----------------------------------------------------------------------------
 * director_common.swg
 *
 * This file contains support for director classes which is common between
 * languages.
 * ----------------------------------------------------------------------------- */

/*
  Use -DSWIG_DIRECTOR_STATIC if you prefer to avoid the use of the
  'Swig' namespace. This could be useful for multi-modules projects.
*/
#ifdef SWIG_DIRECTOR_STATIC
/* Force anonymous (static) namespace */
#define Swig
#endif
/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes so that C# proxy
 * methods can be called from C++.
 * ----------------------------------------------------------------------------- */

#if defined(DEBUG_DIRECTOR_OWNED)
#include <iostream>
#endif
#include <string>
#include <exception>

namespace Swig {
  /* Director base class - not currently used in C# directors */
  class Director {
  };

  /* Base class for director exceptions */
  class DirectorException : public std::exception {
  protected:
    std::string swig_msg;

  public:
    DirectorException(const char *msg) : swig_msg(msg) {
    }

    DirectorException(const std::string &msg) : swig_msg(msg) {
    }

    virtual ~DirectorException() throw() {
    }

    const char *what() const throw() {
      return swig_msg.c_str();
    }
  };

  /* Pure virtual method exception */
  class DirectorPureVirtualException : public DirectorException {
  public:
    DirectorPureVirtualException(const char *msg) : DirectorException(std::string("Attempt to invoke pure virtual method ") + msg) {
    }

    static void raise(const char *msg) {
      throw DirectorPureVirtualException(msg);
    }
  };
}


#ifdef __cplusplus
#include <utility>
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigSmartPointer {
    T *ptr;
    SwigSmartPointer(T *p) : ptr(p) { }
    ~SwigSmartPointer() { delete ptr; }
    SwigSmartPointer& operator=(SwigSmartPointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
    void reset(T *p) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = p; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigSmartPointer tmp(new T(t)); pointer = tmp; return *this; }
#if __cplusplus >=201103L
  SwigValueWrapper& operator=(T&& t) { SwigSmartPointer tmp(new T(std::move(t))); pointer = tmp; return *this; }
  operator T&&() const { return std::move(*pointer.ptr); }
#else
  operator T&() const { return *pointer.ptr; }
#endif
  T *operator&() const { return pointer.ptr; }
  static void reset(SwigValueWrapper& t, T *p) { t.pointer.reset(p); }
};

/*
 * SwigValueInit() is a generic initialisation solution as the following approach:
 * 
 *       T c_result = T();
 * 
 * doesn't compile for all types for example:
 * 
 *       unsigned int c_result = unsigned int();
 */
template <typename T> T SwigValueInit() {
  return T();
}

#if __cplusplus >=201103L
# define SWIG_STD_MOVE(OBJ) std::move(OBJ)
#else
# define SWIG_STD_MOVE(OBJ) OBJ
#endif

#endif


    #include <vector>
    #include <memory>
    #include "MixBinary.capnp.h"
    #include "PDJE_EXPORT_SETTER.hpp"
    #include <optional>
    #include "PDJE_interface.hpp"
    #include "dbRoot.hpp"
    #include "musicDB.hpp"
    #include "trackDB.hpp"
    #include <string>
    #include "ManualMix.hpp"
    #include "audioPlayer.hpp"
    #include "MusicControlPannel.hpp"
    #include "fileNameSanitizer.hpp"
    #include "editorObject.hpp"
    #include "editorCommit.hpp"
    #include "SWIG_editor_visitor.hpp"
    #include "EditorArgs.hpp"
    #include "audioRender.hpp"
    
    // #include "editorObject.hpp"
    #include "rocksdb/rocksdb_namespace.h"
    #include <filesystem>
    #include "rocksdb/db.h"
    // #include <rocksdb/options.h>
    // #include <rocksdb/table.h>
    // #include <rocksdb/filter_policy.h>


#include <typeinfo>
#include <stdexcept>


#include <vector>
#include <algorithm>
#include <stdexcept>


#include <string>


struct SWIG_null_deleter {
  void operator() (void const *) const {
  }
};
#define SWIG_NO_NULL_DELETER_0 , SWIG_null_deleter()
#define SWIG_NO_NULL_DELETER_1
#define SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW
#define SWIG_NO_NULL_DELETER_SWIG_POINTER_OWN

SWIGINTERN bool editorObject_AddLineNote(editorObject *self,EDIT_ARG_NOTE const &obj){
    return self->AddLine<EDIT_ARG_NOTE>(obj);
  }
SWIGINTERN bool editorObject_AddLineMix(editorObject *self,EDIT_ARG_MIX const &obj){
    return self->AddLine<EDIT_ARG_MIX>(obj);
  }
SWIGINTERN bool editorObject_AddLineKV(editorObject *self,EDIT_ARG_KEY_VALUE const &obj){
    return self->AddLine<EDIT_ARG_KEY_VALUE>(obj);
  }
SWIGINTERN bool editorObject_AddLineMusic(editorObject *self,EDIT_ARG_MUSIC const &obj){
    return self->AddLine<EDIT_ARG_MUSIC>(obj);
  }
SWIGINTERN int editorObject_deleteLineNote(editorObject *self,EDIT_ARG_NOTE const &obj){
    return self->deleteLine<EDIT_ARG_NOTE>(obj);
  }
SWIGINTERN int editorObject_deleteLineKV(editorObject *self,EDIT_ARG_KEY_VALUE const &obj){
    return self->deleteLine<EDIT_ARG_KEY_VALUE>(obj);
  }
SWIGINTERN int editorObject_deleteLineMusic(editorObject *self,EDIT_ARG_MUSIC const &obj){
    return self->deleteLine<EDIT_ARG_MUSIC>(obj);
  }
SWIGINTERN void editorObject_GetAllNotes(editorObject *self,NoteVisitor *v){
    self->getAll<EDIT_ARG_NOTE>([&](const EDIT_ARG_NOTE& o){ v->on_item(o); });
  }
SWIGINTERN void editorObject_GetAllMixes(editorObject *self,MixVisitor *v){
    
    self->getAll<EDIT_ARG_MIX>([&](const EDIT_ARG_MIX& o){ v->on_item(o); });
    
  }
SWIGINTERN void editorObject_GetAllKeyValues(editorObject *self,KVVisitor *v){
    self->getAll<EDIT_ARG_KEY_VALUE>([&](const EDIT_ARG_KEY_VALUE& o){ v->on_item(o); });
  }
SWIGINTERN void editorObject_GetAllMusics(editorObject *self,MusicVisitor *v){
    self->getAll<EDIT_ARG_MUSIC>([&](const EDIT_ARG_MUSIC& o){ v->on_item(o); });
  }
SWIGINTERN bool editorObject_UndoNote(editorObject *self){ return self->Undo<EDIT_ARG_NOTE>(); }
SWIGINTERN bool editorObject_UndoMix(editorObject *self){ return self->Undo<EDIT_ARG_MIX>(); }
SWIGINTERN bool editorObject_UndoKV(editorObject *self){ return self->Undo<EDIT_ARG_KEY_VALUE>(); }
SWIGINTERN bool editorObject_UndoMusic(editorObject *self,std::string const &musicName){
    return self->Undo<EDIT_ARG_MUSIC>(musicName);
  }
SWIGINTERN bool editorObject_RedoNote(editorObject *self){ return self->Redo<EDIT_ARG_NOTE>(); }
SWIGINTERN bool editorObject_RedoMix(editorObject *self){ return self->Redo<EDIT_ARG_MIX>(); }
SWIGINTERN bool editorObject_RedoKV(editorObject *self){ return self->Redo<EDIT_ARG_KEY_VALUE>(); }
SWIGINTERN bool editorObject_RedoMusic(editorObject *self,std::string const &musicName){
    return self->Redo<EDIT_ARG_MUSIC>(musicName);
  }
SWIGINTERN bool editorObject_GoNote(editorObject *self,std::string const &branchName,std::string const &commitID){
    return self->Go<EDIT_ARG_NOTE>(branchName, commitID);
  }
SWIGINTERN bool editorObject_GoMix(editorObject *self,std::string const &branchName,std::string const &commitID){
    return self->Go<EDIT_ARG_MIX>(branchName, commitID);
  }
SWIGINTERN bool editorObject_GoKV(editorObject *self,std::string const &branchName,std::string const &commitID){
    return self->Go<EDIT_ARG_KEY_VALUE>(branchName, commitID);
  }
SWIGINTERN bool editorObject_GoMusic(editorObject *self,std::string const &branchName,std::string const &commitID){
    return self->Go<EDIT_ARG_MUSIC>(branchName, commitID);
  }
SWIGINTERN std::string editorObject_GetLogNoteJSON(editorObject *self){
    return self->GetLogWithJSONGraph<EDIT_ARG_NOTE>();
  }
SWIGINTERN std::string editorObject_GetLogMixJSON(editorObject *self){
    return self->GetLogWithJSONGraph<EDIT_ARG_MIX>();
  }
SWIGINTERN std::string editorObject_GetLogKVJSON(editorObject *self){
    return self->GetLogWithJSONGraph<EDIT_ARG_KEY_VALUE>();
  }
SWIGINTERN std::string editorObject_GetLogMusicJSON(editorObject *self,std::string const &musicName){
    return self->GetLogWithJSONGraph<EDIT_ARG_MUSIC>(musicName);
  }
SWIGINTERN DiffResult editorObject_GetDiffNote(editorObject *self,gitwrap::commit const &oldC,gitwrap::commit const &newC){
    return self->GetDiff<EDIT_ARG_NOTE>(oldC, newC);
  }
SWIGINTERN DiffResult editorObject_GetDiffMix(editorObject *self,gitwrap::commit const &oldC,gitwrap::commit const &newC){
    return self->GetDiff<EDIT_ARG_MIX>(oldC, newC);
  }
SWIGINTERN DiffResult editorObject_GetDiffKV(editorObject *self,gitwrap::commit const &oldC,gitwrap::commit const &newC){
    return self->GetDiff<EDIT_ARG_KEY_VALUE>(oldC, newC);
  }
SWIGINTERN DiffResult editorObject_GetDiffMusic(editorObject *self,gitwrap::commit const &oldC,gitwrap::commit const &newC){
    return self->GetDiff<EDIT_ARG_MUSIC>(oldC, newC);
  }
SWIGINTERN bool editorObject_UpdateLogNote(editorObject *self){ return self->UpdateLog<EDIT_ARG_NOTE>(); }
SWIGINTERN bool editorObject_UpdateLogMix(editorObject *self){ return self->UpdateLog<EDIT_ARG_MIX>(); }
SWIGINTERN bool editorObject_UpdateLogKV(editorObject *self){ return self->UpdateLog<EDIT_ARG_KEY_VALUE>(); }
SWIGINTERN bool editorObject_UpdateLogMusic(editorObject *self){ return self->UpdateLog<EDIT_ARG_MUSIC>(); }
SWIGINTERN bool editorObject_UpdateLogNoteOn(editorObject *self,std::string const &branchName){
    return self->UpdateLog<EDIT_ARG_NOTE>(branchName);
  }
SWIGINTERN bool editorObject_UpdateLogMixOn(editorObject *self,std::string const &branchName){
    return self->UpdateLog<EDIT_ARG_MIX>(branchName);
  }
SWIGINTERN bool editorObject_UpdateLogKVOn(editorObject *self,std::string const &branchName){
    return self->UpdateLog<EDIT_ARG_KEY_VALUE>(branchName);
  }
SWIGINTERN bool editorObject_UpdateLogMusicOn(editorObject *self,std::string const &musicName){
    return self->UpdateLog<EDIT_ARG_MUSIC>(musicName);
  }

SWIGINTERN void SWIG_CSharpException(int code, const char *msg) {
  if (code == SWIG_ValueError) {
    SWIG_CSharpExceptionArgumentCodes exception_code = SWIG_CSharpArgumentOutOfRangeException;
    SWIG_CSharpSetPendingExceptionArgument(exception_code, msg, 0);
  } else {
    SWIG_CSharpExceptionCodes exception_code = SWIG_CSharpApplicationException;
    switch(code) {
    case SWIG_MemoryError:
      exception_code = SWIG_CSharpOutOfMemoryException;
      break;
    case SWIG_IndexError:
      exception_code = SWIG_CSharpIndexOutOfRangeException;
      break;
    case SWIG_DivisionByZero:
      exception_code = SWIG_CSharpDivideByZeroException;
      break;
    case SWIG_IOError:
      exception_code = SWIG_CSharpIOException;
      break;
    case SWIG_OverflowError:
      exception_code = SWIG_CSharpOverflowException;
      break;
    case SWIG_RuntimeError:
    case SWIG_TypeError:
    case SWIG_SyntaxError:
    case SWIG_SystemError:
    case SWIG_UnknownError:
    default:
      exception_code = SWIG_CSharpApplicationException;
      break;
    }
    SWIG_CSharpSetPendingException(exception_code, msg);
  }
}


#include <typeinfo>
#include <stdexcept>


#include <utility>

SWIGINTERN std::vector< musdata > *new_std_vector_Sl_musdata_Sg___SWIG_2(int capacity){
        std::vector< musdata >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< musdata >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN musdata std_vector_Sl_musdata_Sg__getitemcopy(std::vector< musdata > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< musdata >::value_type const &std_vector_Sl_musdata_Sg__getitem(std::vector< musdata > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_musdata_Sg__setitem(std::vector< musdata > *self,int index,musdata const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_musdata_Sg__AddRange(std::vector< musdata > *self,std::vector< musdata > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< musdata > *std_vector_Sl_musdata_Sg__GetRange(std::vector< musdata > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< musdata >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_musdata_Sg__Insert(std::vector< musdata > *self,int index,musdata const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_musdata_Sg__InsertRange(std::vector< musdata > *self,int index,std::vector< musdata > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_musdata_Sg__RemoveAt(std::vector< musdata > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_musdata_Sg__RemoveRange(std::vector< musdata > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< musdata > *std_vector_Sl_musdata_Sg__Repeat(musdata const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< musdata >(count, value);
      }
SWIGINTERN void std_vector_Sl_musdata_Sg__Reverse__SWIG_0(std::vector< musdata > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_musdata_Sg__Reverse__SWIG_1(std::vector< musdata > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_musdata_Sg__SetRange(std::vector< musdata > *self,int index,std::vector< musdata > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< trackdata > *new_std_vector_Sl_trackdata_Sg___SWIG_2(int capacity){
        std::vector< trackdata >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< trackdata >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN trackdata std_vector_Sl_trackdata_Sg__getitemcopy(std::vector< trackdata > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< trackdata >::value_type const &std_vector_Sl_trackdata_Sg__getitem(std::vector< trackdata > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_trackdata_Sg__setitem(std::vector< trackdata > *self,int index,trackdata const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_trackdata_Sg__AddRange(std::vector< trackdata > *self,std::vector< trackdata > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< trackdata > *std_vector_Sl_trackdata_Sg__GetRange(std::vector< trackdata > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< trackdata >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_trackdata_Sg__Insert(std::vector< trackdata > *self,int index,trackdata const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_trackdata_Sg__InsertRange(std::vector< trackdata > *self,int index,std::vector< trackdata > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_trackdata_Sg__RemoveAt(std::vector< trackdata > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_trackdata_Sg__RemoveRange(std::vector< trackdata > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< trackdata > *std_vector_Sl_trackdata_Sg__Repeat(trackdata const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< trackdata >(count, value);
      }
SWIGINTERN void std_vector_Sl_trackdata_Sg__Reverse__SWIG_0(std::vector< trackdata > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_trackdata_Sg__Reverse__SWIG_1(std::vector< trackdata > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_trackdata_Sg__SetRange(std::vector< trackdata > *self,int index,std::vector< trackdata > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< std::string > *new_std_vector_Sl_std_string_Sg___SWIG_2(int capacity){
        std::vector< std::string >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< std::string >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN std::string std_vector_Sl_std_string_Sg__getitemcopy(std::vector< std::string > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< std::string >::value_type const &std_vector_Sl_std_string_Sg__getitem(std::vector< std::string > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__setitem(std::vector< std::string > *self,int index,std::string const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__AddRange(std::vector< std::string > *self,std::vector< std::string > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< std::string > *std_vector_Sl_std_string_Sg__GetRange(std::vector< std::string > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< std::string >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__Insert(std::vector< std::string > *self,int index,std::string const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__InsertRange(std::vector< std::string > *self,int index,std::vector< std::string > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__RemoveAt(std::vector< std::string > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__RemoveRange(std::vector< std::string > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< std::string > *std_vector_Sl_std_string_Sg__Repeat(std::string const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< std::string >(count, value);
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__Reverse__SWIG_0(std::vector< std::string > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__Reverse__SWIG_1(std::vector< std::string > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__SetRange(std::vector< std::string > *self,int index,std::vector< std::string > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN bool std_vector_Sl_std_string_Sg__Contains(std::vector< std::string > *self,std::string const &value){
        return std::find(self->begin(), self->end(), value) != self->end();
      }
SWIGINTERN int std_vector_Sl_std_string_Sg__IndexOf(std::vector< std::string > *self,std::string const &value){
        int index = -1;
        std::vector< std::string >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end())
          index = (int)(it - self->begin());
        return index;
      }
SWIGINTERN int std_vector_Sl_std_string_Sg__LastIndexOf(std::vector< std::string > *self,std::string const &value){
        int index = -1;
        std::vector< std::string >::reverse_iterator rit = std::find(self->rbegin(), self->rend(), value);
        if (rit != self->rend())
          index = (int)(self->rend() - 1 - rit);
        return index;
      }
SWIGINTERN bool std_vector_Sl_std_string_Sg__Remove(std::vector< std::string > *self,std::string const &value){
        std::vector< std::string >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end()) {
          self->erase(it);
          return true;
        }
        return false;
      }

struct git_oid;



/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "PDJE_swigCSHARP_wrap.h"

SwigDirector_NoteVisitor::SwigDirector_NoteVisitor() : NoteVisitor(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_NoteVisitor::~SwigDirector_NoteVisitor() {
  
}


void SwigDirector_NoteVisitor::on_item(EDIT_ARG_NOTE const &o) {
  void * jo = 0 ;
  
  if (!swig_callbackon_item) {
    Swig::DirectorPureVirtualException::raise("NoteVisitor::on_item");
    return;
  } else {
    jo = (EDIT_ARG_NOTE *) &o; 
    swig_callbackon_item(jo);
  }
}

void SwigDirector_NoteVisitor::swig_connect_director(SWIG_Callback0_t callbackon_item) {
  swig_callbackon_item = callbackon_item;
}

void SwigDirector_NoteVisitor::swig_init_callbacks() {
  swig_callbackon_item = 0;
}

SwigDirector_MixVisitor::SwigDirector_MixVisitor() : MixVisitor(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_MixVisitor::~SwigDirector_MixVisitor() {
  
}


void SwigDirector_MixVisitor::on_item(EDIT_ARG_MIX const &o) {
  void * jo = 0 ;
  
  if (!swig_callbackon_item) {
    Swig::DirectorPureVirtualException::raise("MixVisitor::on_item");
    return;
  } else {
    jo = (EDIT_ARG_MIX *) &o; 
    swig_callbackon_item(jo);
  }
}

void SwigDirector_MixVisitor::swig_connect_director(SWIG_Callback0_t callbackon_item) {
  swig_callbackon_item = callbackon_item;
}

void SwigDirector_MixVisitor::swig_init_callbacks() {
  swig_callbackon_item = 0;
}

SwigDirector_KVVisitor::SwigDirector_KVVisitor() : KVVisitor(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_KVVisitor::~SwigDirector_KVVisitor() {
  
}


void SwigDirector_KVVisitor::on_item(EDIT_ARG_KEY_VALUE const &o) {
  void * jo = 0 ;
  
  if (!swig_callbackon_item) {
    Swig::DirectorPureVirtualException::raise("KVVisitor::on_item");
    return;
  } else {
    jo = (EDIT_ARG_KEY_VALUE *) &o; 
    swig_callbackon_item(jo);
  }
}

void SwigDirector_KVVisitor::swig_connect_director(SWIG_Callback0_t callbackon_item) {
  swig_callbackon_item = callbackon_item;
}

void SwigDirector_KVVisitor::swig_init_callbacks() {
  swig_callbackon_item = 0;
}

SwigDirector_MusicVisitor::SwigDirector_MusicVisitor() : MusicVisitor(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_MusicVisitor::~SwigDirector_MusicVisitor() {
  
}


void SwigDirector_MusicVisitor::on_item(EDIT_ARG_MUSIC const &o) {
  void * jo = 0 ;
  
  if (!swig_callbackon_item) {
    Swig::DirectorPureVirtualException::raise("MusicVisitor::on_item");
    return;
  } else {
    jo = (EDIT_ARG_MUSIC *) &o; 
    swig_callbackon_item(jo);
  }
}

void SwigDirector_MusicVisitor::swig_connect_director(SWIG_Callback0_t callbackon_item) {
  swig_callbackon_item = callbackon_item;
}

void SwigDirector_MusicVisitor::swig_init_callbacks() {
  swig_callbackon_item = 0;
}


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void * SWIGSTDCALL CSharp_new_FXControlPannel(int jarg1) {
  void * jresult ;
  int arg1 ;
  FXControlPannel *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (FXControlPannel *)new FXControlPannel(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FXControlPannel_GetArgSetter(void * jarg1, int jarg2) {
  void * jresult ;
  FXControlPannel *arg1 = (FXControlPannel *) 0 ;
  FXList arg2 ;
  ARGSETTER result;
  
  arg1 = (FXControlPannel *)jarg1; 
  arg2 = (FXList)jarg2; 
  result = (arg1)->GetArgSetter(arg2);
  jresult = new ARGSETTER(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FXControlPannel_FX_ON_OFF(void * jarg1, int jarg2, unsigned int jarg3) {
  FXControlPannel *arg1 = (FXControlPannel *) 0 ;
  FXList arg2 ;
  bool arg3 ;
  
  arg1 = (FXControlPannel *)jarg1; 
  arg2 = (FXList)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->FX_ON_OFF(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_FXControlPannel_addFX(void * jarg1, void * jarg2, int jarg3) {
  FXControlPannel *arg1 = (FXControlPannel *) 0 ;
  float **arg2 = (float **) 0 ;
  int arg3 ;
  
  arg1 = (FXControlPannel *)jarg1; 
  arg2 = (float **)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->addFX(arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_FXControlPannel_checkSomethingOn(void * jarg1) {
  unsigned int jresult ;
  FXControlPannel *arg1 = (FXControlPannel *) 0 ;
  bool result;
  
  arg1 = (FXControlPannel *)jarg1; 
  result = (bool)(arg1)->checkSomethingOn();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_FXControlPannel(void * jarg1) {
  FXControlPannel *arg1 = (FXControlPannel *) 0 ;
  
  arg1 = (FXControlPannel *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_toFaustStylePCM(void * jarg1, void * jarg2, unsigned long jarg3) {
  float **arg1 = (float **) 0 ;
  float *arg2 = (float *) 0 ;
  unsigned long arg3 ;
  
  arg1 = (float **)jarg1; 
  arg2 = (float *)jarg2; 
  arg3 = (unsigned long)jarg3; 
  toFaustStylePCM(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_toLRStylePCM(void * jarg1, void * jarg2, unsigned long jarg3) {
  float **arg1 = (float **) 0 ;
  float *arg2 = (float *) 0 ;
  unsigned long arg3 ;
  
  arg1 = (float **)jarg1; 
  arg2 = (float *)jarg2; 
  arg3 = (unsigned long)jarg3; 
  toLRStylePCM(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PDJE_DBROOT_set(void * jarg1, void * jarg2) {
  PDJE *arg1 = (PDJE *) 0 ;
  std::shared_ptr< litedb > *arg2 = 0 ;
  std::shared_ptr< litedb > tempnull2 ;
  
  arg1 = (PDJE *)jarg1; 
  arg2 = jarg2 ? (std::shared_ptr< litedb > *)jarg2 : &tempnull2; 
  if (arg1) (arg1)->DBROOT = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PDJE_DBROOT_get(void * jarg1) {
  void * jresult ;
  PDJE *arg1 = (PDJE *) 0 ;
  std::shared_ptr< litedb > *result = 0 ;
  
  arg1 = (PDJE *)jarg1; 
  result = (std::shared_ptr< litedb > *) & ((arg1)->DBROOT);
  jresult = *result ? new std::shared_ptr< litedb >(*result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PDJE(const char * jarg1) {
  void * jresult ;
  DONT_SANITIZE *arg1 = 0 ;
  PDJE *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  DONT_SANITIZE arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = (PDJE *)new PDJE((DONT_SANITIZE const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PDJE(void * jarg1) {
  PDJE *arg1 = (PDJE *) 0 ;
  
  arg1 = (PDJE *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PDJE_player_set(void * jarg1, void * jarg2) {
  PDJE *arg1 = (PDJE *) 0 ;
  std::shared_ptr< audioPlayer > *arg2 = 0 ;
  std::shared_ptr< audioPlayer > tempnull2 ;
  
  arg1 = (PDJE *)jarg1; 
  arg2 = jarg2 ? (std::shared_ptr< audioPlayer > *)jarg2 : &tempnull2; 
  if (arg1) (arg1)->player = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PDJE_player_get(void * jarg1) {
  void * jresult ;
  PDJE *arg1 = (PDJE *) 0 ;
  std::shared_ptr< audioPlayer > *result = 0 ;
  
  arg1 = (PDJE *)jarg1; 
  result = (std::shared_ptr< audioPlayer > *) & ((arg1)->player);
  jresult = *result ? new std::shared_ptr< audioPlayer >(*result) : 0; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PDJE_editor_set(void * jarg1, void * jarg2) {
  PDJE *arg1 = (PDJE *) 0 ;
  std::shared_ptr< editorObject > *arg2 = 0 ;
  std::shared_ptr< editorObject > tempnull2 ;
  
  arg1 = (PDJE *)jarg1; 
  arg2 = jarg2 ? (std::shared_ptr< editorObject > *)jarg2 : &tempnull2; 
  if (arg1) (arg1)->editor = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PDJE_editor_get(void * jarg1) {
  void * jresult ;
  PDJE *arg1 = (PDJE *) 0 ;
  std::shared_ptr< editorObject > *result = 0 ;
  
  arg1 = (PDJE *)jarg1; 
  result = (std::shared_ptr< editorObject > *) & ((arg1)->editor);
  jresult = *result ? new std::shared_ptr< editorObject >(*result) : 0; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PDJE_InitPlayer(void * jarg1, int jarg2, void * jarg3, unsigned int jarg4) {
  unsigned int jresult ;
  PDJE *arg1 = (PDJE *) 0 ;
  PLAY_MODE arg2 ;
  trackdata *arg3 = 0 ;
  unsigned int arg4 ;
  bool result;
  
  arg1 = (PDJE *)jarg1; 
  arg2 = (PLAY_MODE)jarg2; 
  arg3 = (trackdata *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "trackdata & is null", 0);
    return 0;
  } 
  arg4 = (unsigned int)jarg4; 
  result = (bool)(arg1)->InitPlayer(arg2,*arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PDJE_ResetPlayer(void * jarg1) {
  PDJE *arg1 = (PDJE *) 0 ;
  
  arg1 = (PDJE *)jarg1; 
  (arg1)->ResetPlayer();
}


SWIGEXPORT void SWIGSTDCALL CSharp_PDJE_CloseEditor(void * jarg1) {
  PDJE *arg1 = (PDJE *) 0 ;
  
  arg1 = (PDJE *)jarg1; 
  (arg1)->CloseEditor();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PDJE_PullOutDataLine(void * jarg1) {
  void * jresult ;
  PDJE *arg1 = (PDJE *) 0 ;
  PDJE_CORE_DATA_LINE result;
  
  arg1 = (PDJE *)jarg1; 
  result = (arg1)->PullOutDataLine();
  jresult = new PDJE_CORE_DATA_LINE(result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PDJE_InitEditor(void * jarg1, const char * jarg2, const char * jarg3, const char * jarg4) {
  unsigned int jresult ;
  PDJE *arg1 = (PDJE *) 0 ;
  DONT_SANITIZE *arg2 = 0 ;
  DONT_SANITIZE *arg3 = 0 ;
  DONT_SANITIZE *arg4 = 0 ;
  bool result;
  
  arg1 = (PDJE *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  DONT_SANITIZE arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  DONT_SANITIZE arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  DONT_SANITIZE arg4_str(jarg4);
  arg4 = &arg4_str; 
  result = (bool)(arg1)->InitEditor((DONT_SANITIZE const &)*arg2,(DONT_SANITIZE const &)*arg3,(DONT_SANITIZE const &)*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PDJE_GetNoteObjects(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  PDJE *arg1 = (PDJE *) 0 ;
  trackdata *arg2 = 0 ;
  OBJ_SETTER_CALLBACK *arg3 = 0 ;
  bool result;
  
  arg1 = (PDJE *)jarg1; 
  arg2 = (trackdata *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "trackdata & is null", 0);
    return 0;
  } 
  arg3 = (OBJ_SETTER_CALLBACK *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OBJ_SETTER_CALLBACK & is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->GetNoteObjects(*arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PDJE_SearchMusic__SWIG_0(void * jarg1, const char * jarg2, const char * jarg3, double jarg4) {
  void * jresult ;
  PDJE *arg1 = (PDJE *) 0 ;
  UNSANITIZED *arg2 = 0 ;
  UNSANITIZED *arg3 = 0 ;
  double arg4 ;
  MUS_VEC result;
  
  arg1 = (PDJE *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  UNSANITIZED arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  UNSANITIZED arg3_str(jarg3);
  arg3 = &arg3_str; 
  arg4 = (double)jarg4; 
  result = (arg1)->SearchMusic((UNSANITIZED const &)*arg2,(UNSANITIZED const &)*arg3,arg4);
  jresult = new MUS_VEC(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PDJE_SearchMusic__SWIG_1(void * jarg1, const char * jarg2, const char * jarg3) {
  void * jresult ;
  PDJE *arg1 = (PDJE *) 0 ;
  UNSANITIZED *arg2 = 0 ;
  UNSANITIZED *arg3 = 0 ;
  MUS_VEC result;
  
  arg1 = (PDJE *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  UNSANITIZED arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  UNSANITIZED arg3_str(jarg3);
  arg3 = &arg3_str; 
  result = (arg1)->SearchMusic((UNSANITIZED const &)*arg2,(UNSANITIZED const &)*arg3);
  jresult = new MUS_VEC(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PDJE_SearchTrack(void * jarg1, const char * jarg2) {
  void * jresult ;
  PDJE *arg1 = (PDJE *) 0 ;
  UNSANITIZED *arg2 = 0 ;
  TRACK_VEC result;
  
  arg1 = (PDJE *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  UNSANITIZED arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (arg1)->SearchTrack((UNSANITIZED const &)*arg2);
  jresult = new TRACK_VEC(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PDJE_GetPlayerObject(void * jarg1) {
  void * jresult ;
  PDJE *arg1 = (PDJE *) 0 ;
  std::shared_ptr< audioPlayer > result;
  
  arg1 = (PDJE *)jarg1; 
  result = (arg1)->GetPlayerObject();
  jresult = result ? new std::shared_ptr< audioPlayer >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PDJE_GetEditorObject(void * jarg1) {
  void * jresult ;
  PDJE *arg1 = (PDJE *) 0 ;
  std::shared_ptr< editorObject > result;
  
  arg1 = (PDJE *)jarg1; 
  result = (arg1)->GetEditorObject();
  jresult = result ? new std::shared_ptr< editorObject >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ARGSETTER_WRAPPER(void * jarg1) {
  void * jresult ;
  FXControlPannel *arg1 = (FXControlPannel *) 0 ;
  ARGSETTER_WRAPPER *result = 0 ;
  
  arg1 = (FXControlPannel *)jarg1; 
  result = (ARGSETTER_WRAPPER *)new ARGSETTER_WRAPPER(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ARGSETTER_WRAPPER(void * jarg1) {
  ARGSETTER_WRAPPER *arg1 = (ARGSETTER_WRAPPER *) 0 ;
  
  arg1 = (ARGSETTER_WRAPPER *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ARGSETTER_WRAPPER_GetFXArgKeys(void * jarg1, int jarg2) {
  void * jresult ;
  ARGSETTER_WRAPPER *arg1 = (ARGSETTER_WRAPPER *) 0 ;
  FXList arg2 ;
  std::vector< std::string > result;
  
  arg1 = (ARGSETTER_WRAPPER *)jarg1; 
  arg2 = (FXList)jarg2; 
  result = (arg1)->GetFXArgKeys(arg2);
  jresult = new std::vector< std::string >(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ARGSETTER_WRAPPER_SetFXArg(void * jarg1, int jarg2, const char * jarg3, double jarg4) {
  ARGSETTER_WRAPPER *arg1 = (ARGSETTER_WRAPPER *) 0 ;
  FXList arg2 ;
  DONT_SANITIZE *arg3 = 0 ;
  double arg4 ;
  
  arg1 = (ARGSETTER_WRAPPER *)jarg1; 
  arg2 = (FXList)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  DONT_SANITIZE arg3_str(jarg3);
  arg3 = &arg3_str; 
  arg4 = (double)jarg4; 
  (arg1)->SetFXArg(arg2,(DONT_SANITIZE const &)*arg3,arg4);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_litedb_KVGet(void * jarg1, const char * jarg2, void * jarg3) {
  unsigned int jresult ;
  litedb *arg1 = (litedb *) 0 ;
  SANITIZED *arg2 = 0 ;
  DONT_SANITIZE *arg3 = 0 ;
  std::shared_ptr< litedb > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<  litedb > *)jarg1;
  arg1 = (litedb *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  SANITIZED arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (DONT_SANITIZE *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "DONT_SANITIZE & is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->KVGet((SANITIZED const &)*arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_litedb_KVPut(void * jarg1, const char * jarg2, const char * jarg3) {
  unsigned int jresult ;
  litedb *arg1 = (litedb *) 0 ;
  SANITIZED *arg2 = 0 ;
  DONT_SANITIZE *arg3 = 0 ;
  std::shared_ptr< litedb > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<  litedb > *)jarg1;
  arg1 = (litedb *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  SANITIZED arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  DONT_SANITIZE arg3_str(jarg3);
  arg3 = &arg3_str; 
  result = (bool)(arg1)->KVPut((SANITIZED const &)*arg2,(DONT_SANITIZE const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_litedb_openDB(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  litedb *arg1 = (litedb *) 0 ;
  std::filesystem::path *arg2 = 0 ;
  std::shared_ptr< litedb > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<  litedb > *)jarg1;
  arg1 = (litedb *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (std::filesystem::path *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::filesystem::path const & is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->openDB((std::filesystem::path const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_litedb_getRoot(void * jarg1) {
  void * jresult ;
  litedb *arg1 = (litedb *) 0 ;
  std::shared_ptr< litedb > *smartarg1 = 0 ;
  std::filesystem::path result;
  
  
  smartarg1 = (std::shared_ptr<  litedb > *)jarg1;
  arg1 = (litedb *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->getRoot();
  jresult = new std::filesystem::path(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_litedb() {
  void * jresult ;
  litedb *result = 0 ;
  
  result = (litedb *)new litedb();
  
  jresult = result ? new std::shared_ptr<  litedb >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_litedb(void * jarg1) {
  litedb *arg1 = (litedb *) 0 ;
  std::shared_ptr< litedb > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  litedb > *)jarg1;
  arg1 = (litedb *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_musdata_title_set(void * jarg1, const char * jarg2) {
  musdata *arg1 = (musdata *) 0 ;
  SANITIZED *arg2 = 0 ;
  
  arg1 = (musdata *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  SANITIZED arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->title = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_musdata_title_get(void * jarg1) {
  const char * jresult ;
  musdata *arg1 = (musdata *) 0 ;
  SANITIZED *result = 0 ;
  
  arg1 = (musdata *)jarg1; 
  result = (SANITIZED *) & ((arg1)->title);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_musdata_composer_set(void * jarg1, const char * jarg2) {
  musdata *arg1 = (musdata *) 0 ;
  SANITIZED *arg2 = 0 ;
  
  arg1 = (musdata *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  SANITIZED arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->composer = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_musdata_composer_get(void * jarg1) {
  const char * jresult ;
  musdata *arg1 = (musdata *) 0 ;
  SANITIZED *result = 0 ;
  
  arg1 = (musdata *)jarg1; 
  result = (SANITIZED *) & ((arg1)->composer);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_musdata_musicPath_set(void * jarg1, const char * jarg2) {
  musdata *arg1 = (musdata *) 0 ;
  SANITIZED_ORNOT *arg2 = 0 ;
  
  arg1 = (musdata *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  SANITIZED_ORNOT arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->musicPath = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_musdata_musicPath_get(void * jarg1) {
  const char * jresult ;
  musdata *arg1 = (musdata *) 0 ;
  SANITIZED_ORNOT *result = 0 ;
  
  arg1 = (musdata *)jarg1; 
  result = (SANITIZED_ORNOT *) & ((arg1)->musicPath);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_musdata_bpmBinary_set(void * jarg1, void * jarg2) {
  musdata *arg1 = (musdata *) 0 ;
  BIN arg2 ;
  BIN *argp2 ;
  
  arg1 = (musdata *)jarg1; 
  argp2 = (BIN *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BIN", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->bpmBinary = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_musdata_bpmBinary_get(void * jarg1) {
  void * jresult ;
  musdata *arg1 = (musdata *) 0 ;
  BIN result;
  
  arg1 = (musdata *)jarg1; 
  result =  ((arg1)->bpmBinary);
  jresult = new BIN(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_musdata_bpm_set(void * jarg1, double jarg2) {
  musdata *arg1 = (musdata *) 0 ;
  double arg2 ;
  
  arg1 = (musdata *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->bpm = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_musdata_bpm_get(void * jarg1) {
  double jresult ;
  musdata *arg1 = (musdata *) 0 ;
  double result;
  
  arg1 = (musdata *)jarg1; 
  result = (double) ((arg1)->bpm);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_musdata_firstBeat_set(void * jarg1, const char * jarg2) {
  musdata *arg1 = (musdata *) 0 ;
  DONT_SANITIZE *arg2 = 0 ;
  
  arg1 = (musdata *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  DONT_SANITIZE arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->firstBeat = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_musdata_firstBeat_get(void * jarg1) {
  const char * jresult ;
  musdata *arg1 = (musdata *) 0 ;
  DONT_SANITIZE *result = 0 ;
  
  arg1 = (musdata *)jarg1; 
  result = (DONT_SANITIZE *) & ((arg1)->firstBeat);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_musdata__SWIG_0(void * jarg1) {
  void * jresult ;
  stmt *arg1 = (stmt *) 0 ;
  musdata *result = 0 ;
  
  arg1 = (stmt *)jarg1; 
  result = (musdata *)new musdata(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_musdata__SWIG_1(const char * jarg1, const char * jarg2, const char * jarg3, double jarg4) {
  void * jresult ;
  UNSANITIZED *arg1 = 0 ;
  UNSANITIZED *arg2 = 0 ;
  SANITIZED_ORNOT *arg3 = 0 ;
  double arg4 ;
  musdata *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  UNSANITIZED arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  UNSANITIZED arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  SANITIZED_ORNOT arg3_str(jarg3);
  arg3 = &arg3_str; 
  arg4 = (double)jarg4; 
  result = (musdata *)new musdata((UNSANITIZED const &)*arg1,(UNSANITIZED const &)*arg2,(SANITIZED_ORNOT const &)*arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_musdata__SWIG_2(const char * jarg1, const char * jarg2, const char * jarg3) {
  void * jresult ;
  UNSANITIZED *arg1 = 0 ;
  UNSANITIZED *arg2 = 0 ;
  SANITIZED_ORNOT *arg3 = 0 ;
  musdata *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  UNSANITIZED arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  UNSANITIZED arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  SANITIZED_ORNOT arg3_str(jarg3);
  arg3 = &arg3_str; 
  result = (musdata *)new musdata((UNSANITIZED const &)*arg1,(UNSANITIZED const &)*arg2,(SANITIZED_ORNOT const &)*arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_musdata__SWIG_3(const char * jarg1, const char * jarg2) {
  void * jresult ;
  UNSANITIZED *arg1 = 0 ;
  UNSANITIZED *arg2 = 0 ;
  musdata *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  UNSANITIZED arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  UNSANITIZED arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (musdata *)new musdata((UNSANITIZED const &)*arg1,(UNSANITIZED const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_musdata__SWIG_4(const char * jarg1) {
  void * jresult ;
  UNSANITIZED *arg1 = 0 ;
  musdata *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  UNSANITIZED arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = (musdata *)new musdata((UNSANITIZED const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_musdata__SWIG_5() {
  void * jresult ;
  musdata *result = 0 ;
  
  result = (musdata *)new musdata();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_musdata_GenSearchSTMT(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  musdata *arg1 = (musdata *) 0 ;
  stmt *arg2 = 0 ;
  sqlite3 *arg3 = (sqlite3 *) 0 ;
  bool result;
  
  arg1 = (musdata *)jarg1; 
  arg2 = (stmt *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "stmt & is null", 0);
    return 0;
  } 
  arg3 = (sqlite3 *)jarg3; 
  result = (bool)(arg1)->GenSearchSTMT(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_musdata_GenInsertSTMT(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  musdata *arg1 = (musdata *) 0 ;
  stmt *arg2 = 0 ;
  sqlite3 *arg3 = (sqlite3 *) 0 ;
  bool result;
  
  arg1 = (musdata *)jarg1; 
  arg2 = (stmt *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "stmt & is null", 0);
    return 0;
  } 
  arg3 = (sqlite3 *)jarg3; 
  result = (bool)(arg1)->GenInsertSTMT(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_musdata_GenEditSTMT(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  musdata *arg1 = (musdata *) 0 ;
  stmt *arg2 = 0 ;
  sqlite3 *arg3 = (sqlite3 *) 0 ;
  musdata *arg4 = 0 ;
  bool result;
  
  arg1 = (musdata *)jarg1; 
  arg2 = (stmt *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "stmt & is null", 0);
    return 0;
  } 
  arg3 = (sqlite3 *)jarg3; 
  arg4 = (musdata *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "musdata & is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->GenEditSTMT(*arg2,arg3,*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_musdata_GenDeleteSTMT(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  musdata *arg1 = (musdata *) 0 ;
  stmt *arg2 = 0 ;
  sqlite3 *arg3 = (sqlite3 *) 0 ;
  bool result;
  
  arg1 = (musdata *)jarg1; 
  arg2 = (stmt *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "stmt & is null", 0);
    return 0;
  } 
  arg3 = (sqlite3 *)jarg3; 
  result = (bool)(arg1)->GenDeleteSTMT(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_musdata(void * jarg1) {
  musdata *arg1 = (musdata *) 0 ;
  
  arg1 = (musdata *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_trackdata_trackTitle_set(void * jarg1, const char * jarg2) {
  trackdata *arg1 = (trackdata *) 0 ;
  SANITIZED *arg2 = 0 ;
  
  arg1 = (trackdata *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  SANITIZED arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->trackTitle = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_trackdata_trackTitle_get(void * jarg1) {
  const char * jresult ;
  trackdata *arg1 = (trackdata *) 0 ;
  SANITIZED *result = 0 ;
  
  arg1 = (trackdata *)jarg1; 
  result = (SANITIZED *) & ((arg1)->trackTitle);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_trackdata_mixBinary_set(void * jarg1, void * jarg2) {
  trackdata *arg1 = (trackdata *) 0 ;
  BIN arg2 ;
  BIN *argp2 ;
  
  arg1 = (trackdata *)jarg1; 
  argp2 = (BIN *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BIN", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->mixBinary = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_trackdata_mixBinary_get(void * jarg1) {
  void * jresult ;
  trackdata *arg1 = (trackdata *) 0 ;
  BIN result;
  
  arg1 = (trackdata *)jarg1; 
  result =  ((arg1)->mixBinary);
  jresult = new BIN(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_trackdata_noteBinary_set(void * jarg1, void * jarg2) {
  trackdata *arg1 = (trackdata *) 0 ;
  BIN arg2 ;
  BIN *argp2 ;
  
  arg1 = (trackdata *)jarg1; 
  argp2 = (BIN *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BIN", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->noteBinary = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_trackdata_noteBinary_get(void * jarg1) {
  void * jresult ;
  trackdata *arg1 = (trackdata *) 0 ;
  BIN result;
  
  arg1 = (trackdata *)jarg1; 
  result =  ((arg1)->noteBinary);
  jresult = new BIN(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_trackdata_cachedMixList_set(void * jarg1, const char * jarg2) {
  trackdata *arg1 = (trackdata *) 0 ;
  SANITIZED *arg2 = 0 ;
  
  arg1 = (trackdata *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  SANITIZED arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->cachedMixList = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_trackdata_cachedMixList_get(void * jarg1) {
  const char * jresult ;
  trackdata *arg1 = (trackdata *) 0 ;
  SANITIZED *result = 0 ;
  
  arg1 = (trackdata *)jarg1; 
  result = (SANITIZED *) & ((arg1)->cachedMixList);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_trackdata__SWIG_0(void * jarg1) {
  void * jresult ;
  stmt *arg1 = (stmt *) 0 ;
  trackdata *result = 0 ;
  
  arg1 = (stmt *)jarg1; 
  result = (trackdata *)new trackdata(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_trackdata__SWIG_1(const char * jarg1) {
  void * jresult ;
  UNSANITIZED *arg1 = 0 ;
  trackdata *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  UNSANITIZED arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = (trackdata *)new trackdata((UNSANITIZED const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_trackdata__SWIG_2() {
  void * jresult ;
  trackdata *result = 0 ;
  
  result = (trackdata *)new trackdata();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_trackdata_GenSearchSTMT(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  trackdata *arg1 = (trackdata *) 0 ;
  stmt *arg2 = 0 ;
  sqlite3 *arg3 = (sqlite3 *) 0 ;
  bool result;
  
  arg1 = (trackdata *)jarg1; 
  arg2 = (stmt *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "stmt & is null", 0);
    return 0;
  } 
  arg3 = (sqlite3 *)jarg3; 
  result = (bool)(arg1)->GenSearchSTMT(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_trackdata_GenInsertSTMT(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  trackdata *arg1 = (trackdata *) 0 ;
  stmt *arg2 = 0 ;
  sqlite3 *arg3 = (sqlite3 *) 0 ;
  bool result;
  
  arg1 = (trackdata *)jarg1; 
  arg2 = (stmt *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "stmt & is null", 0);
    return 0;
  } 
  arg3 = (sqlite3 *)jarg3; 
  result = (bool)(arg1)->GenInsertSTMT(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_trackdata_GenEditSTMT(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  trackdata *arg1 = (trackdata *) 0 ;
  stmt *arg2 = 0 ;
  sqlite3 *arg3 = (sqlite3 *) 0 ;
  trackdata *arg4 = 0 ;
  bool result;
  
  arg1 = (trackdata *)jarg1; 
  arg2 = (stmt *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "stmt & is null", 0);
    return 0;
  } 
  arg3 = (sqlite3 *)jarg3; 
  arg4 = (trackdata *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "trackdata & is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->GenEditSTMT(*arg2,arg3,*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_trackdata_GenDeleteSTMT(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  trackdata *arg1 = (trackdata *) 0 ;
  stmt *arg2 = 0 ;
  sqlite3 *arg3 = (sqlite3 *) 0 ;
  bool result;
  
  arg1 = (trackdata *)jarg1; 
  arg2 = (stmt *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "stmt & is null", 0);
    return 0;
  } 
  arg3 = (sqlite3 *)jarg3; 
  result = (bool)(arg1)->GenDeleteSTMT(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_trackdata(void * jarg1) {
  trackdata *arg1 = (trackdata *) 0 ;
  
  arg1 = (trackdata *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_audioPlayer_STATUS_set(void * jarg1, const char * jarg2) {
  audioPlayer *arg1 = (audioPlayer *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< audioPlayer > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  audioPlayer > *)jarg1;
  arg1 = (audioPlayer *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->STATUS = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_audioPlayer_STATUS_get(void * jarg1) {
  const char * jresult ;
  audioPlayer *arg1 = (audioPlayer *) 0 ;
  std::shared_ptr< audioPlayer > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  audioPlayer > *)jarg1;
  arg1 = (audioPlayer *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::string *) & ((arg1)->STATUS);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_audioPlayer_GetStatus(void * jarg1) {
  const char * jresult ;
  audioPlayer *arg1 = (audioPlayer *) 0 ;
  std::shared_ptr< audioPlayer > *smartarg1 = 0 ;
  std::string result;
  
  
  smartarg1 = (std::shared_ptr<  audioPlayer > *)jarg1;
  arg1 = (audioPlayer *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->GetStatus();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_audioPlayer_Activate(void * jarg1) {
  unsigned int jresult ;
  audioPlayer *arg1 = (audioPlayer *) 0 ;
  std::shared_ptr< audioPlayer > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<  audioPlayer > *)jarg1;
  arg1 = (audioPlayer *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->Activate();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_audioPlayer_Deactivate(void * jarg1) {
  unsigned int jresult ;
  audioPlayer *arg1 = (audioPlayer *) 0 ;
  std::shared_ptr< audioPlayer > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<  audioPlayer > *)jarg1;
  arg1 = (audioPlayer *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->Deactivate();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_audioPlayer_ChangeCursorPos(void * jarg1, unsigned long long jarg2) {
  audioPlayer *arg1 = (audioPlayer *) 0 ;
  unsigned long long arg2 ;
  std::shared_ptr< audioPlayer > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  audioPlayer > *)jarg1;
  arg1 = (audioPlayer *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned long long)jarg2; 
  (arg1)->ChangeCursorPos(arg2);
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_audioPlayer_GetConsumedFrames(void * jarg1) {
  unsigned long long jresult ;
  audioPlayer *arg1 = (audioPlayer *) 0 ;
  std::shared_ptr< audioPlayer > *smartarg1 = 0 ;
  unsigned long long result;
  
  
  smartarg1 = (std::shared_ptr<  audioPlayer > *)jarg1;
  arg1 = (audioPlayer *)(smartarg1 ? smartarg1->get() : 0); 
  result = (unsigned long long)(arg1)->GetConsumedFrames();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_audioPlayer_GetFXControlPannel__SWIG_0(void * jarg1, const char * jarg2) {
  void * jresult ;
  audioPlayer *arg1 = (audioPlayer *) 0 ;
  UNSANITIZED *arg2 = 0 ;
  std::shared_ptr< audioPlayer > *smartarg1 = 0 ;
  FXControlPannel *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  audioPlayer > *)jarg1;
  arg1 = (audioPlayer *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  UNSANITIZED arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (FXControlPannel *)(arg1)->GetFXControlPannel((UNSANITIZED const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_audioPlayer_GetFXControlPannel__SWIG_1(void * jarg1) {
  void * jresult ;
  audioPlayer *arg1 = (audioPlayer *) 0 ;
  std::shared_ptr< audioPlayer > *smartarg1 = 0 ;
  FXControlPannel *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  audioPlayer > *)jarg1;
  arg1 = (audioPlayer *)(smartarg1 ? smartarg1->get() : 0); 
  result = (FXControlPannel *)(arg1)->GetFXControlPannel();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_audioPlayer_GetMusicControlPannel(void * jarg1) {
  void * jresult ;
  audioPlayer *arg1 = (audioPlayer *) 0 ;
  std::shared_ptr< audioPlayer > *smartarg1 = 0 ;
  MusicControlPannel *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  audioPlayer > *)jarg1;
  arg1 = (audioPlayer *)(smartarg1 ? smartarg1->get() : 0); 
  result = (MusicControlPannel *)(arg1)->GetMusicControlPannel();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_audioPlayer__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4) {
  void * jresult ;
  litedb *arg1 = 0 ;
  trackdata *arg2 = 0 ;
  unsigned int arg3 ;
  bool arg4 ;
  audioPlayer *result = 0 ;
  
  
  arg1 = (litedb *)(((std::shared_ptr<  litedb > *)jarg1) ? ((std::shared_ptr<  litedb > *)jarg1)->get() : 0);
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "litedb & reference is null", 0);
    return 0;
  } 
  arg2 = (trackdata *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "trackdata & is null", 0);
    return 0;
  } 
  arg3 = (unsigned int)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (audioPlayer *)new audioPlayer(*arg1,*arg2,arg3,arg4);
  
  jresult = result ? new std::shared_ptr<  audioPlayer >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_audioPlayer__SWIG_1(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  litedb *arg1 = 0 ;
  trackdata *arg2 = 0 ;
  unsigned int arg3 ;
  audioPlayer *result = 0 ;
  
  
  arg1 = (litedb *)(((std::shared_ptr<  litedb > *)jarg1) ? ((std::shared_ptr<  litedb > *)jarg1)->get() : 0);
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "litedb & reference is null", 0);
    return 0;
  } 
  arg2 = (trackdata *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "trackdata & is null", 0);
    return 0;
  } 
  arg3 = (unsigned int)jarg3; 
  result = (audioPlayer *)new audioPlayer(*arg1,*arg2,arg3);
  
  jresult = result ? new std::shared_ptr<  audioPlayer >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_audioPlayer__SWIG_2(unsigned int jarg1) {
  void * jresult ;
  unsigned int arg1 ;
  audioPlayer *result = 0 ;
  
  arg1 = (unsigned int)jarg1; 
  result = (audioPlayer *)new audioPlayer(arg1);
  
  jresult = result ? new std::shared_ptr<  audioPlayer >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_audioPlayer_PullOutDataLine(void * jarg1) {
  void * jresult ;
  audioPlayer *arg1 = (audioPlayer *) 0 ;
  std::shared_ptr< audioPlayer > *smartarg1 = 0 ;
  PDJE_CORE_DATA_LINE result;
  
  
  smartarg1 = (std::shared_ptr<  audioPlayer > *)jarg1;
  arg1 = (audioPlayer *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->PullOutDataLine();
  jresult = new PDJE_CORE_DATA_LINE(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_audioPlayer(void * jarg1) {
  audioPlayer *arg1 = (audioPlayer *) 0 ;
  std::shared_ptr< audioPlayer > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  audioPlayer > *)jarg1;
  arg1 = (audioPlayer *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PDJE_Name_Sanitizer_sanitizeFileName(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  SwigValueWrapper< std::optional< std::string > > result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = PDJE_Name_Sanitizer::sanitizeFileName((std::string const &)*arg1);
  jresult = new std::optional< SANITIZED >(result); 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_PDJE_Name_Sanitizer_getFileName(const char * jarg1) {
  const char * jresult ;
  SANITIZED *arg1 = 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  SANITIZED arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = PDJE_Name_Sanitizer::getFileName((std::string const &)*arg1);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MusicOnDeck_play_set(void * jarg1, unsigned int jarg2) {
  MusicOnDeck *arg1 = (MusicOnDeck *) 0 ;
  bool arg2 ;
  
  arg1 = (MusicOnDeck *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->play = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MusicOnDeck_play_get(void * jarg1) {
  unsigned int jresult ;
  MusicOnDeck *arg1 = (MusicOnDeck *) 0 ;
  bool result;
  
  arg1 = (MusicOnDeck *)jarg1; 
  result = (bool) ((arg1)->play);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MusicOnDeck_dec_set(void * jarg1, void * jarg2) {
  MusicOnDeck *arg1 = (MusicOnDeck *) 0 ;
  Decoder arg2 ;
  Decoder *argp2 ;
  
  arg1 = (MusicOnDeck *)jarg1; 
  argp2 = (Decoder *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Decoder", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->dec = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MusicOnDeck_dec_get(void * jarg1) {
  void * jresult ;
  MusicOnDeck *arg1 = (MusicOnDeck *) 0 ;
  Decoder result;
  
  arg1 = (MusicOnDeck *)jarg1; 
  result =  ((arg1)->dec);
  jresult = new Decoder(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MusicOnDeck_fxP_set(void * jarg1, void * jarg2) {
  MusicOnDeck *arg1 = (MusicOnDeck *) 0 ;
  FXControlPannel *arg2 = (FXControlPannel *) 0 ;
  
  arg1 = (MusicOnDeck *)jarg1; 
  arg2 = (FXControlPannel *)jarg2; 
  if (arg1) (arg1)->fxP = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MusicOnDeck_fxP_get(void * jarg1) {
  void * jresult ;
  MusicOnDeck *arg1 = (MusicOnDeck *) 0 ;
  FXControlPannel *result = 0 ;
  
  arg1 = (MusicOnDeck *)jarg1; 
  result = (FXControlPannel *) ((arg1)->fxP);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MusicOnDeck_st_set(void * jarg1, void * jarg2) {
  MusicOnDeck *arg1 = (MusicOnDeck *) 0 ;
  std::optional< soundtouch::SoundTouch > arg2 ;
  std::optional< soundtouch::SoundTouch > *argp2 ;
  
  arg1 = (MusicOnDeck *)jarg1; 
  argp2 = (std::optional< soundtouch::SoundTouch > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::optional< soundtouch::SoundTouch >", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->st = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MusicOnDeck_st_get(void * jarg1) {
  void * jresult ;
  MusicOnDeck *arg1 = (MusicOnDeck *) 0 ;
  std::optional< soundtouch::SoundTouch > result;
  
  arg1 = (MusicOnDeck *)jarg1; 
  result =  ((arg1)->st);
  jresult = new std::optional< soundtouch::SoundTouch >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MusicOnDeck() {
  void * jresult ;
  MusicOnDeck *result = 0 ;
  
  result = (MusicOnDeck *)new MusicOnDeck();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MusicOnDeck(void * jarg1) {
  MusicOnDeck *arg1 = (MusicOnDeck *) 0 ;
  
  arg1 = (MusicOnDeck *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MusicControlPannel_LoadMusic(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  MusicControlPannel *arg1 = (MusicControlPannel *) 0 ;
  litedb *arg2 = 0 ;
  musdata *arg3 = 0 ;
  bool result;
  
  arg1 = (MusicControlPannel *)jarg1; 
  
  arg2 = (litedb *)(((std::shared_ptr<  litedb > *)jarg2) ? ((std::shared_ptr<  litedb > *)jarg2)->get() : 0);
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "litedb & reference is null", 0);
    return 0;
  } 
  arg3 = (musdata *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "musdata const & is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->LoadMusic(*arg2,(musdata const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MusicControlPannel_CueMusic(void * jarg1, const char * jarg2, unsigned long long jarg3) {
  unsigned int jresult ;
  MusicControlPannel *arg1 = (MusicControlPannel *) 0 ;
  UNSANITIZED *arg2 = 0 ;
  unsigned long long arg3 ;
  bool result;
  
  arg1 = (MusicControlPannel *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  UNSANITIZED arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (unsigned long long)jarg3; 
  result = (bool)(arg1)->CueMusic((UNSANITIZED const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MusicControlPannel_SetMusic(void * jarg1, const char * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  MusicControlPannel *arg1 = (MusicControlPannel *) 0 ;
  UNSANITIZED *arg2 = 0 ;
  bool arg3 ;
  bool result;
  
  arg1 = (MusicControlPannel *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  UNSANITIZED arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->SetMusic((UNSANITIZED const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MusicControlPannel_GetLoadedMusicList(void * jarg1) {
  void * jresult ;
  MusicControlPannel *arg1 = (MusicControlPannel *) 0 ;
  LOADED_LIST result;
  
  arg1 = (MusicControlPannel *)jarg1; 
  result = (arg1)->GetLoadedMusicList();
  jresult = new LOADED_LIST(result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MusicControlPannel_UnloadMusic(void * jarg1, const char * jarg2) {
  unsigned int jresult ;
  MusicControlPannel *arg1 = (MusicControlPannel *) 0 ;
  UNSANITIZED *arg2 = 0 ;
  bool result;
  
  arg1 = (MusicControlPannel *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  UNSANITIZED arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)(arg1)->UnloadMusic((UNSANITIZED const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MusicControlPannel_GetPCMFrames(void * jarg1, void * jarg2, unsigned long jarg3) {
  unsigned int jresult ;
  MusicControlPannel *arg1 = (MusicControlPannel *) 0 ;
  float *arg2 = (float *) 0 ;
  unsigned long arg3 ;
  bool result;
  
  arg1 = (MusicControlPannel *)jarg1; 
  arg2 = (float *)jarg2; 
  arg3 = (unsigned long)jarg3; 
  result = (bool)(arg1)->GetPCMFrames(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MusicControlPannel_getFXHandle(void * jarg1, const char * jarg2) {
  void * jresult ;
  MusicControlPannel *arg1 = (MusicControlPannel *) 0 ;
  UNSANITIZED *arg2 = 0 ;
  FXControlPannel *result = 0 ;
  
  arg1 = (MusicControlPannel *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  UNSANITIZED arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (FXControlPannel *)(arg1)->getFXHandle((UNSANITIZED const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MusicControlPannel_ChangeBpm(void * jarg1, const char * jarg2, double jarg3, double jarg4) {
  unsigned int jresult ;
  MusicControlPannel *arg1 = (MusicControlPannel *) 0 ;
  UNSANITIZED *arg2 = 0 ;
  double arg3 ;
  double arg4 ;
  bool result;
  
  arg1 = (MusicControlPannel *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  UNSANITIZED arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  result = (bool)(arg1)->ChangeBpm((UNSANITIZED const &)*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MusicControlPannel(unsigned long jarg1) {
  void * jresult ;
  unsigned long arg1 ;
  MusicControlPannel *result = 0 ;
  
  arg1 = (unsigned long)jarg1; 
  result = (MusicControlPannel *)new MusicControlPannel(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MusicControlPannel(void * jarg1) {
  MusicControlPannel *arg1 = (MusicControlPannel *) 0 ;
  
  arg1 = (MusicControlPannel *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EDIT_ARG_MUSIC_musicName_set(void * jarg1, const char * jarg2) {
  EDIT_ARG_MUSIC *arg1 = (EDIT_ARG_MUSIC *) 0 ;
  UNSANITIZED *arg2 = 0 ;
  
  arg1 = (EDIT_ARG_MUSIC *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  UNSANITIZED arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->musicName = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_EDIT_ARG_MUSIC_musicName_get(void * jarg1) {
  const char * jresult ;
  EDIT_ARG_MUSIC *arg1 = (EDIT_ARG_MUSIC *) 0 ;
  UNSANITIZED *result = 0 ;
  
  arg1 = (EDIT_ARG_MUSIC *)jarg1; 
  result = (UNSANITIZED *) & ((arg1)->musicName);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EDIT_ARG_MUSIC_arg_set(void * jarg1, void * jarg2) {
  EDIT_ARG_MUSIC *arg1 = (EDIT_ARG_MUSIC *) 0 ;
  MusicArgs *arg2 = (MusicArgs *) 0 ;
  
  arg1 = (EDIT_ARG_MUSIC *)jarg1; 
  arg2 = (MusicArgs *)jarg2; 
  if (arg1) (arg1)->arg = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EDIT_ARG_MUSIC_arg_get(void * jarg1) {
  void * jresult ;
  EDIT_ARG_MUSIC *arg1 = (EDIT_ARG_MUSIC *) 0 ;
  MusicArgs *result = 0 ;
  
  arg1 = (EDIT_ARG_MUSIC *)jarg1; 
  result = (MusicArgs *)& ((arg1)->arg);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_EDIT_ARG_MUSIC() {
  void * jresult ;
  EDIT_ARG_MUSIC *result = 0 ;
  
  result = (EDIT_ARG_MUSIC *)new EDIT_ARG_MUSIC();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_EDIT_ARG_MUSIC(void * jarg1) {
  EDIT_ARG_MUSIC *arg1 = (EDIT_ARG_MUSIC *) 0 ;
  
  arg1 = (EDIT_ARG_MUSIC *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_editorObject_getMixRepo(void * jarg1) {
  void * jresult ;
  editorObject *arg1 = (editorObject *) 0 ;
  std::shared_ptr< editorObject > *smartarg1 = 0 ;
  git_repository *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  editorObject > *)jarg1;
  arg1 = (editorObject *)(smartarg1 ? smartarg1->get() : 0); 
  result = (git_repository *)(arg1)->getMixRepo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_editorObject_getMusicRepo(void * jarg1, const char * jarg2) {
  void * jresult ;
  editorObject *arg1 = (editorObject *) 0 ;
  UNSANITIZED *arg2 = 0 ;
  std::shared_ptr< editorObject > *smartarg1 = 0 ;
  git_repository *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  editorObject > *)jarg1;
  arg1 = (editorObject *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  UNSANITIZED arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (git_repository *)(arg1)->getMusicRepo((UNSANITIZED const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_editorObject_getNoteRepo(void * jarg1) {
  void * jresult ;
  editorObject *arg1 = (editorObject *) 0 ;
  std::shared_ptr< editorObject > *smartarg1 = 0 ;
  git_repository *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  editorObject > *)jarg1;
  arg1 = (editorObject *)(smartarg1 ? smartarg1->get() : 0); 
  result = (git_repository *)(arg1)->getNoteRepo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_editorObject_getKVRepo(void * jarg1) {
  void * jresult ;
  editorObject *arg1 = (editorObject *) 0 ;
  std::shared_ptr< editorObject > *smartarg1 = 0 ;
  git_repository *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  editorObject > *)jarg1;
  arg1 = (editorObject *)(smartarg1 ? smartarg1->get() : 0); 
  result = (git_repository *)(arg1)->getKVRepo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_editorObject_AddLine(void * jarg1, const char * jarg2, const char * jarg3) {
  unsigned int jresult ;
  editorObject *arg1 = (editorObject *) 0 ;
  UNSANITIZED *arg2 = 0 ;
  DONT_SANITIZE *arg3 = 0 ;
  std::shared_ptr< editorObject > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<  editorObject > *)jarg1;
  arg1 = (editorObject *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  UNSANITIZED arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  DONT_SANITIZE arg3_str(jarg3);
  arg3 = &arg3_str; 
  result = (bool)(arg1)->AddLine((UNSANITIZED const &)*arg2,(DONT_SANITIZE const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_editorObject_deleteLine(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4) {
  int jresult ;
  editorObject *arg1 = (editorObject *) 0 ;
  EDIT_ARG_MIX *arg2 = 0 ;
  bool arg3 ;
  bool arg4 ;
  std::shared_ptr< editorObject > *smartarg1 = 0 ;
  int result;
  
  
  smartarg1 = (std::shared_ptr<  editorObject > *)jarg1;
  arg1 = (editorObject *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (EDIT_ARG_MIX *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "EDIT_ARG_MIX const & is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  result = (int)(arg1)->deleteLine((EDIT_ARG_MIX const &)*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_editorObject_render(void * jarg1, const char * jarg2, void * jarg3) {
  unsigned int jresult ;
  editorObject *arg1 = (editorObject *) 0 ;
  UNSANITIZED *arg2 = 0 ;
  litedb *arg3 = 0 ;
  std::shared_ptr< editorObject > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<  editorObject > *)jarg1;
  arg1 = (editorObject *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  UNSANITIZED arg2_str(jarg2);
  arg2 = &arg2_str; 
  
  arg3 = (litedb *)(((std::shared_ptr<  litedb > *)jarg3) ? ((std::shared_ptr<  litedb > *)jarg3)->get() : 0);
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "litedb & reference is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->render((UNSANITIZED const &)*arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_editorObject_demoPlayInit(void * jarg1, void * jarg2, unsigned int jarg3, const char * jarg4) {
  editorObject *arg1 = (editorObject *) 0 ;
  std::shared_ptr< audioPlayer > *arg2 = 0 ;
  unsigned int arg3 ;
  UNSANITIZED *arg4 = 0 ;
  std::shared_ptr< editorObject > *smartarg1 = 0 ;
  std::shared_ptr< audioPlayer > tempnull2 ;
  
  
  smartarg1 = (std::shared_ptr<  editorObject > *)jarg1;
  arg1 = (editorObject *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? (std::shared_ptr< audioPlayer > *)jarg2 : &tempnull2; 
  arg3 = (unsigned int)jarg3; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  UNSANITIZED arg4_str(jarg4);
  arg4 = &arg4_str; 
  (arg1)->demoPlayInit(*arg2,arg3,(UNSANITIZED const &)*arg4);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_editorObject_pushToRootDB__SWIG_0(void * jarg1, void * jarg2, const char * jarg3) {
  unsigned int jresult ;
  editorObject *arg1 = (editorObject *) 0 ;
  litedb *arg2 = 0 ;
  UNSANITIZED *arg3 = 0 ;
  std::shared_ptr< editorObject > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<  editorObject > *)jarg1;
  arg1 = (editorObject *)(smartarg1 ? smartarg1->get() : 0); 
  
  arg2 = (litedb *)(((std::shared_ptr<  litedb > *)jarg2) ? ((std::shared_ptr<  litedb > *)jarg2)->get() : 0);
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "litedb & reference is null", 0);
    return 0;
  } 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  UNSANITIZED arg3_str(jarg3);
  arg3 = &arg3_str; 
  result = (bool)(arg1)->pushToRootDB(*arg2,(UNSANITIZED const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_editorObject_pushToRootDB__SWIG_1(void * jarg1, void * jarg2, const char * jarg3, const char * jarg4) {
  unsigned int jresult ;
  editorObject *arg1 = (editorObject *) 0 ;
  litedb *arg2 = 0 ;
  UNSANITIZED *arg3 = 0 ;
  UNSANITIZED *arg4 = 0 ;
  std::shared_ptr< editorObject > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<  editorObject > *)jarg1;
  arg1 = (editorObject *)(smartarg1 ? smartarg1->get() : 0); 
  
  arg2 = (litedb *)(((std::shared_ptr<  litedb > *)jarg2) ? ((std::shared_ptr<  litedb > *)jarg2)->get() : 0);
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "litedb & reference is null", 0);
    return 0;
  } 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  UNSANITIZED arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  UNSANITIZED arg4_str(jarg4);
  arg4 = &arg4_str; 
  result = (bool)(arg1)->pushToRootDB(*arg2,(UNSANITIZED const &)*arg3,(UNSANITIZED const &)*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_editorObject_DESTROY_PROJECT(void * jarg1) {
  const char * jresult ;
  editorObject *arg1 = (editorObject *) 0 ;
  std::shared_ptr< editorObject > *smartarg1 = 0 ;
  DONT_SANITIZE result;
  
  
  smartarg1 = (std::shared_ptr<  editorObject > *)jarg1;
  arg1 = (editorObject *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->DESTROY_PROJECT();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_editorObject_ConfigNewMusic__SWIG_0(void * jarg1, const char * jarg2, const char * jarg3, void * jarg4, const char * jarg5) {
  unsigned int jresult ;
  editorObject *arg1 = (editorObject *) 0 ;
  UNSANITIZED *arg2 = 0 ;
  UNSANITIZED *arg3 = 0 ;
  std::filesystem::path *arg4 = 0 ;
  DONT_SANITIZE *arg5 = 0 ;
  std::shared_ptr< editorObject > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<  editorObject > *)jarg1;
  arg1 = (editorObject *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  UNSANITIZED arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  UNSANITIZED arg3_str(jarg3);
  arg3 = &arg3_str; 
  arg4 = (std::filesystem::path *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::filesystem::path const & is null", 0);
    return 0;
  } 
  if (!jarg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  DONT_SANITIZE arg5_str(jarg5);
  arg5 = &arg5_str; 
  result = (bool)(arg1)->ConfigNewMusic((UNSANITIZED const &)*arg2,(UNSANITIZED const &)*arg3,(std::filesystem::path const &)*arg4,(DONT_SANITIZE const &)*arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_editorObject_ConfigNewMusic__SWIG_1(void * jarg1, const char * jarg2, const char * jarg3, void * jarg4) {
  unsigned int jresult ;
  editorObject *arg1 = (editorObject *) 0 ;
  UNSANITIZED *arg2 = 0 ;
  UNSANITIZED *arg3 = 0 ;
  std::filesystem::path *arg4 = 0 ;
  std::shared_ptr< editorObject > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<  editorObject > *)jarg1;
  arg1 = (editorObject *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  UNSANITIZED arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  UNSANITIZED arg3_str(jarg3);
  arg3 = &arg3_str; 
  arg4 = (std::filesystem::path *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::filesystem::path const & is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->ConfigNewMusic((UNSANITIZED const &)*arg2,(UNSANITIZED const &)*arg3,(std::filesystem::path const &)*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_editorObject_Open(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  editorObject *arg1 = (editorObject *) 0 ;
  std::filesystem::path *arg2 = 0 ;
  std::shared_ptr< editorObject > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<  editorObject > *)jarg1;
  arg1 = (editorObject *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (std::filesystem::path *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::filesystem::path const & is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->Open((std::filesystem::path const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_editorObject(const char * jarg1, const char * jarg2) {
  void * jresult ;
  DONT_SANITIZE *arg1 = 0 ;
  DONT_SANITIZE *arg2 = 0 ;
  editorObject *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  DONT_SANITIZE arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  DONT_SANITIZE arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (editorObject *)new editorObject((DONT_SANITIZE const &)*arg1,(DONT_SANITIZE const &)*arg2);
  
  jresult = result ? new std::shared_ptr<  editorObject >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_editorObject(void * jarg1) {
  editorObject *arg1 = (editorObject *) 0 ;
  std::shared_ptr< editorObject > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  editorObject > *)jarg1;
  arg1 = (editorObject *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_editorObject_AddLineNote(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  editorObject *arg1 = (editorObject *) 0 ;
  EDIT_ARG_NOTE *arg2 = 0 ;
  std::shared_ptr< editorObject > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<  editorObject > *)jarg1;
  arg1 = (editorObject *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (EDIT_ARG_NOTE *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "EDIT_ARG_NOTE const & is null", 0);
    return 0;
  } 
  result = (bool)editorObject_AddLineNote(arg1,(NoteArgs const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_editorObject_AddLineMix(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  editorObject *arg1 = (editorObject *) 0 ;
  EDIT_ARG_MIX *arg2 = 0 ;
  std::shared_ptr< editorObject > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<  editorObject > *)jarg1;
  arg1 = (editorObject *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (EDIT_ARG_MIX *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "EDIT_ARG_MIX const & is null", 0);
    return 0;
  } 
  result = (bool)editorObject_AddLineMix(arg1,(MixArgs const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_editorObject_AddLineKV(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  editorObject *arg1 = (editorObject *) 0 ;
  EDIT_ARG_KEY_VALUE *arg2 = 0 ;
  std::shared_ptr< editorObject > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<  editorObject > *)jarg1;
  arg1 = (editorObject *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (EDIT_ARG_KEY_VALUE *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "EDIT_ARG_KEY_VALUE const & is null", 0);
    return 0;
  } 
  result = (bool)editorObject_AddLineKV(arg1,(std::pair< std::string,std::string > const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_editorObject_AddLineMusic(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  editorObject *arg1 = (editorObject *) 0 ;
  EDIT_ARG_MUSIC *arg2 = 0 ;
  std::shared_ptr< editorObject > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<  editorObject > *)jarg1;
  arg1 = (editorObject *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (EDIT_ARG_MUSIC *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "EDIT_ARG_MUSIC const & is null", 0);
    return 0;
  } 
  result = (bool)editorObject_AddLineMusic(arg1,(EDIT_ARG_MUSIC const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_editorObject_deleteLineNote(void * jarg1, void * jarg2) {
  int jresult ;
  editorObject *arg1 = (editorObject *) 0 ;
  EDIT_ARG_NOTE *arg2 = 0 ;
  std::shared_ptr< editorObject > *smartarg1 = 0 ;
  int result;
  
  
  smartarg1 = (std::shared_ptr<  editorObject > *)jarg1;
  arg1 = (editorObject *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (EDIT_ARG_NOTE *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "EDIT_ARG_NOTE const & is null", 0);
    return 0;
  } 
  result = (int)editorObject_deleteLineNote(arg1,(NoteArgs const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_editorObject_deleteLineKV(void * jarg1, void * jarg2) {
  int jresult ;
  editorObject *arg1 = (editorObject *) 0 ;
  EDIT_ARG_KEY_VALUE *arg2 = 0 ;
  std::shared_ptr< editorObject > *smartarg1 = 0 ;
  int result;
  
  
  smartarg1 = (std::shared_ptr<  editorObject > *)jarg1;
  arg1 = (editorObject *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (EDIT_ARG_KEY_VALUE *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "EDIT_ARG_KEY_VALUE const & is null", 0);
    return 0;
  } 
  result = (int)editorObject_deleteLineKV(arg1,(std::pair< std::string,std::string > const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_editorObject_deleteLineMusic(void * jarg1, void * jarg2) {
  int jresult ;
  editorObject *arg1 = (editorObject *) 0 ;
  EDIT_ARG_MUSIC *arg2 = 0 ;
  std::shared_ptr< editorObject > *smartarg1 = 0 ;
  int result;
  
  
  smartarg1 = (std::shared_ptr<  editorObject > *)jarg1;
  arg1 = (editorObject *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (EDIT_ARG_MUSIC *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "EDIT_ARG_MUSIC const & is null", 0);
    return 0;
  } 
  result = (int)editorObject_deleteLineMusic(arg1,(EDIT_ARG_MUSIC const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_editorObject_GetAllNotes(void * jarg1, void * jarg2) {
  editorObject *arg1 = (editorObject *) 0 ;
  NoteVisitor *arg2 = (NoteVisitor *) 0 ;
  std::shared_ptr< editorObject > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  editorObject > *)jarg1;
  arg1 = (editorObject *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (NoteVisitor *)jarg2; 
  editorObject_GetAllNotes(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_editorObject_GetAllMixes(void * jarg1, void * jarg2) {
  editorObject *arg1 = (editorObject *) 0 ;
  MixVisitor *arg2 = (MixVisitor *) 0 ;
  std::shared_ptr< editorObject > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  editorObject > *)jarg1;
  arg1 = (editorObject *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (MixVisitor *)jarg2; 
  editorObject_GetAllMixes(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_editorObject_GetAllKeyValues(void * jarg1, void * jarg2) {
  editorObject *arg1 = (editorObject *) 0 ;
  KVVisitor *arg2 = (KVVisitor *) 0 ;
  std::shared_ptr< editorObject > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  editorObject > *)jarg1;
  arg1 = (editorObject *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (KVVisitor *)jarg2; 
  editorObject_GetAllKeyValues(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_editorObject_GetAllMusics(void * jarg1, void * jarg2) {
  editorObject *arg1 = (editorObject *) 0 ;
  MusicVisitor *arg2 = (MusicVisitor *) 0 ;
  std::shared_ptr< editorObject > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  editorObject > *)jarg1;
  arg1 = (editorObject *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (MusicVisitor *)jarg2; 
  editorObject_GetAllMusics(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_editorObject_UndoNote(void * jarg1) {
  unsigned int jresult ;
  editorObject *arg1 = (editorObject *) 0 ;
  std::shared_ptr< editorObject > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<  editorObject > *)jarg1;
  arg1 = (editorObject *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)editorObject_UndoNote(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_editorObject_UndoMix(void * jarg1) {
  unsigned int jresult ;
  editorObject *arg1 = (editorObject *) 0 ;
  std::shared_ptr< editorObject > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<  editorObject > *)jarg1;
  arg1 = (editorObject *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)editorObject_UndoMix(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_editorObject_UndoKV(void * jarg1) {
  unsigned int jresult ;
  editorObject *arg1 = (editorObject *) 0 ;
  std::shared_ptr< editorObject > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<  editorObject > *)jarg1;
  arg1 = (editorObject *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)editorObject_UndoKV(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_editorObject_UndoMusic(void * jarg1, const char * jarg2) {
  unsigned int jresult ;
  editorObject *arg1 = (editorObject *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< editorObject > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<  editorObject > *)jarg1;
  arg1 = (editorObject *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)editorObject_UndoMusic(arg1,(std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_editorObject_RedoNote(void * jarg1) {
  unsigned int jresult ;
  editorObject *arg1 = (editorObject *) 0 ;
  std::shared_ptr< editorObject > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<  editorObject > *)jarg1;
  arg1 = (editorObject *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)editorObject_RedoNote(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_editorObject_RedoMix(void * jarg1) {
  unsigned int jresult ;
  editorObject *arg1 = (editorObject *) 0 ;
  std::shared_ptr< editorObject > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<  editorObject > *)jarg1;
  arg1 = (editorObject *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)editorObject_RedoMix(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_editorObject_RedoKV(void * jarg1) {
  unsigned int jresult ;
  editorObject *arg1 = (editorObject *) 0 ;
  std::shared_ptr< editorObject > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<  editorObject > *)jarg1;
  arg1 = (editorObject *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)editorObject_RedoKV(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_editorObject_RedoMusic(void * jarg1, const char * jarg2) {
  unsigned int jresult ;
  editorObject *arg1 = (editorObject *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< editorObject > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<  editorObject > *)jarg1;
  arg1 = (editorObject *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)editorObject_RedoMusic(arg1,(std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_editorObject_GoNote(void * jarg1, const char * jarg2, const char * jarg3) {
  unsigned int jresult ;
  editorObject *arg1 = (editorObject *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::shared_ptr< editorObject > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<  editorObject > *)jarg1;
  arg1 = (editorObject *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  result = (bool)editorObject_GoNote(arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_editorObject_GoMix(void * jarg1, const char * jarg2, const char * jarg3) {
  unsigned int jresult ;
  editorObject *arg1 = (editorObject *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::shared_ptr< editorObject > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<  editorObject > *)jarg1;
  arg1 = (editorObject *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  result = (bool)editorObject_GoMix(arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_editorObject_GoKV(void * jarg1, const char * jarg2, const char * jarg3) {
  unsigned int jresult ;
  editorObject *arg1 = (editorObject *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::shared_ptr< editorObject > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<  editorObject > *)jarg1;
  arg1 = (editorObject *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  result = (bool)editorObject_GoKV(arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_editorObject_GoMusic(void * jarg1, const char * jarg2, const char * jarg3) {
  unsigned int jresult ;
  editorObject *arg1 = (editorObject *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::shared_ptr< editorObject > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<  editorObject > *)jarg1;
  arg1 = (editorObject *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  result = (bool)editorObject_GoMusic(arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_editorObject_GetLogNoteJSON(void * jarg1) {
  const char * jresult ;
  editorObject *arg1 = (editorObject *) 0 ;
  std::shared_ptr< editorObject > *smartarg1 = 0 ;
  std::string result;
  
  
  smartarg1 = (std::shared_ptr<  editorObject > *)jarg1;
  arg1 = (editorObject *)(smartarg1 ? smartarg1->get() : 0); 
  result = editorObject_GetLogNoteJSON(arg1);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_editorObject_GetLogMixJSON(void * jarg1) {
  const char * jresult ;
  editorObject *arg1 = (editorObject *) 0 ;
  std::shared_ptr< editorObject > *smartarg1 = 0 ;
  std::string result;
  
  
  smartarg1 = (std::shared_ptr<  editorObject > *)jarg1;
  arg1 = (editorObject *)(smartarg1 ? smartarg1->get() : 0); 
  result = editorObject_GetLogMixJSON(arg1);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_editorObject_GetLogKVJSON(void * jarg1) {
  const char * jresult ;
  editorObject *arg1 = (editorObject *) 0 ;
  std::shared_ptr< editorObject > *smartarg1 = 0 ;
  std::string result;
  
  
  smartarg1 = (std::shared_ptr<  editorObject > *)jarg1;
  arg1 = (editorObject *)(smartarg1 ? smartarg1->get() : 0); 
  result = editorObject_GetLogKVJSON(arg1);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_editorObject_GetLogMusicJSON(void * jarg1, const char * jarg2) {
  const char * jresult ;
  editorObject *arg1 = (editorObject *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< editorObject > *smartarg1 = 0 ;
  std::string result;
  
  
  smartarg1 = (std::shared_ptr<  editorObject > *)jarg1;
  arg1 = (editorObject *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = editorObject_GetLogMusicJSON(arg1,(std::string const &)*arg2);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_editorObject_GetDiffNote(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  editorObject *arg1 = (editorObject *) 0 ;
  gitwrap::commit *arg2 = 0 ;
  gitwrap::commit *arg3 = 0 ;
  std::shared_ptr< editorObject > *smartarg1 = 0 ;
  DiffResult result;
  
  
  smartarg1 = (std::shared_ptr<  editorObject > *)jarg1;
  arg1 = (editorObject *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (gitwrap::commit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gitwrap::commit const & is null", 0);
    return 0;
  } 
  arg3 = (gitwrap::commit *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gitwrap::commit const & is null", 0);
    return 0;
  } 
  result = editorObject_GetDiffNote(arg1,(gitwrap::commit const &)*arg2,(gitwrap::commit const &)*arg3);
  jresult = new DiffResult(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_editorObject_GetDiffMix(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  editorObject *arg1 = (editorObject *) 0 ;
  gitwrap::commit *arg2 = 0 ;
  gitwrap::commit *arg3 = 0 ;
  std::shared_ptr< editorObject > *smartarg1 = 0 ;
  DiffResult result;
  
  
  smartarg1 = (std::shared_ptr<  editorObject > *)jarg1;
  arg1 = (editorObject *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (gitwrap::commit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gitwrap::commit const & is null", 0);
    return 0;
  } 
  arg3 = (gitwrap::commit *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gitwrap::commit const & is null", 0);
    return 0;
  } 
  result = editorObject_GetDiffMix(arg1,(gitwrap::commit const &)*arg2,(gitwrap::commit const &)*arg3);
  jresult = new DiffResult(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_editorObject_GetDiffKV(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  editorObject *arg1 = (editorObject *) 0 ;
  gitwrap::commit *arg2 = 0 ;
  gitwrap::commit *arg3 = 0 ;
  std::shared_ptr< editorObject > *smartarg1 = 0 ;
  DiffResult result;
  
  
  smartarg1 = (std::shared_ptr<  editorObject > *)jarg1;
  arg1 = (editorObject *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (gitwrap::commit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gitwrap::commit const & is null", 0);
    return 0;
  } 
  arg3 = (gitwrap::commit *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gitwrap::commit const & is null", 0);
    return 0;
  } 
  result = editorObject_GetDiffKV(arg1,(gitwrap::commit const &)*arg2,(gitwrap::commit const &)*arg3);
  jresult = new DiffResult(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_editorObject_GetDiffMusic(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  editorObject *arg1 = (editorObject *) 0 ;
  gitwrap::commit *arg2 = 0 ;
  gitwrap::commit *arg3 = 0 ;
  std::shared_ptr< editorObject > *smartarg1 = 0 ;
  DiffResult result;
  
  
  smartarg1 = (std::shared_ptr<  editorObject > *)jarg1;
  arg1 = (editorObject *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (gitwrap::commit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gitwrap::commit const & is null", 0);
    return 0;
  } 
  arg3 = (gitwrap::commit *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gitwrap::commit const & is null", 0);
    return 0;
  } 
  result = editorObject_GetDiffMusic(arg1,(gitwrap::commit const &)*arg2,(gitwrap::commit const &)*arg3);
  jresult = new DiffResult(result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_editorObject_UpdateLogNote(void * jarg1) {
  unsigned int jresult ;
  editorObject *arg1 = (editorObject *) 0 ;
  std::shared_ptr< editorObject > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<  editorObject > *)jarg1;
  arg1 = (editorObject *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)editorObject_UpdateLogNote(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_editorObject_UpdateLogMix(void * jarg1) {
  unsigned int jresult ;
  editorObject *arg1 = (editorObject *) 0 ;
  std::shared_ptr< editorObject > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<  editorObject > *)jarg1;
  arg1 = (editorObject *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)editorObject_UpdateLogMix(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_editorObject_UpdateLogKV(void * jarg1) {
  unsigned int jresult ;
  editorObject *arg1 = (editorObject *) 0 ;
  std::shared_ptr< editorObject > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<  editorObject > *)jarg1;
  arg1 = (editorObject *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)editorObject_UpdateLogKV(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_editorObject_UpdateLogMusic(void * jarg1) {
  unsigned int jresult ;
  editorObject *arg1 = (editorObject *) 0 ;
  std::shared_ptr< editorObject > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<  editorObject > *)jarg1;
  arg1 = (editorObject *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)editorObject_UpdateLogMusic(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_editorObject_UpdateLogNoteOn(void * jarg1, const char * jarg2) {
  unsigned int jresult ;
  editorObject *arg1 = (editorObject *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< editorObject > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<  editorObject > *)jarg1;
  arg1 = (editorObject *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)editorObject_UpdateLogNoteOn(arg1,(std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_editorObject_UpdateLogMixOn(void * jarg1, const char * jarg2) {
  unsigned int jresult ;
  editorObject *arg1 = (editorObject *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< editorObject > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<  editorObject > *)jarg1;
  arg1 = (editorObject *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)editorObject_UpdateLogMixOn(arg1,(std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_editorObject_UpdateLogKVOn(void * jarg1, const char * jarg2) {
  unsigned int jresult ;
  editorObject *arg1 = (editorObject *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< editorObject > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<  editorObject > *)jarg1;
  arg1 = (editorObject *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)editorObject_UpdateLogKVOn(arg1,(std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_editorObject_UpdateLogMusicOn(void * jarg1, const char * jarg2) {
  unsigned int jresult ;
  editorObject *arg1 = (editorObject *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< editorObject > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<  editorObject > *)jarg1;
  arg1 = (editorObject *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)editorObject_UpdateLogMusicOn(arg1,(std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_commit_commitPointer_set(void * jarg1, void * jarg2) {
  gitwrap::commit *arg1 = (gitwrap::commit *) 0 ;
  git_commit *arg2 = (git_commit *) 0 ;
  
  arg1 = (gitwrap::commit *)jarg1; 
  arg2 = (git_commit *)jarg2; 
  if (arg1) (arg1)->commitPointer = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_commit_commitPointer_get(void * jarg1) {
  void * jresult ;
  gitwrap::commit *arg1 = (gitwrap::commit *) 0 ;
  git_commit *result = 0 ;
  
  arg1 = (gitwrap::commit *)jarg1; 
  result = (git_commit *) ((arg1)->commitPointer);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_commit_commitID_set(void * jarg1, void * jarg2) {
  gitwrap::commit *arg1 = (gitwrap::commit *) 0 ;
  git_oid *arg2 = (git_oid *) 0 ;
  
  arg1 = (gitwrap::commit *)jarg1; 
  arg2 = (git_oid *)jarg2; 
  if (arg1) (arg1)->commitID = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_commit_commitID_get(void * jarg1) {
  void * jresult ;
  gitwrap::commit *arg1 = (gitwrap::commit *) 0 ;
  git_oid *result = 0 ;
  
  arg1 = (gitwrap::commit *)jarg1; 
  result = (git_oid *)& ((arg1)->commitID);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_commit_msg_set(void * jarg1, const char * jarg2) {
  gitwrap::commit *arg1 = (gitwrap::commit *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (gitwrap::commit *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->msg = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_commit_msg_get(void * jarg1) {
  const char * jresult ;
  gitwrap::commit *arg1 = (gitwrap::commit *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (gitwrap::commit *)jarg1; 
  result = (std::string *) & ((arg1)->msg);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_commit__SWIG_0() {
  void * jresult ;
  gitwrap::commit *result = 0 ;
  
  result = (gitwrap::commit *)new gitwrap::commit();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_commit__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  git_oid arg1 ;
  git_repository *arg2 = (git_repository *) 0 ;
  git_oid *argp1 ;
  gitwrap::commit *result = 0 ;
  
  argp1 = (git_oid *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null git_oid", 0);
    return 0;
  }
  arg1 = *argp1; 
  arg2 = (git_repository *)jarg2; 
  result = (gitwrap::commit *)new gitwrap::commit(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_commit__SWIG_2(const char * jarg1, void * jarg2) {
  void * jresult ;
  std::string arg1 ;
  git_repository *arg2 = (git_repository *) 0 ;
  gitwrap::commit *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg1)->assign(jarg1); 
  arg2 = (git_repository *)jarg2; 
  result = (gitwrap::commit *)new gitwrap::commit(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_commit(void * jarg1) {
  gitwrap::commit *arg1 = (gitwrap::commit *) 0 ;
  
  arg1 = (gitwrap::commit *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_commitList_clist_set(void * jarg1, void * jarg2) {
  gitwrap::commitList *arg1 = (gitwrap::commitList *) 0 ;
  std::list< gitwrap::commit > *arg2 = (std::list< gitwrap::commit > *) 0 ;
  
  arg1 = (gitwrap::commitList *)jarg1; 
  arg2 = (std::list< gitwrap::commit > *)jarg2; 
  if (arg1) (arg1)->clist = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_commitList_clist_get(void * jarg1) {
  void * jresult ;
  gitwrap::commitList *arg1 = (gitwrap::commitList *) 0 ;
  std::list< gitwrap::commit > *result = 0 ;
  
  arg1 = (gitwrap::commitList *)jarg1; 
  result = (std::list< gitwrap::commit > *)& ((arg1)->clist);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_commitList_Reset(void * jarg1) {
  gitwrap::commitList *arg1 = (gitwrap::commitList *) 0 ;
  
  arg1 = (gitwrap::commitList *)jarg1; 
  (arg1)->Reset();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_commitList_UpdateCommits(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  gitwrap::commitList *arg1 = (gitwrap::commitList *) 0 ;
  git_repository *arg2 = (git_repository *) 0 ;
  bool result;
  
  arg1 = (gitwrap::commitList *)jarg1; 
  arg2 = (git_repository *)jarg2; 
  result = (bool)(arg1)->UpdateCommits(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_commitList_OkToAdd(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  gitwrap::commitList *arg1 = (gitwrap::commitList *) 0 ;
  git_oid arg2 ;
  git_oid *argp2 ;
  bool result;
  
  arg1 = (gitwrap::commitList *)jarg1; 
  argp2 = (git_oid *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null git_oid", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)(arg1)->OkToAdd(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_commitList() {
  void * jresult ;
  gitwrap::commitList *result = 0 ;
  
  result = (gitwrap::commitList *)new gitwrap::commitList();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_commitList(void * jarg1) {
  gitwrap::commitList *arg1 = (gitwrap::commitList *) 0 ;
  
  arg1 = (gitwrap::commitList *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_audioRender_rendered_frames_set(void * jarg1, void * jarg2) {
  audioRender *arg1 = (audioRender *) 0 ;
  std::optional< std::vector< float > > *arg2 = (std::optional< std::vector< float > > *) 0 ;
  
  arg1 = (audioRender *)jarg1; 
  arg2 = (std::optional< std::vector< float > > *)jarg2; 
  if (arg1) (arg1)->rendered_frames = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_audioRender_rendered_frames_get(void * jarg1) {
  void * jresult ;
  audioRender *arg1 = (audioRender *) 0 ;
  std::optional< std::vector< float > > *result = 0 ;
  
  arg1 = (audioRender *)jarg1; 
  result = (std::optional< std::vector< float > > *)& ((arg1)->rendered_frames);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_audioRender_LoadTrack(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  audioRender *arg1 = (audioRender *) 0 ;
  litedb *arg2 = 0 ;
  trackdata *arg3 = 0 ;
  bool result;
  
  arg1 = (audioRender *)jarg1; 
  
  arg2 = (litedb *)(((std::shared_ptr<  litedb > *)jarg2) ? ((std::shared_ptr<  litedb > *)jarg2)->get() : 0);
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "litedb & reference is null", 0);
    return 0;
  } 
  arg3 = (trackdata *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "trackdata & is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->LoadTrack(*arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_audioRender_LoadTrackFromMixData(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  audioRender *arg1 = (audioRender *) 0 ;
  litedb *arg2 = 0 ;
  BIN *arg3 = 0 ;
  bool result;
  
  arg1 = (audioRender *)jarg1; 
  
  arg2 = (litedb *)(((std::shared_ptr<  litedb > *)jarg2) ? ((std::shared_ptr<  litedb > *)jarg2)->get() : 0);
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "litedb & reference is null", 0);
    return 0;
  } 
  arg3 = (BIN *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BIN & is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->LoadTrackFromMixData(*arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_audioRender() {
  void * jresult ;
  audioRender *result = 0 ;
  
  result = (audioRender *)new audioRender();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_audioRender(void * jarg1) {
  audioRender *arg1 = (audioRender *) 0 ;
  
  arg1 = (audioRender *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_EDIT_ARG_KEY_VALUE__SWIG_0() {
  void * jresult ;
  std::pair< std::string,std::string > *result = 0 ;
  
  result = (std::pair< std::string,std::string > *)new std::pair< std::string,std::string >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_EDIT_ARG_KEY_VALUE__SWIG_1(const char * jarg1, const char * jarg2) {
  void * jresult ;
  std::string arg1 ;
  std::string arg2 ;
  std::pair< std::string,std::string > *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg1)->assign(jarg1); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg2)->assign(jarg2); 
  result = (std::pair< std::string,std::string > *)new std::pair< std::string,std::string >(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_EDIT_ARG_KEY_VALUE__SWIG_2(void * jarg1) {
  void * jresult ;
  std::pair< std::string,std::string > *arg1 = 0 ;
  std::pair< std::string,std::string > *result = 0 ;
  
  arg1 = (std::pair< std::string,std::string > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::pair< std::string,std::string > const & is null", 0);
    return 0;
  } 
  result = (std::pair< std::string,std::string > *)new std::pair< std::string,std::string >((std::pair< std::string,std::string > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EDIT_ARG_KEY_VALUE_first_set(void * jarg1, const char * jarg2) {
  std::pair< std::string,std::string > *arg1 = (std::pair< std::string,std::string > *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (std::pair< std::string,std::string > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->first = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_EDIT_ARG_KEY_VALUE_first_get(void * jarg1) {
  const char * jresult ;
  std::pair< std::string,std::string > *arg1 = (std::pair< std::string,std::string > *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (std::pair< std::string,std::string > *)jarg1; 
  result = (std::string *) & ((arg1)->first);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EDIT_ARG_KEY_VALUE_second_set(void * jarg1, const char * jarg2) {
  std::pair< std::string,std::string > *arg1 = (std::pair< std::string,std::string > *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (std::pair< std::string,std::string > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->second = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_EDIT_ARG_KEY_VALUE_second_get(void * jarg1) {
  const char * jresult ;
  std::pair< std::string,std::string > *arg1 = (std::pair< std::string,std::string > *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (std::pair< std::string,std::string > *)jarg1; 
  result = (std::string *) & ((arg1)->second);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_EDIT_ARG_KEY_VALUE(void * jarg1) {
  std::pair< std::string,std::string > *arg1 = (std::pair< std::string,std::string > *) 0 ;
  
  arg1 = (std::pair< std::string,std::string > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EDIT_ARG_MIX_type_set(void * jarg1, int jarg2) {
  MixArgs *arg1 = (MixArgs *) 0 ;
  TypeEnum arg2 ;
  
  arg1 = (MixArgs *)jarg1; 
  arg2 = (TypeEnum)jarg2; 
  if (arg1) (arg1)->type = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EDIT_ARG_MIX_type_get(void * jarg1) {
  int jresult ;
  MixArgs *arg1 = (MixArgs *) 0 ;
  TypeEnum result;
  
  arg1 = (MixArgs *)jarg1; 
  result = (TypeEnum) ((arg1)->type);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EDIT_ARG_MIX_details_set(void * jarg1, int jarg2) {
  MixArgs *arg1 = (MixArgs *) 0 ;
  DetailEnum arg2 ;
  
  arg1 = (MixArgs *)jarg1; 
  arg2 = (DetailEnum)jarg2; 
  if (arg1) (arg1)->details = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EDIT_ARG_MIX_details_get(void * jarg1) {
  int jresult ;
  MixArgs *arg1 = (MixArgs *) 0 ;
  DetailEnum result;
  
  arg1 = (MixArgs *)jarg1; 
  result = (DetailEnum) ((arg1)->details);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EDIT_ARG_MIX_ID_set(void * jarg1, int jarg2) {
  MixArgs *arg1 = (MixArgs *) 0 ;
  int arg2 ;
  
  arg1 = (MixArgs *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->ID = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EDIT_ARG_MIX_ID_get(void * jarg1) {
  int jresult ;
  MixArgs *arg1 = (MixArgs *) 0 ;
  int result;
  
  arg1 = (MixArgs *)jarg1; 
  result = (int) ((arg1)->ID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EDIT_ARG_MIX_first_set(void * jarg1, const char * jarg2) {
  MixArgs *arg1 = (MixArgs *) 0 ;
  SANITIZED_ORNOT *arg2 = 0 ;
  
  arg1 = (MixArgs *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  SANITIZED_ORNOT arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->first = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_EDIT_ARG_MIX_first_get(void * jarg1) {
  const char * jresult ;
  MixArgs *arg1 = (MixArgs *) 0 ;
  SANITIZED_ORNOT *result = 0 ;
  
  arg1 = (MixArgs *)jarg1; 
  result = (SANITIZED_ORNOT *) & ((arg1)->first);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EDIT_ARG_MIX_second_set(void * jarg1, const char * jarg2) {
  MixArgs *arg1 = (MixArgs *) 0 ;
  SANITIZED_ORNOT *arg2 = 0 ;
  
  arg1 = (MixArgs *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  SANITIZED_ORNOT arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->second = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_EDIT_ARG_MIX_second_get(void * jarg1) {
  const char * jresult ;
  MixArgs *arg1 = (MixArgs *) 0 ;
  SANITIZED_ORNOT *result = 0 ;
  
  arg1 = (MixArgs *)jarg1; 
  result = (SANITIZED_ORNOT *) & ((arg1)->second);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EDIT_ARG_MIX_third_set(void * jarg1, const char * jarg2) {
  MixArgs *arg1 = (MixArgs *) 0 ;
  SANITIZED_ORNOT *arg2 = 0 ;
  
  arg1 = (MixArgs *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  SANITIZED_ORNOT arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->third = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_EDIT_ARG_MIX_third_get(void * jarg1) {
  const char * jresult ;
  MixArgs *arg1 = (MixArgs *) 0 ;
  SANITIZED_ORNOT *result = 0 ;
  
  arg1 = (MixArgs *)jarg1; 
  result = (SANITIZED_ORNOT *) & ((arg1)->third);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EDIT_ARG_MIX_beat_set(void * jarg1, long long jarg2) {
  MixArgs *arg1 = (MixArgs *) 0 ;
  long long arg2 ;
  
  arg1 = (MixArgs *)jarg1; 
  arg2 = (long long)jarg2; 
  if (arg1) (arg1)->beat = arg2;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_EDIT_ARG_MIX_beat_get(void * jarg1) {
  long long jresult ;
  MixArgs *arg1 = (MixArgs *) 0 ;
  long long result;
  
  arg1 = (MixArgs *)jarg1; 
  result = (long long) ((arg1)->beat);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EDIT_ARG_MIX_subBeat_set(void * jarg1, long long jarg2) {
  MixArgs *arg1 = (MixArgs *) 0 ;
  long long arg2 ;
  
  arg1 = (MixArgs *)jarg1; 
  arg2 = (long long)jarg2; 
  if (arg1) (arg1)->subBeat = arg2;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_EDIT_ARG_MIX_subBeat_get(void * jarg1) {
  long long jresult ;
  MixArgs *arg1 = (MixArgs *) 0 ;
  long long result;
  
  arg1 = (MixArgs *)jarg1; 
  result = (long long) ((arg1)->subBeat);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EDIT_ARG_MIX_separate_set(void * jarg1, long long jarg2) {
  MixArgs *arg1 = (MixArgs *) 0 ;
  long long arg2 ;
  
  arg1 = (MixArgs *)jarg1; 
  arg2 = (long long)jarg2; 
  if (arg1) (arg1)->separate = arg2;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_EDIT_ARG_MIX_separate_get(void * jarg1) {
  long long jresult ;
  MixArgs *arg1 = (MixArgs *) 0 ;
  long long result;
  
  arg1 = (MixArgs *)jarg1; 
  result = (long long) ((arg1)->separate);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EDIT_ARG_MIX_Ebeat_set(void * jarg1, long long jarg2) {
  MixArgs *arg1 = (MixArgs *) 0 ;
  long long arg2 ;
  
  arg1 = (MixArgs *)jarg1; 
  arg2 = (long long)jarg2; 
  if (arg1) (arg1)->Ebeat = arg2;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_EDIT_ARG_MIX_Ebeat_get(void * jarg1) {
  long long jresult ;
  MixArgs *arg1 = (MixArgs *) 0 ;
  long long result;
  
  arg1 = (MixArgs *)jarg1; 
  result = (long long) ((arg1)->Ebeat);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EDIT_ARG_MIX_EsubBeat_set(void * jarg1, long long jarg2) {
  MixArgs *arg1 = (MixArgs *) 0 ;
  long long arg2 ;
  
  arg1 = (MixArgs *)jarg1; 
  arg2 = (long long)jarg2; 
  if (arg1) (arg1)->EsubBeat = arg2;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_EDIT_ARG_MIX_EsubBeat_get(void * jarg1) {
  long long jresult ;
  MixArgs *arg1 = (MixArgs *) 0 ;
  long long result;
  
  arg1 = (MixArgs *)jarg1; 
  result = (long long) ((arg1)->EsubBeat);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EDIT_ARG_MIX_Eseparate_set(void * jarg1, long long jarg2) {
  MixArgs *arg1 = (MixArgs *) 0 ;
  long long arg2 ;
  
  arg1 = (MixArgs *)jarg1; 
  arg2 = (long long)jarg2; 
  if (arg1) (arg1)->Eseparate = arg2;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_EDIT_ARG_MIX_Eseparate_get(void * jarg1) {
  long long jresult ;
  MixArgs *arg1 = (MixArgs *) 0 ;
  long long result;
  
  arg1 = (MixArgs *)jarg1; 
  result = (long long) ((arg1)->Eseparate);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_EDIT_ARG_MIX() {
  void * jresult ;
  MixArgs *result = 0 ;
  
  result = (MixArgs *)new MixArgs();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_EDIT_ARG_MIX(void * jarg1) {
  MixArgs *arg1 = (MixArgs *) 0 ;
  
  arg1 = (MixArgs *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EDIT_ARG_NOTE_Note_Type_set(void * jarg1, const char * jarg2) {
  NoteArgs *arg1 = (NoteArgs *) 0 ;
  SANITIZED_ORNOT *arg2 = 0 ;
  
  arg1 = (NoteArgs *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  SANITIZED_ORNOT arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->Note_Type = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_EDIT_ARG_NOTE_Note_Type_get(void * jarg1) {
  const char * jresult ;
  NoteArgs *arg1 = (NoteArgs *) 0 ;
  SANITIZED_ORNOT *result = 0 ;
  
  arg1 = (NoteArgs *)jarg1; 
  result = (SANITIZED_ORNOT *) & ((arg1)->Note_Type);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EDIT_ARG_NOTE_Note_Detail_set(void * jarg1, const char * jarg2) {
  NoteArgs *arg1 = (NoteArgs *) 0 ;
  SANITIZED_ORNOT *arg2 = 0 ;
  
  arg1 = (NoteArgs *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  SANITIZED_ORNOT arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->Note_Detail = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_EDIT_ARG_NOTE_Note_Detail_get(void * jarg1) {
  const char * jresult ;
  NoteArgs *arg1 = (NoteArgs *) 0 ;
  SANITIZED_ORNOT *result = 0 ;
  
  arg1 = (NoteArgs *)jarg1; 
  result = (SANITIZED_ORNOT *) & ((arg1)->Note_Detail);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EDIT_ARG_NOTE_first_set(void * jarg1, const char * jarg2) {
  NoteArgs *arg1 = (NoteArgs *) 0 ;
  SANITIZED_ORNOT *arg2 = 0 ;
  
  arg1 = (NoteArgs *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  SANITIZED_ORNOT arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->first = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_EDIT_ARG_NOTE_first_get(void * jarg1) {
  const char * jresult ;
  NoteArgs *arg1 = (NoteArgs *) 0 ;
  SANITIZED_ORNOT *result = 0 ;
  
  arg1 = (NoteArgs *)jarg1; 
  result = (SANITIZED_ORNOT *) & ((arg1)->first);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EDIT_ARG_NOTE_second_set(void * jarg1, const char * jarg2) {
  NoteArgs *arg1 = (NoteArgs *) 0 ;
  SANITIZED_ORNOT *arg2 = 0 ;
  
  arg1 = (NoteArgs *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  SANITIZED_ORNOT arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->second = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_EDIT_ARG_NOTE_second_get(void * jarg1) {
  const char * jresult ;
  NoteArgs *arg1 = (NoteArgs *) 0 ;
  SANITIZED_ORNOT *result = 0 ;
  
  arg1 = (NoteArgs *)jarg1; 
  result = (SANITIZED_ORNOT *) & ((arg1)->second);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EDIT_ARG_NOTE_third_set(void * jarg1, const char * jarg2) {
  NoteArgs *arg1 = (NoteArgs *) 0 ;
  SANITIZED_ORNOT *arg2 = 0 ;
  
  arg1 = (NoteArgs *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  SANITIZED_ORNOT arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->third = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_EDIT_ARG_NOTE_third_get(void * jarg1) {
  const char * jresult ;
  NoteArgs *arg1 = (NoteArgs *) 0 ;
  SANITIZED_ORNOT *result = 0 ;
  
  arg1 = (NoteArgs *)jarg1; 
  result = (SANITIZED_ORNOT *) & ((arg1)->third);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EDIT_ARG_NOTE_beat_set(void * jarg1, long long jarg2) {
  NoteArgs *arg1 = (NoteArgs *) 0 ;
  long long arg2 ;
  
  arg1 = (NoteArgs *)jarg1; 
  arg2 = (long long)jarg2; 
  if (arg1) (arg1)->beat = arg2;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_EDIT_ARG_NOTE_beat_get(void * jarg1) {
  long long jresult ;
  NoteArgs *arg1 = (NoteArgs *) 0 ;
  long long result;
  
  arg1 = (NoteArgs *)jarg1; 
  result = (long long) ((arg1)->beat);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EDIT_ARG_NOTE_subBeat_set(void * jarg1, long long jarg2) {
  NoteArgs *arg1 = (NoteArgs *) 0 ;
  long long arg2 ;
  
  arg1 = (NoteArgs *)jarg1; 
  arg2 = (long long)jarg2; 
  if (arg1) (arg1)->subBeat = arg2;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_EDIT_ARG_NOTE_subBeat_get(void * jarg1) {
  long long jresult ;
  NoteArgs *arg1 = (NoteArgs *) 0 ;
  long long result;
  
  arg1 = (NoteArgs *)jarg1; 
  result = (long long) ((arg1)->subBeat);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EDIT_ARG_NOTE_separate_set(void * jarg1, long long jarg2) {
  NoteArgs *arg1 = (NoteArgs *) 0 ;
  long long arg2 ;
  
  arg1 = (NoteArgs *)jarg1; 
  arg2 = (long long)jarg2; 
  if (arg1) (arg1)->separate = arg2;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_EDIT_ARG_NOTE_separate_get(void * jarg1) {
  long long jresult ;
  NoteArgs *arg1 = (NoteArgs *) 0 ;
  long long result;
  
  arg1 = (NoteArgs *)jarg1; 
  result = (long long) ((arg1)->separate);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EDIT_ARG_NOTE_Ebeat_set(void * jarg1, long long jarg2) {
  NoteArgs *arg1 = (NoteArgs *) 0 ;
  long long arg2 ;
  
  arg1 = (NoteArgs *)jarg1; 
  arg2 = (long long)jarg2; 
  if (arg1) (arg1)->Ebeat = arg2;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_EDIT_ARG_NOTE_Ebeat_get(void * jarg1) {
  long long jresult ;
  NoteArgs *arg1 = (NoteArgs *) 0 ;
  long long result;
  
  arg1 = (NoteArgs *)jarg1; 
  result = (long long) ((arg1)->Ebeat);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EDIT_ARG_NOTE_EsubBeat_set(void * jarg1, long long jarg2) {
  NoteArgs *arg1 = (NoteArgs *) 0 ;
  long long arg2 ;
  
  arg1 = (NoteArgs *)jarg1; 
  arg2 = (long long)jarg2; 
  if (arg1) (arg1)->EsubBeat = arg2;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_EDIT_ARG_NOTE_EsubBeat_get(void * jarg1) {
  long long jresult ;
  NoteArgs *arg1 = (NoteArgs *) 0 ;
  long long result;
  
  arg1 = (NoteArgs *)jarg1; 
  result = (long long) ((arg1)->EsubBeat);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EDIT_ARG_NOTE_Eseparate_set(void * jarg1, long long jarg2) {
  NoteArgs *arg1 = (NoteArgs *) 0 ;
  long long arg2 ;
  
  arg1 = (NoteArgs *)jarg1; 
  arg2 = (long long)jarg2; 
  if (arg1) (arg1)->Eseparate = arg2;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_EDIT_ARG_NOTE_Eseparate_get(void * jarg1) {
  long long jresult ;
  NoteArgs *arg1 = (NoteArgs *) 0 ;
  long long result;
  
  arg1 = (NoteArgs *)jarg1; 
  result = (long long) ((arg1)->Eseparate);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_EDIT_ARG_NOTE() {
  void * jresult ;
  NoteArgs *result = 0 ;
  
  result = (NoteArgs *)new NoteArgs();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_EDIT_ARG_NOTE(void * jarg1) {
  NoteArgs *arg1 = (NoteArgs *) 0 ;
  
  arg1 = (NoteArgs *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MusicArgs_bpm_set(void * jarg1, const char * jarg2) {
  MusicArgs *arg1 = (MusicArgs *) 0 ;
  DONT_SANITIZE *arg2 = 0 ;
  
  arg1 = (MusicArgs *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  DONT_SANITIZE arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->bpm = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_MusicArgs_bpm_get(void * jarg1) {
  const char * jresult ;
  MusicArgs *arg1 = (MusicArgs *) 0 ;
  DONT_SANITIZE *result = 0 ;
  
  arg1 = (MusicArgs *)jarg1; 
  result = (DONT_SANITIZE *) & ((arg1)->bpm);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MusicArgs_beat_set(void * jarg1, long long jarg2) {
  MusicArgs *arg1 = (MusicArgs *) 0 ;
  long long arg2 ;
  
  arg1 = (MusicArgs *)jarg1; 
  arg2 = (long long)jarg2; 
  if (arg1) (arg1)->beat = arg2;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_MusicArgs_beat_get(void * jarg1) {
  long long jresult ;
  MusicArgs *arg1 = (MusicArgs *) 0 ;
  long long result;
  
  arg1 = (MusicArgs *)jarg1; 
  result = (long long) ((arg1)->beat);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MusicArgs_subBeat_set(void * jarg1, long long jarg2) {
  MusicArgs *arg1 = (MusicArgs *) 0 ;
  long long arg2 ;
  
  arg1 = (MusicArgs *)jarg1; 
  arg2 = (long long)jarg2; 
  if (arg1) (arg1)->subBeat = arg2;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_MusicArgs_subBeat_get(void * jarg1) {
  long long jresult ;
  MusicArgs *arg1 = (MusicArgs *) 0 ;
  long long result;
  
  arg1 = (MusicArgs *)jarg1; 
  result = (long long) ((arg1)->subBeat);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MusicArgs_separate_set(void * jarg1, long long jarg2) {
  MusicArgs *arg1 = (MusicArgs *) 0 ;
  long long arg2 ;
  
  arg1 = (MusicArgs *)jarg1; 
  arg2 = (long long)jarg2; 
  if (arg1) (arg1)->separate = arg2;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_MusicArgs_separate_get(void * jarg1) {
  long long jresult ;
  MusicArgs *arg1 = (MusicArgs *) 0 ;
  long long result;
  
  arg1 = (MusicArgs *)jarg1; 
  result = (long long) ((arg1)->separate);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MusicArgs() {
  void * jresult ;
  MusicArgs *result = 0 ;
  
  result = (MusicArgs *)new MusicArgs();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MusicArgs(void * jarg1) {
  MusicArgs *arg1 = (MusicArgs *) 0 ;
  
  arg1 = (MusicArgs *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_NoteVisitor(void * jarg1) {
  NoteVisitor *arg1 = (NoteVisitor *) 0 ;
  
  arg1 = (NoteVisitor *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NoteVisitor_on_item(void * jarg1, void * jarg2) {
  NoteVisitor *arg1 = (NoteVisitor *) 0 ;
  EDIT_ARG_NOTE *arg2 = 0 ;
  
  arg1 = (NoteVisitor *)jarg1; 
  arg2 = (EDIT_ARG_NOTE *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "EDIT_ARG_NOTE const & is null", 0);
    return ;
  } 
  (arg1)->on_item((EDIT_ARG_NOTE const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_NoteVisitor() {
  void * jresult ;
  NoteVisitor *result = 0 ;
  
  result = (NoteVisitor *)new SwigDirector_NoteVisitor();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NoteVisitor_director_connect(void *objarg, SwigDirector_NoteVisitor::SWIG_Callback0_t callback0) {
  NoteVisitor *obj = (NoteVisitor *)objarg;
  SwigDirector_NoteVisitor *director = static_cast<SwigDirector_NoteVisitor *>(obj);
  director->swig_connect_director(callback0);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MixVisitor(void * jarg1) {
  MixVisitor *arg1 = (MixVisitor *) 0 ;
  
  arg1 = (MixVisitor *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MixVisitor_on_item(void * jarg1, void * jarg2) {
  MixVisitor *arg1 = (MixVisitor *) 0 ;
  EDIT_ARG_MIX *arg2 = 0 ;
  
  arg1 = (MixVisitor *)jarg1; 
  arg2 = (EDIT_ARG_MIX *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "EDIT_ARG_MIX const & is null", 0);
    return ;
  } 
  (arg1)->on_item((EDIT_ARG_MIX const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MixVisitor() {
  void * jresult ;
  MixVisitor *result = 0 ;
  
  result = (MixVisitor *)new SwigDirector_MixVisitor();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MixVisitor_director_connect(void *objarg, SwigDirector_MixVisitor::SWIG_Callback0_t callback0) {
  MixVisitor *obj = (MixVisitor *)objarg;
  SwigDirector_MixVisitor *director = static_cast<SwigDirector_MixVisitor *>(obj);
  director->swig_connect_director(callback0);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_KVVisitor(void * jarg1) {
  KVVisitor *arg1 = (KVVisitor *) 0 ;
  
  arg1 = (KVVisitor *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_KVVisitor_on_item(void * jarg1, void * jarg2) {
  KVVisitor *arg1 = (KVVisitor *) 0 ;
  EDIT_ARG_KEY_VALUE *arg2 = 0 ;
  
  arg1 = (KVVisitor *)jarg1; 
  arg2 = (EDIT_ARG_KEY_VALUE *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "EDIT_ARG_KEY_VALUE const & is null", 0);
    return ;
  } 
  (arg1)->on_item((EDIT_ARG_KEY_VALUE const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_KVVisitor() {
  void * jresult ;
  KVVisitor *result = 0 ;
  
  result = (KVVisitor *)new SwigDirector_KVVisitor();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_KVVisitor_director_connect(void *objarg, SwigDirector_KVVisitor::SWIG_Callback0_t callback0) {
  KVVisitor *obj = (KVVisitor *)objarg;
  SwigDirector_KVVisitor *director = static_cast<SwigDirector_KVVisitor *>(obj);
  director->swig_connect_director(callback0);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MusicVisitor(void * jarg1) {
  MusicVisitor *arg1 = (MusicVisitor *) 0 ;
  
  arg1 = (MusicVisitor *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MusicVisitor_on_item(void * jarg1, void * jarg2) {
  MusicVisitor *arg1 = (MusicVisitor *) 0 ;
  EDIT_ARG_MUSIC *arg2 = 0 ;
  
  arg1 = (MusicVisitor *)jarg1; 
  arg2 = (EDIT_ARG_MUSIC *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "EDIT_ARG_MUSIC const & is null", 0);
    return ;
  } 
  (arg1)->on_item((EDIT_ARG_MUSIC const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MusicVisitor() {
  void * jresult ;
  MusicVisitor *result = 0 ;
  
  result = (MusicVisitor *)new SwigDirector_MusicVisitor();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MusicVisitor_director_connect(void *objarg, SwigDirector_MusicVisitor::SWIG_Callback0_t callback0) {
  MusicVisitor *obj = (MusicVisitor *)objarg;
  SwigDirector_MusicVisitor *director = static_cast<SwigDirector_MusicVisitor *>(obj);
  director->swig_connect_director(callback0);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MUS_VEC_Clear(void * jarg1) {
  std::vector< musdata > *arg1 = (std::vector< musdata > *) 0 ;
  
  arg1 = (std::vector< musdata > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_MUS_VEC_Add(void * jarg1, void * jarg2) {
  std::vector< musdata > *arg1 = (std::vector< musdata > *) 0 ;
  musdata *arg2 = 0 ;
  
  arg1 = (std::vector< musdata > *)jarg1; 
  arg2 = (musdata *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "musdata const & is null", 0);
    return ;
  } 
  (arg1)->push_back((musdata const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_MUS_VEC_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< musdata > *arg1 = (std::vector< musdata > *) 0 ;
  std::vector< musdata >::size_type result;
  
  arg1 = (std::vector< musdata > *)jarg1; 
  result = ((std::vector< musdata > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_MUS_VEC_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< musdata > *arg1 = (std::vector< musdata > *) 0 ;
  std::vector< musdata >::size_type result;
  
  arg1 = (std::vector< musdata > *)jarg1; 
  result = ((std::vector< musdata > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MUS_VEC_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< musdata > *arg1 = (std::vector< musdata > *) 0 ;
  std::vector< musdata >::size_type arg2 ;
  
  arg1 = (std::vector< musdata > *)jarg1; 
  arg2 = (std::vector< musdata >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MUS_VEC__SWIG_0() {
  void * jresult ;
  std::vector< musdata > *result = 0 ;
  
  result = (std::vector< musdata > *)new std::vector< musdata >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MUS_VEC__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< musdata > *arg1 = 0 ;
  std::vector< musdata > *result = 0 ;
  
  arg1 = (std::vector< musdata > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< musdata > const & is null", 0);
    return 0;
  } 
  result = (std::vector< musdata > *)new std::vector< musdata >((std::vector< musdata > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MUS_VEC__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< musdata > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< musdata > *)new_std_vector_Sl_musdata_Sg___SWIG_2(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MUS_VEC_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< musdata > *arg1 = (std::vector< musdata > *) 0 ;
  int arg2 ;
  musdata result;
  
  arg1 = (std::vector< musdata > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_musdata_Sg__getitemcopy(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = new musdata(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MUS_VEC_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< musdata > *arg1 = (std::vector< musdata > *) 0 ;
  int arg2 ;
  std::vector< musdata >::value_type *result = 0 ;
  
  arg1 = (std::vector< musdata > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< musdata >::value_type *) &std_vector_Sl_musdata_Sg__getitem(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MUS_VEC_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< musdata > *arg1 = (std::vector< musdata > *) 0 ;
  int arg2 ;
  musdata *arg3 = 0 ;
  
  arg1 = (std::vector< musdata > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (musdata *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "musdata const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_musdata_Sg__setitem(arg1,arg2,(musdata const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_MUS_VEC_AddRange(void * jarg1, void * jarg2) {
  std::vector< musdata > *arg1 = (std::vector< musdata > *) 0 ;
  std::vector< musdata > *arg2 = 0 ;
  
  arg1 = (std::vector< musdata > *)jarg1; 
  arg2 = (std::vector< musdata > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< musdata > const & is null", 0);
    return ;
  } 
  std_vector_Sl_musdata_Sg__AddRange(arg1,(std::vector< musdata > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MUS_VEC_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< musdata > *arg1 = (std::vector< musdata > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< musdata > *result = 0 ;
  
  arg1 = (std::vector< musdata > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< musdata > *)std_vector_Sl_musdata_Sg__GetRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MUS_VEC_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< musdata > *arg1 = (std::vector< musdata > *) 0 ;
  int arg2 ;
  musdata *arg3 = 0 ;
  
  arg1 = (std::vector< musdata > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (musdata *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "musdata const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_musdata_Sg__Insert(arg1,arg2,(musdata const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_MUS_VEC_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< musdata > *arg1 = (std::vector< musdata > *) 0 ;
  int arg2 ;
  std::vector< musdata > *arg3 = 0 ;
  
  arg1 = (std::vector< musdata > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< musdata > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< musdata > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_musdata_Sg__InsertRange(arg1,arg2,(std::vector< musdata > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_MUS_VEC_RemoveAt(void * jarg1, int jarg2) {
  std::vector< musdata > *arg1 = (std::vector< musdata > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< musdata > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_musdata_Sg__RemoveAt(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_MUS_VEC_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< musdata > *arg1 = (std::vector< musdata > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< musdata > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_musdata_Sg__RemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MUS_VEC_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  musdata *arg1 = 0 ;
  int arg2 ;
  std::vector< musdata > *result = 0 ;
  
  arg1 = (musdata *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "musdata const & is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< musdata > *)std_vector_Sl_musdata_Sg__Repeat((musdata const &)*arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MUS_VEC_Reverse__SWIG_0(void * jarg1) {
  std::vector< musdata > *arg1 = (std::vector< musdata > *) 0 ;
  
  arg1 = (std::vector< musdata > *)jarg1; 
  std_vector_Sl_musdata_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MUS_VEC_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< musdata > *arg1 = (std::vector< musdata > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< musdata > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_musdata_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_MUS_VEC_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< musdata > *arg1 = (std::vector< musdata > *) 0 ;
  int arg2 ;
  std::vector< musdata > *arg3 = 0 ;
  
  arg1 = (std::vector< musdata > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< musdata > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< musdata > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_musdata_Sg__SetRange(arg1,arg2,(std::vector< musdata > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MUS_VEC(void * jarg1) {
  std::vector< musdata > *arg1 = (std::vector< musdata > *) 0 ;
  
  arg1 = (std::vector< musdata > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TRACK_VEC_Clear(void * jarg1) {
  std::vector< trackdata > *arg1 = (std::vector< trackdata > *) 0 ;
  
  arg1 = (std::vector< trackdata > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_TRACK_VEC_Add(void * jarg1, void * jarg2) {
  std::vector< trackdata > *arg1 = (std::vector< trackdata > *) 0 ;
  trackdata *arg2 = 0 ;
  
  arg1 = (std::vector< trackdata > *)jarg1; 
  arg2 = (trackdata *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "trackdata const & is null", 0);
    return ;
  } 
  (arg1)->push_back((trackdata const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_TRACK_VEC_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< trackdata > *arg1 = (std::vector< trackdata > *) 0 ;
  std::vector< trackdata >::size_type result;
  
  arg1 = (std::vector< trackdata > *)jarg1; 
  result = ((std::vector< trackdata > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_TRACK_VEC_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< trackdata > *arg1 = (std::vector< trackdata > *) 0 ;
  std::vector< trackdata >::size_type result;
  
  arg1 = (std::vector< trackdata > *)jarg1; 
  result = ((std::vector< trackdata > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TRACK_VEC_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< trackdata > *arg1 = (std::vector< trackdata > *) 0 ;
  std::vector< trackdata >::size_type arg2 ;
  
  arg1 = (std::vector< trackdata > *)jarg1; 
  arg2 = (std::vector< trackdata >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TRACK_VEC__SWIG_0() {
  void * jresult ;
  std::vector< trackdata > *result = 0 ;
  
  result = (std::vector< trackdata > *)new std::vector< trackdata >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TRACK_VEC__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< trackdata > *arg1 = 0 ;
  std::vector< trackdata > *result = 0 ;
  
  arg1 = (std::vector< trackdata > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< trackdata > const & is null", 0);
    return 0;
  } 
  result = (std::vector< trackdata > *)new std::vector< trackdata >((std::vector< trackdata > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TRACK_VEC__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< trackdata > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< trackdata > *)new_std_vector_Sl_trackdata_Sg___SWIG_2(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TRACK_VEC_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< trackdata > *arg1 = (std::vector< trackdata > *) 0 ;
  int arg2 ;
  trackdata result;
  
  arg1 = (std::vector< trackdata > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_trackdata_Sg__getitemcopy(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = new trackdata(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TRACK_VEC_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< trackdata > *arg1 = (std::vector< trackdata > *) 0 ;
  int arg2 ;
  std::vector< trackdata >::value_type *result = 0 ;
  
  arg1 = (std::vector< trackdata > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< trackdata >::value_type *) &std_vector_Sl_trackdata_Sg__getitem(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TRACK_VEC_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< trackdata > *arg1 = (std::vector< trackdata > *) 0 ;
  int arg2 ;
  trackdata *arg3 = 0 ;
  
  arg1 = (std::vector< trackdata > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (trackdata *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "trackdata const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_trackdata_Sg__setitem(arg1,arg2,(trackdata const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TRACK_VEC_AddRange(void * jarg1, void * jarg2) {
  std::vector< trackdata > *arg1 = (std::vector< trackdata > *) 0 ;
  std::vector< trackdata > *arg2 = 0 ;
  
  arg1 = (std::vector< trackdata > *)jarg1; 
  arg2 = (std::vector< trackdata > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< trackdata > const & is null", 0);
    return ;
  } 
  std_vector_Sl_trackdata_Sg__AddRange(arg1,(std::vector< trackdata > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TRACK_VEC_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< trackdata > *arg1 = (std::vector< trackdata > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< trackdata > *result = 0 ;
  
  arg1 = (std::vector< trackdata > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< trackdata > *)std_vector_Sl_trackdata_Sg__GetRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TRACK_VEC_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< trackdata > *arg1 = (std::vector< trackdata > *) 0 ;
  int arg2 ;
  trackdata *arg3 = 0 ;
  
  arg1 = (std::vector< trackdata > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (trackdata *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "trackdata const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_trackdata_Sg__Insert(arg1,arg2,(trackdata const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TRACK_VEC_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< trackdata > *arg1 = (std::vector< trackdata > *) 0 ;
  int arg2 ;
  std::vector< trackdata > *arg3 = 0 ;
  
  arg1 = (std::vector< trackdata > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< trackdata > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< trackdata > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_trackdata_Sg__InsertRange(arg1,arg2,(std::vector< trackdata > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TRACK_VEC_RemoveAt(void * jarg1, int jarg2) {
  std::vector< trackdata > *arg1 = (std::vector< trackdata > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< trackdata > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_trackdata_Sg__RemoveAt(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TRACK_VEC_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< trackdata > *arg1 = (std::vector< trackdata > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< trackdata > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_trackdata_Sg__RemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TRACK_VEC_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  trackdata *arg1 = 0 ;
  int arg2 ;
  std::vector< trackdata > *result = 0 ;
  
  arg1 = (trackdata *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "trackdata const & is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< trackdata > *)std_vector_Sl_trackdata_Sg__Repeat((trackdata const &)*arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TRACK_VEC_Reverse__SWIG_0(void * jarg1) {
  std::vector< trackdata > *arg1 = (std::vector< trackdata > *) 0 ;
  
  arg1 = (std::vector< trackdata > *)jarg1; 
  std_vector_Sl_trackdata_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TRACK_VEC_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< trackdata > *arg1 = (std::vector< trackdata > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< trackdata > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_trackdata_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TRACK_VEC_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< trackdata > *arg1 = (std::vector< trackdata > *) 0 ;
  int arg2 ;
  std::vector< trackdata > *arg3 = 0 ;
  
  arg1 = (std::vector< trackdata > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< trackdata > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< trackdata > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_trackdata_Sg__SetRange(arg1,arg2,(std::vector< trackdata > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TRACK_VEC(void * jarg1) {
  std::vector< trackdata > *arg1 = (std::vector< trackdata > *) 0 ;
  
  arg1 = (std::vector< trackdata > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_KEY_VEC_Clear(void * jarg1) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_KEY_VEC_Add(void * jarg1, const char * jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->push_back((std::string const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_KEY_VEC_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type result;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  result = ((std::vector< std::string > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_KEY_VEC_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type result;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  result = ((std::vector< std::string > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_KEY_VEC_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type arg2 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (std::vector< std::string >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_KEY_VEC__SWIG_0() {
  void * jresult ;
  std::vector< std::string > *result = 0 ;
  
  result = (std::vector< std::string > *)new std::vector< std::string >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_KEY_VEC__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< std::string > *arg1 = 0 ;
  std::vector< std::string > *result = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > const & is null", 0);
    return 0;
  } 
  result = (std::vector< std::string > *)new std::vector< std::string >((std::vector< std::string > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_KEY_VEC__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< std::string > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< std::string > *)new_std_vector_Sl_std_string_Sg___SWIG_2(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_KEY_VEC_getitemcopy(void * jarg1, int jarg2) {
  const char * jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::string result;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_std_string_Sg__getitemcopy(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_KEY_VEC_getitem(void * jarg1, int jarg2) {
  const char * jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::vector< std::string >::value_type *result = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< std::string >::value_type *) &std_vector_Sl_std_string_Sg__getitem(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_KEY_VEC_setitem(void * jarg1, int jarg2, const char * jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::string *arg3 = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  try {
    std_vector_Sl_std_string_Sg__setitem(arg1,arg2,(std::string const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_KEY_VEC_AddRange(void * jarg1, void * jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string > *arg2 = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (std::vector< std::string > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > const & is null", 0);
    return ;
  } 
  std_vector_Sl_std_string_Sg__AddRange(arg1,(std::vector< std::string > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_KEY_VEC_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< std::string > *result = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< std::string > *)std_vector_Sl_std_string_Sg__GetRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_KEY_VEC_Insert(void * jarg1, int jarg2, const char * jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::string *arg3 = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  try {
    std_vector_Sl_std_string_Sg__Insert(arg1,arg2,(std::string const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_KEY_VEC_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::vector< std::string > *arg3 = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< std::string > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_std_string_Sg__InsertRange(arg1,arg2,(std::vector< std::string > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_KEY_VEC_RemoveAt(void * jarg1, int jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_std_string_Sg__RemoveAt(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_KEY_VEC_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_std_string_Sg__RemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_KEY_VEC_Repeat(const char * jarg1, int jarg2) {
  void * jresult ;
  std::string *arg1 = 0 ;
  int arg2 ;
  std::vector< std::string > *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< std::string > *)std_vector_Sl_std_string_Sg__Repeat((std::string const &)*arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_KEY_VEC_Reverse__SWIG_0(void * jarg1) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  std_vector_Sl_std_string_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_KEY_VEC_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_std_string_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_KEY_VEC_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::vector< std::string > *arg3 = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< std::string > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_std_string_Sg__SetRange(arg1,arg2,(std::vector< std::string > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_KEY_VEC_Contains(void * jarg1, const char * jarg2) {
  unsigned int jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)std_vector_Sl_std_string_Sg__Contains(arg1,(std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_KEY_VEC_IndexOf(void * jarg1, const char * jarg2) {
  int jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (int)std_vector_Sl_std_string_Sg__IndexOf(arg1,(std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_KEY_VEC_LastIndexOf(void * jarg1, const char * jarg2) {
  int jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (int)std_vector_Sl_std_string_Sg__LastIndexOf(arg1,(std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_KEY_VEC_Remove(void * jarg1, const char * jarg2) {
  unsigned int jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)std_vector_Sl_std_string_Sg__Remove(arg1,(std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_KEY_VEC(void * jarg1) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  delete arg1;
}


#ifdef __cplusplus
}
#endif

