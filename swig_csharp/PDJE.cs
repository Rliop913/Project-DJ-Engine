//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.3.0
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class PDJE : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal PDJE(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(PDJE obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(PDJE obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~PDJE() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          pdje_POLYGLOTPINVOKE.delete_PDJE(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public PDJE(SWIGTYPE_p_std__string rootPath) : this(pdje_POLYGLOTPINVOKE.new_PDJE(SWIGTYPE_p_std__string.getCPtr(rootPath)), true) {
    if (pdje_POLYGLOTPINVOKE.SWIGPendingException.Pending) throw pdje_POLYGLOTPINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_std__optionalT_audioPlayer_t player {
    set {
      pdje_POLYGLOTPINVOKE.PDJE_player_set(swigCPtr, SWIGTYPE_p_std__optionalT_audioPlayer_t.getCPtr(value));
      if (pdje_POLYGLOTPINVOKE.SWIGPendingException.Pending) throw pdje_POLYGLOTPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_std__optionalT_audioPlayer_t ret = new SWIGTYPE_p_std__optionalT_audioPlayer_t(pdje_POLYGLOTPINVOKE.PDJE_player_get(swigCPtr), true);
      if (pdje_POLYGLOTPINVOKE.SWIGPendingException.Pending) throw pdje_POLYGLOTPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public bool InitPlayer(PLAY_MODE mode, SWIGTYPE_p_trackdata td, uint FrameBufferSize) {
    bool ret = pdje_POLYGLOTPINVOKE.PDJE_InitPlayer(swigCPtr, (int)mode, SWIGTYPE_p_trackdata.getCPtr(td), FrameBufferSize);
    if (pdje_POLYGLOTPINVOKE.SWIGPendingException.Pending) throw pdje_POLYGLOTPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool GetNoteObjects(SWIGTYPE_p_trackdata td, SWIGTYPE_p_OBJ_SETTER_CALLBACK ObjectSetCallback) {
    bool ret = pdje_POLYGLOTPINVOKE.PDJE_GetNoteObjects(swigCPtr, SWIGTYPE_p_trackdata.getCPtr(td), SWIGTYPE_p_OBJ_SETTER_CALLBACK.getCPtr(ObjectSetCallback));
    if (pdje_POLYGLOTPINVOKE.SWIGPendingException.Pending) throw pdje_POLYGLOTPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_MAYBE_MUS_VEC SearchMusic(SWIGTYPE_p_std__string Title, SWIGTYPE_p_std__string composer, double bpm) {
    SWIGTYPE_p_MAYBE_MUS_VEC ret = new SWIGTYPE_p_MAYBE_MUS_VEC(pdje_POLYGLOTPINVOKE.PDJE_SearchMusic__SWIG_0(swigCPtr, SWIGTYPE_p_std__string.getCPtr(Title), SWIGTYPE_p_std__string.getCPtr(composer), bpm), true);
    if (pdje_POLYGLOTPINVOKE.SWIGPendingException.Pending) throw pdje_POLYGLOTPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_MAYBE_MUS_VEC SearchMusic(SWIGTYPE_p_std__string Title, SWIGTYPE_p_std__string composer) {
    SWIGTYPE_p_MAYBE_MUS_VEC ret = new SWIGTYPE_p_MAYBE_MUS_VEC(pdje_POLYGLOTPINVOKE.PDJE_SearchMusic__SWIG_1(swigCPtr, SWIGTYPE_p_std__string.getCPtr(Title), SWIGTYPE_p_std__string.getCPtr(composer)), true);
    if (pdje_POLYGLOTPINVOKE.SWIGPendingException.Pending) throw pdje_POLYGLOTPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_MAYBE_TRACK_VEC SearchTrack(SWIGTYPE_p_std__string Title) {
    SWIGTYPE_p_MAYBE_TRACK_VEC ret = new SWIGTYPE_p_MAYBE_TRACK_VEC(pdje_POLYGLOTPINVOKE.PDJE_SearchTrack(swigCPtr, SWIGTYPE_p_std__string.getCPtr(Title)), true);
    if (pdje_POLYGLOTPINVOKE.SWIGPendingException.Pending) throw pdje_POLYGLOTPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
