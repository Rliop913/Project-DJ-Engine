//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.1.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class PDJE : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal PDJE(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(PDJE obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(PDJE obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~PDJE() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          pdje_POLYGLOTPINVOKE.delete_PDJE(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public litedb DBROOT {
    set {
      pdje_POLYGLOTPINVOKE.PDJE_DBROOT_set(swigCPtr, litedb.getCPtr(value));
      if (pdje_POLYGLOTPINVOKE.SWIGPendingException.Pending) throw pdje_POLYGLOTPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = pdje_POLYGLOTPINVOKE.PDJE_DBROOT_get(swigCPtr);
      litedb ret = (cPtr == global::System.IntPtr.Zero) ? null : new litedb(cPtr, true);
      if (pdje_POLYGLOTPINVOKE.SWIGPendingException.Pending) throw pdje_POLYGLOTPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public PDJE(string rootDir) : this(pdje_POLYGLOTPINVOKE.new_PDJE(rootDir), true) {
    if (pdje_POLYGLOTPINVOKE.SWIGPendingException.Pending) throw pdje_POLYGLOTPINVOKE.SWIGPendingException.Retrieve();
  }

  public audioPlayer player {
    set {
      pdje_POLYGLOTPINVOKE.PDJE_player_set(swigCPtr, audioPlayer.getCPtr(value));
      if (pdje_POLYGLOTPINVOKE.SWIGPendingException.Pending) throw pdje_POLYGLOTPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = pdje_POLYGLOTPINVOKE.PDJE_player_get(swigCPtr);
      audioPlayer ret = (cPtr == global::System.IntPtr.Zero) ? null : new audioPlayer(cPtr, true);
      if (pdje_POLYGLOTPINVOKE.SWIGPendingException.Pending) throw pdje_POLYGLOTPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public editorObject editor {
    set {
      pdje_POLYGLOTPINVOKE.PDJE_editor_set(swigCPtr, editorObject.getCPtr(value));
      if (pdje_POLYGLOTPINVOKE.SWIGPendingException.Pending) throw pdje_POLYGLOTPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = pdje_POLYGLOTPINVOKE.PDJE_editor_get(swigCPtr);
      editorObject ret = (cPtr == global::System.IntPtr.Zero) ? null : new editorObject(cPtr, true);
      if (pdje_POLYGLOTPINVOKE.SWIGPendingException.Pending) throw pdje_POLYGLOTPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public bool InitPlayer(PLAY_MODE mode, trackdata td, uint FrameBufferSize) {
    bool ret = pdje_POLYGLOTPINVOKE.PDJE_InitPlayer(swigCPtr, (int)mode, trackdata.getCPtr(td), FrameBufferSize);
    if (pdje_POLYGLOTPINVOKE.SWIGPendingException.Pending) throw pdje_POLYGLOTPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void ResetPlayer() {
    pdje_POLYGLOTPINVOKE.PDJE_ResetPlayer(swigCPtr);
  }

  public void CloseEditor() {
    pdje_POLYGLOTPINVOKE.PDJE_CloseEditor(swigCPtr);
  }

  public SWIGTYPE_p_PDJE_CORE_DATA_LINE PullOutDataLine() {
    SWIGTYPE_p_PDJE_CORE_DATA_LINE ret = new SWIGTYPE_p_PDJE_CORE_DATA_LINE(pdje_POLYGLOTPINVOKE.PDJE_PullOutDataLine(swigCPtr), true);
    return ret;
  }

  public bool InitEditor(string auth_name, string auth_email, string projectRoot) {
    bool ret = pdje_POLYGLOTPINVOKE.PDJE_InitEditor(swigCPtr, auth_name, auth_email, projectRoot);
    if (pdje_POLYGLOTPINVOKE.SWIGPendingException.Pending) throw pdje_POLYGLOTPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool GetNoteObjects(trackdata td, SWIGTYPE_p_OBJ_SETTER_CALLBACK ObjectSetCallback) {
    bool ret = pdje_POLYGLOTPINVOKE.PDJE_GetNoteObjects(swigCPtr, trackdata.getCPtr(td), SWIGTYPE_p_OBJ_SETTER_CALLBACK.getCPtr(ObjectSetCallback));
    if (pdje_POLYGLOTPINVOKE.SWIGPendingException.Pending) throw pdje_POLYGLOTPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public MUS_VEC SearchMusic(string Title, string composer, double bpm) {
    MUS_VEC ret = new MUS_VEC(pdje_POLYGLOTPINVOKE.PDJE_SearchMusic__SWIG_0(swigCPtr, Title, composer, bpm), true);
    if (pdje_POLYGLOTPINVOKE.SWIGPendingException.Pending) throw pdje_POLYGLOTPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public MUS_VEC SearchMusic(string Title, string composer) {
    MUS_VEC ret = new MUS_VEC(pdje_POLYGLOTPINVOKE.PDJE_SearchMusic__SWIG_1(swigCPtr, Title, composer), true);
    if (pdje_POLYGLOTPINVOKE.SWIGPendingException.Pending) throw pdje_POLYGLOTPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public TRACK_VEC SearchTrack(string Title) {
    TRACK_VEC ret = new TRACK_VEC(pdje_POLYGLOTPINVOKE.PDJE_SearchTrack(swigCPtr, Title), true);
    if (pdje_POLYGLOTPINVOKE.SWIGPendingException.Pending) throw pdje_POLYGLOTPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public audioPlayer GetPlayerObject() {
    global::System.IntPtr cPtr = pdje_POLYGLOTPINVOKE.PDJE_GetPlayerObject(swigCPtr);
    audioPlayer ret = (cPtr == global::System.IntPtr.Zero) ? null : new audioPlayer(cPtr, true);
    return ret;
  }

  public editorObject GetEditorObject() {
    global::System.IntPtr cPtr = pdje_POLYGLOTPINVOKE.PDJE_GetEditorObject(swigCPtr);
    editorObject ret = (cPtr == global::System.IntPtr.Zero) ? null : new editorObject(cPtr, true);
    return ret;
  }

}
