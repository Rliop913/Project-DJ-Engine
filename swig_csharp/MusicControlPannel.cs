//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.3.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class MusicControlPannel : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal MusicControlPannel(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(MusicControlPannel obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(MusicControlPannel obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~MusicControlPannel() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          pdje_POLYGLOTPINVOKE.delete_MusicControlPannel(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public bool LoadMusic(litedb ROOTDB, musdata Mus) {
    bool ret = pdje_POLYGLOTPINVOKE.MusicControlPannel_LoadMusic(swigCPtr, litedb.getCPtr(ROOTDB), musdata.getCPtr(Mus));
    if (pdje_POLYGLOTPINVOKE.SWIGPendingException.Pending) throw pdje_POLYGLOTPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool CueMusic(string title, ulong newPos) {
    bool ret = pdje_POLYGLOTPINVOKE.MusicControlPannel_CueMusic(swigCPtr, title, newPos);
    if (pdje_POLYGLOTPINVOKE.SWIGPendingException.Pending) throw pdje_POLYGLOTPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool SetMusic(string title, bool onOff) {
    bool ret = pdje_POLYGLOTPINVOKE.MusicControlPannel_SetMusic(swigCPtr, title, onOff);
    if (pdje_POLYGLOTPINVOKE.SWIGPendingException.Pending) throw pdje_POLYGLOTPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public KEY_VEC GetLoadedMusicList() {
    KEY_VEC ret = new KEY_VEC(pdje_POLYGLOTPINVOKE.MusicControlPannel_GetLoadedMusicList(swigCPtr), true);
    return ret;
  }

  public bool UnloadMusic(string title) {
    bool ret = pdje_POLYGLOTPINVOKE.MusicControlPannel_UnloadMusic(swigCPtr, title);
    if (pdje_POLYGLOTPINVOKE.SWIGPendingException.Pending) throw pdje_POLYGLOTPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool GetPCMFrames(SWIGTYPE_p_float array, uint FrameSize) {
    bool ret = pdje_POLYGLOTPINVOKE.MusicControlPannel_GetPCMFrames(swigCPtr, SWIGTYPE_p_float.getCPtr(array), FrameSize);
    return ret;
  }

  public FXControlPannel getFXHandle(string title) {
    global::System.IntPtr cPtr = pdje_POLYGLOTPINVOKE.MusicControlPannel_getFXHandle(swigCPtr, title);
    FXControlPannel ret = (cPtr == global::System.IntPtr.Zero) ? null : new FXControlPannel(cPtr, false);
    if (pdje_POLYGLOTPINVOKE.SWIGPendingException.Pending) throw pdje_POLYGLOTPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool ChangeBpm(string title, double targetBpm, double originBpm) {
    bool ret = pdje_POLYGLOTPINVOKE.MusicControlPannel_ChangeBpm(swigCPtr, title, targetBpm, originBpm);
    if (pdje_POLYGLOTPINVOKE.SWIGPendingException.Pending) throw pdje_POLYGLOTPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public MusicControlPannel(uint FrameSize) : this(pdje_POLYGLOTPINVOKE.new_MusicControlPannel(FrameSize), true) {
  }

}
