//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.3.0
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class musdata : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal musdata(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(musdata obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(musdata obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~musdata() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          pdje_POLYGLOTPINVOKE.delete_musdata(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public string title {
    set {
      pdje_POLYGLOTPINVOKE.musdata_title_set(swigCPtr, value);
      if (pdje_POLYGLOTPINVOKE.SWIGPendingException.Pending) throw pdje_POLYGLOTPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = pdje_POLYGLOTPINVOKE.musdata_title_get(swigCPtr);
      if (pdje_POLYGLOTPINVOKE.SWIGPendingException.Pending) throw pdje_POLYGLOTPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public string composer {
    set {
      pdje_POLYGLOTPINVOKE.musdata_composer_set(swigCPtr, value);
      if (pdje_POLYGLOTPINVOKE.SWIGPendingException.Pending) throw pdje_POLYGLOTPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = pdje_POLYGLOTPINVOKE.musdata_composer_get(swigCPtr);
      if (pdje_POLYGLOTPINVOKE.SWIGPendingException.Pending) throw pdje_POLYGLOTPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public string musicPath {
    set {
      pdje_POLYGLOTPINVOKE.musdata_musicPath_set(swigCPtr, value);
      if (pdje_POLYGLOTPINVOKE.SWIGPendingException.Pending) throw pdje_POLYGLOTPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = pdje_POLYGLOTPINVOKE.musdata_musicPath_get(swigCPtr);
      if (pdje_POLYGLOTPINVOKE.SWIGPendingException.Pending) throw pdje_POLYGLOTPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_BIN bpmBinary {
    set {
      pdje_POLYGLOTPINVOKE.musdata_bpmBinary_set(swigCPtr, SWIGTYPE_p_BIN.getCPtr(value));
      if (pdje_POLYGLOTPINVOKE.SWIGPendingException.Pending) throw pdje_POLYGLOTPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_BIN ret = new SWIGTYPE_p_BIN(pdje_POLYGLOTPINVOKE.musdata_bpmBinary_get(swigCPtr), true);
      if (pdje_POLYGLOTPINVOKE.SWIGPendingException.Pending) throw pdje_POLYGLOTPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public double bpm {
    set {
      pdje_POLYGLOTPINVOKE.musdata_bpm_set(swigCPtr, value);
    } 
    get {
      double ret = pdje_POLYGLOTPINVOKE.musdata_bpm_get(swigCPtr);
      return ret;
    } 
  }

  public string firstBar {
    set {
      pdje_POLYGLOTPINVOKE.musdata_firstBar_set(swigCPtr, value);
      if (pdje_POLYGLOTPINVOKE.SWIGPendingException.Pending) throw pdje_POLYGLOTPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = pdje_POLYGLOTPINVOKE.musdata_firstBar_get(swigCPtr);
      if (pdje_POLYGLOTPINVOKE.SWIGPendingException.Pending) throw pdje_POLYGLOTPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public musdata(SWIGTYPE_p_stmt dbstate) : this(pdje_POLYGLOTPINVOKE.new_musdata__SWIG_0(SWIGTYPE_p_stmt.getCPtr(dbstate)), true) {
  }

  public musdata(string title__, string composer__, string musicPath__, double bpm__) : this(pdje_POLYGLOTPINVOKE.new_musdata__SWIG_1(title__, composer__, musicPath__, bpm__), true) {
    if (pdje_POLYGLOTPINVOKE.SWIGPendingException.Pending) throw pdje_POLYGLOTPINVOKE.SWIGPendingException.Retrieve();
  }

  public musdata(string title__, string composer__, string musicPath__) : this(pdje_POLYGLOTPINVOKE.new_musdata__SWIG_2(title__, composer__, musicPath__), true) {
    if (pdje_POLYGLOTPINVOKE.SWIGPendingException.Pending) throw pdje_POLYGLOTPINVOKE.SWIGPendingException.Retrieve();
  }

  public musdata(string title__, string composer__) : this(pdje_POLYGLOTPINVOKE.new_musdata__SWIG_3(title__, composer__), true) {
    if (pdje_POLYGLOTPINVOKE.SWIGPendingException.Pending) throw pdje_POLYGLOTPINVOKE.SWIGPendingException.Retrieve();
  }

  public musdata(string title__) : this(pdje_POLYGLOTPINVOKE.new_musdata__SWIG_4(title__), true) {
    if (pdje_POLYGLOTPINVOKE.SWIGPendingException.Pending) throw pdje_POLYGLOTPINVOKE.SWIGPendingException.Retrieve();
  }

  public musdata() : this(pdje_POLYGLOTPINVOKE.new_musdata__SWIG_5(), true) {
  }

  public bool GenSearchSTMT(SWIGTYPE_p_stmt dbstate, SWIGTYPE_p_sqlite3 db) {
    bool ret = pdje_POLYGLOTPINVOKE.musdata_GenSearchSTMT(swigCPtr, SWIGTYPE_p_stmt.getCPtr(dbstate), SWIGTYPE_p_sqlite3.getCPtr(db));
    if (pdje_POLYGLOTPINVOKE.SWIGPendingException.Pending) throw pdje_POLYGLOTPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool GenInsertSTMT(SWIGTYPE_p_stmt dbstate, SWIGTYPE_p_sqlite3 db) {
    bool ret = pdje_POLYGLOTPINVOKE.musdata_GenInsertSTMT(swigCPtr, SWIGTYPE_p_stmt.getCPtr(dbstate), SWIGTYPE_p_sqlite3.getCPtr(db));
    if (pdje_POLYGLOTPINVOKE.SWIGPendingException.Pending) throw pdje_POLYGLOTPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool GenEditSTMT(SWIGTYPE_p_stmt dbstate, SWIGTYPE_p_sqlite3 db, musdata toEdit) {
    bool ret = pdje_POLYGLOTPINVOKE.musdata_GenEditSTMT(swigCPtr, SWIGTYPE_p_stmt.getCPtr(dbstate), SWIGTYPE_p_sqlite3.getCPtr(db), musdata.getCPtr(toEdit));
    if (pdje_POLYGLOTPINVOKE.SWIGPendingException.Pending) throw pdje_POLYGLOTPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool GenDeleteSTMT(SWIGTYPE_p_stmt dbstate, SWIGTYPE_p_sqlite3 db) {
    bool ret = pdje_POLYGLOTPINVOKE.musdata_GenDeleteSTMT(swigCPtr, SWIGTYPE_p_stmt.getCPtr(dbstate), SWIGTYPE_p_sqlite3.getCPtr(db));
    if (pdje_POLYGLOTPINVOKE.SWIGPendingException.Pending) throw pdje_POLYGLOTPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
