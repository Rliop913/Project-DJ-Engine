//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.1.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class editorObject : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnBase;

  internal editorObject(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwnBase = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(editorObject obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~editorObject() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnBase) {
          swigCMemOwnBase = false;
          pdje_POLYGLOTPINVOKE.delete_editorObject(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public SWIGTYPE_p_git_repository getMixRepo() {
    global::System.IntPtr cPtr = pdje_POLYGLOTPINVOKE.editorObject_getMixRepo(swigCPtr);
    SWIGTYPE_p_git_repository ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_git_repository(cPtr, false);
    if (pdje_POLYGLOTPINVOKE.SWIGPendingException.Pending) throw pdje_POLYGLOTPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_git_repository getMusicRepo(string Title) {
    global::System.IntPtr cPtr = pdje_POLYGLOTPINVOKE.editorObject_getMusicRepo(swigCPtr, Title);
    SWIGTYPE_p_git_repository ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_git_repository(cPtr, false);
    if (pdje_POLYGLOTPINVOKE.SWIGPendingException.Pending) throw pdje_POLYGLOTPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_git_repository getNoteRepo() {
    global::System.IntPtr cPtr = pdje_POLYGLOTPINVOKE.editorObject_getNoteRepo(swigCPtr);
    SWIGTYPE_p_git_repository ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_git_repository(cPtr, false);
    if (pdje_POLYGLOTPINVOKE.SWIGPendingException.Pending) throw pdje_POLYGLOTPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_git_repository getKVRepo() {
    global::System.IntPtr cPtr = pdje_POLYGLOTPINVOKE.editorObject_getKVRepo(swigCPtr);
    SWIGTYPE_p_git_repository ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_git_repository(cPtr, false);
    if (pdje_POLYGLOTPINVOKE.SWIGPendingException.Pending) throw pdje_POLYGLOTPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool AddLine(string musicName, string firstBeat) {
    bool ret = pdje_POLYGLOTPINVOKE.editorObject_AddLine(swigCPtr, musicName, firstBeat);
    if (pdje_POLYGLOTPINVOKE.SWIGPendingException.Pending) throw pdje_POLYGLOTPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int deleteLine(EDIT_ARG_MIX obj, bool skipType, bool skipDetail) {
    int ret = pdje_POLYGLOTPINVOKE.editorObject_deleteLine(swigCPtr, EDIT_ARG_MIX.getCPtr(obj), skipType, skipDetail);
    if (pdje_POLYGLOTPINVOKE.SWIGPendingException.Pending) throw pdje_POLYGLOTPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool render(string trackTitle, litedb ROOTDB) {
    bool ret = pdje_POLYGLOTPINVOKE.editorObject_render(swigCPtr, trackTitle, litedb.getCPtr(ROOTDB));
    if (pdje_POLYGLOTPINVOKE.SWIGPendingException.Pending) throw pdje_POLYGLOTPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void demoPlayInit(audioPlayer player, uint frameBufferSize, string trackTitle) {
    pdje_POLYGLOTPINVOKE.editorObject_demoPlayInit(swigCPtr, audioPlayer.getCPtr(player), frameBufferSize, trackTitle);
    if (pdje_POLYGLOTPINVOKE.SWIGPendingException.Pending) throw pdje_POLYGLOTPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool pushToRootDB(litedb ROOTDB, string trackTitleToPush) {
    bool ret = pdje_POLYGLOTPINVOKE.editorObject_pushToRootDB__SWIG_0(swigCPtr, litedb.getCPtr(ROOTDB), trackTitleToPush);
    if (pdje_POLYGLOTPINVOKE.SWIGPendingException.Pending) throw pdje_POLYGLOTPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool pushToRootDB(litedb ROOTDB, string musicTitle, string musicComposer) {
    bool ret = pdje_POLYGLOTPINVOKE.editorObject_pushToRootDB__SWIG_1(swigCPtr, litedb.getCPtr(ROOTDB), musicTitle, musicComposer);
    if (pdje_POLYGLOTPINVOKE.SWIGPendingException.Pending) throw pdje_POLYGLOTPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string DESTROY_PROJECT() {
    string ret = pdje_POLYGLOTPINVOKE.editorObject_DESTROY_PROJECT(swigCPtr);
    if (pdje_POLYGLOTPINVOKE.SWIGPendingException.Pending) throw pdje_POLYGLOTPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool ConfigNewMusic(string NewMusicName, string composer, SWIGTYPE_p_std__filesystem__path musicPath, string firstBeat) {
    bool ret = pdje_POLYGLOTPINVOKE.editorObject_ConfigNewMusic__SWIG_0(swigCPtr, NewMusicName, composer, SWIGTYPE_p_std__filesystem__path.getCPtr(musicPath), firstBeat);
    if (pdje_POLYGLOTPINVOKE.SWIGPendingException.Pending) throw pdje_POLYGLOTPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool ConfigNewMusic(string NewMusicName, string composer, SWIGTYPE_p_std__filesystem__path musicPath) {
    bool ret = pdje_POLYGLOTPINVOKE.editorObject_ConfigNewMusic__SWIG_1(swigCPtr, NewMusicName, composer, SWIGTYPE_p_std__filesystem__path.getCPtr(musicPath));
    if (pdje_POLYGLOTPINVOKE.SWIGPendingException.Pending) throw pdje_POLYGLOTPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool Open(SWIGTYPE_p_std__filesystem__path projectPath) {
    bool ret = pdje_POLYGLOTPINVOKE.editorObject_Open(swigCPtr, SWIGTYPE_p_std__filesystem__path.getCPtr(projectPath));
    if (pdje_POLYGLOTPINVOKE.SWIGPendingException.Pending) throw pdje_POLYGLOTPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public editorObject(string auth_name, string auth_email) : this(pdje_POLYGLOTPINVOKE.new_editorObject(auth_name, auth_email), true) {
    if (pdje_POLYGLOTPINVOKE.SWIGPendingException.Pending) throw pdje_POLYGLOTPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool AddLineNote(EDIT_ARG_NOTE obj) {
    bool ret = pdje_POLYGLOTPINVOKE.editorObject_AddLineNote(swigCPtr, EDIT_ARG_NOTE.getCPtr(obj));
    if (pdje_POLYGLOTPINVOKE.SWIGPendingException.Pending) throw pdje_POLYGLOTPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool AddLineMix(EDIT_ARG_MIX obj) {
    bool ret = pdje_POLYGLOTPINVOKE.editorObject_AddLineMix(swigCPtr, EDIT_ARG_MIX.getCPtr(obj));
    if (pdje_POLYGLOTPINVOKE.SWIGPendingException.Pending) throw pdje_POLYGLOTPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool AddLineKV(EDIT_ARG_KEY_VALUE obj) {
    bool ret = pdje_POLYGLOTPINVOKE.editorObject_AddLineKV(swigCPtr, EDIT_ARG_KEY_VALUE.getCPtr(obj));
    if (pdje_POLYGLOTPINVOKE.SWIGPendingException.Pending) throw pdje_POLYGLOTPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool AddLineMusic(EDIT_ARG_MUSIC obj) {
    bool ret = pdje_POLYGLOTPINVOKE.editorObject_AddLineMusic(swigCPtr, EDIT_ARG_MUSIC.getCPtr(obj));
    if (pdje_POLYGLOTPINVOKE.SWIGPendingException.Pending) throw pdje_POLYGLOTPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int deleteLineNote(EDIT_ARG_NOTE obj) {
    int ret = pdje_POLYGLOTPINVOKE.editorObject_deleteLineNote(swigCPtr, EDIT_ARG_NOTE.getCPtr(obj));
    if (pdje_POLYGLOTPINVOKE.SWIGPendingException.Pending) throw pdje_POLYGLOTPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int deleteLineKV(EDIT_ARG_KEY_VALUE obj) {
    int ret = pdje_POLYGLOTPINVOKE.editorObject_deleteLineKV(swigCPtr, EDIT_ARG_KEY_VALUE.getCPtr(obj));
    if (pdje_POLYGLOTPINVOKE.SWIGPendingException.Pending) throw pdje_POLYGLOTPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int deleteLineMusic(EDIT_ARG_MUSIC obj) {
    int ret = pdje_POLYGLOTPINVOKE.editorObject_deleteLineMusic(swigCPtr, EDIT_ARG_MUSIC.getCPtr(obj));
    if (pdje_POLYGLOTPINVOKE.SWIGPendingException.Pending) throw pdje_POLYGLOTPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void GetAllNotes(NoteVisitor v) {
    pdje_POLYGLOTPINVOKE.editorObject_GetAllNotes(swigCPtr, NoteVisitor.getCPtr(v));
    if (pdje_POLYGLOTPINVOKE.SWIGPendingException.Pending) throw pdje_POLYGLOTPINVOKE.SWIGPendingException.Retrieve();
  }

  public void GetAllMixes(MixVisitor v) {
    pdje_POLYGLOTPINVOKE.editorObject_GetAllMixes(swigCPtr, MixVisitor.getCPtr(v));
    if (pdje_POLYGLOTPINVOKE.SWIGPendingException.Pending) throw pdje_POLYGLOTPINVOKE.SWIGPendingException.Retrieve();
  }

  public void GetAllKeyValues(KVVisitor v) {
    pdje_POLYGLOTPINVOKE.editorObject_GetAllKeyValues(swigCPtr, KVVisitor.getCPtr(v));
    if (pdje_POLYGLOTPINVOKE.SWIGPendingException.Pending) throw pdje_POLYGLOTPINVOKE.SWIGPendingException.Retrieve();
  }

  public void GetAllMusics(MusicVisitor v) {
    pdje_POLYGLOTPINVOKE.editorObject_GetAllMusics(swigCPtr, MusicVisitor.getCPtr(v));
    if (pdje_POLYGLOTPINVOKE.SWIGPendingException.Pending) throw pdje_POLYGLOTPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool UndoNote() {
    bool ret = pdje_POLYGLOTPINVOKE.editorObject_UndoNote(swigCPtr);
    if (pdje_POLYGLOTPINVOKE.SWIGPendingException.Pending) throw pdje_POLYGLOTPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool UndoMix() {
    bool ret = pdje_POLYGLOTPINVOKE.editorObject_UndoMix(swigCPtr);
    if (pdje_POLYGLOTPINVOKE.SWIGPendingException.Pending) throw pdje_POLYGLOTPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool UndoKV() {
    bool ret = pdje_POLYGLOTPINVOKE.editorObject_UndoKV(swigCPtr);
    if (pdje_POLYGLOTPINVOKE.SWIGPendingException.Pending) throw pdje_POLYGLOTPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool UndoMusic(string musicName) {
    bool ret = pdje_POLYGLOTPINVOKE.editorObject_UndoMusic(swigCPtr, musicName);
    if (pdje_POLYGLOTPINVOKE.SWIGPendingException.Pending) throw pdje_POLYGLOTPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool RedoNote() {
    bool ret = pdje_POLYGLOTPINVOKE.editorObject_RedoNote(swigCPtr);
    if (pdje_POLYGLOTPINVOKE.SWIGPendingException.Pending) throw pdje_POLYGLOTPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool RedoMix() {
    bool ret = pdje_POLYGLOTPINVOKE.editorObject_RedoMix(swigCPtr);
    if (pdje_POLYGLOTPINVOKE.SWIGPendingException.Pending) throw pdje_POLYGLOTPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool RedoKV() {
    bool ret = pdje_POLYGLOTPINVOKE.editorObject_RedoKV(swigCPtr);
    if (pdje_POLYGLOTPINVOKE.SWIGPendingException.Pending) throw pdje_POLYGLOTPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool RedoMusic(string musicName) {
    bool ret = pdje_POLYGLOTPINVOKE.editorObject_RedoMusic(swigCPtr, musicName);
    if (pdje_POLYGLOTPINVOKE.SWIGPendingException.Pending) throw pdje_POLYGLOTPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool GoNote(string branchName, string commitID) {
    bool ret = pdje_POLYGLOTPINVOKE.editorObject_GoNote(swigCPtr, branchName, commitID);
    if (pdje_POLYGLOTPINVOKE.SWIGPendingException.Pending) throw pdje_POLYGLOTPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool GoMix(string branchName, string commitID) {
    bool ret = pdje_POLYGLOTPINVOKE.editorObject_GoMix(swigCPtr, branchName, commitID);
    if (pdje_POLYGLOTPINVOKE.SWIGPendingException.Pending) throw pdje_POLYGLOTPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool GoKV(string branchName, string commitID) {
    bool ret = pdje_POLYGLOTPINVOKE.editorObject_GoKV(swigCPtr, branchName, commitID);
    if (pdje_POLYGLOTPINVOKE.SWIGPendingException.Pending) throw pdje_POLYGLOTPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool GoMusic(string branchName, string commitID) {
    bool ret = pdje_POLYGLOTPINVOKE.editorObject_GoMusic(swigCPtr, branchName, commitID);
    if (pdje_POLYGLOTPINVOKE.SWIGPendingException.Pending) throw pdje_POLYGLOTPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string GetLogNoteJSON() {
    string ret = pdje_POLYGLOTPINVOKE.editorObject_GetLogNoteJSON(swigCPtr);
    if (pdje_POLYGLOTPINVOKE.SWIGPendingException.Pending) throw pdje_POLYGLOTPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string GetLogMixJSON() {
    string ret = pdje_POLYGLOTPINVOKE.editorObject_GetLogMixJSON(swigCPtr);
    if (pdje_POLYGLOTPINVOKE.SWIGPendingException.Pending) throw pdje_POLYGLOTPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string GetLogKVJSON() {
    string ret = pdje_POLYGLOTPINVOKE.editorObject_GetLogKVJSON(swigCPtr);
    if (pdje_POLYGLOTPINVOKE.SWIGPendingException.Pending) throw pdje_POLYGLOTPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string GetLogMusicJSON(string musicName) {
    string ret = pdje_POLYGLOTPINVOKE.editorObject_GetLogMusicJSON(swigCPtr, musicName);
    if (pdje_POLYGLOTPINVOKE.SWIGPendingException.Pending) throw pdje_POLYGLOTPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_DiffResult GetDiffNote(commit oldC, commit newC) {
    SWIGTYPE_p_DiffResult ret = new SWIGTYPE_p_DiffResult(pdje_POLYGLOTPINVOKE.editorObject_GetDiffNote(swigCPtr, commit.getCPtr(oldC), commit.getCPtr(newC)), true);
    if (pdje_POLYGLOTPINVOKE.SWIGPendingException.Pending) throw pdje_POLYGLOTPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_DiffResult GetDiffMix(commit oldC, commit newC) {
    SWIGTYPE_p_DiffResult ret = new SWIGTYPE_p_DiffResult(pdje_POLYGLOTPINVOKE.editorObject_GetDiffMix(swigCPtr, commit.getCPtr(oldC), commit.getCPtr(newC)), true);
    if (pdje_POLYGLOTPINVOKE.SWIGPendingException.Pending) throw pdje_POLYGLOTPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_DiffResult GetDiffKV(commit oldC, commit newC) {
    SWIGTYPE_p_DiffResult ret = new SWIGTYPE_p_DiffResult(pdje_POLYGLOTPINVOKE.editorObject_GetDiffKV(swigCPtr, commit.getCPtr(oldC), commit.getCPtr(newC)), true);
    if (pdje_POLYGLOTPINVOKE.SWIGPendingException.Pending) throw pdje_POLYGLOTPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_DiffResult GetDiffMusic(commit oldC, commit newC) {
    SWIGTYPE_p_DiffResult ret = new SWIGTYPE_p_DiffResult(pdje_POLYGLOTPINVOKE.editorObject_GetDiffMusic(swigCPtr, commit.getCPtr(oldC), commit.getCPtr(newC)), true);
    if (pdje_POLYGLOTPINVOKE.SWIGPendingException.Pending) throw pdje_POLYGLOTPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool UpdateLogNote() {
    bool ret = pdje_POLYGLOTPINVOKE.editorObject_UpdateLogNote(swigCPtr);
    if (pdje_POLYGLOTPINVOKE.SWIGPendingException.Pending) throw pdje_POLYGLOTPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool UpdateLogMix() {
    bool ret = pdje_POLYGLOTPINVOKE.editorObject_UpdateLogMix(swigCPtr);
    if (pdje_POLYGLOTPINVOKE.SWIGPendingException.Pending) throw pdje_POLYGLOTPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool UpdateLogKV() {
    bool ret = pdje_POLYGLOTPINVOKE.editorObject_UpdateLogKV(swigCPtr);
    if (pdje_POLYGLOTPINVOKE.SWIGPendingException.Pending) throw pdje_POLYGLOTPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool UpdateLogMusic() {
    bool ret = pdje_POLYGLOTPINVOKE.editorObject_UpdateLogMusic(swigCPtr);
    if (pdje_POLYGLOTPINVOKE.SWIGPendingException.Pending) throw pdje_POLYGLOTPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool UpdateLogNoteOn(string branchName) {
    bool ret = pdje_POLYGLOTPINVOKE.editorObject_UpdateLogNoteOn(swigCPtr, branchName);
    if (pdje_POLYGLOTPINVOKE.SWIGPendingException.Pending) throw pdje_POLYGLOTPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool UpdateLogMixOn(string branchName) {
    bool ret = pdje_POLYGLOTPINVOKE.editorObject_UpdateLogMixOn(swigCPtr, branchName);
    if (pdje_POLYGLOTPINVOKE.SWIGPendingException.Pending) throw pdje_POLYGLOTPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool UpdateLogKVOn(string branchName) {
    bool ret = pdje_POLYGLOTPINVOKE.editorObject_UpdateLogKVOn(swigCPtr, branchName);
    if (pdje_POLYGLOTPINVOKE.SWIGPendingException.Pending) throw pdje_POLYGLOTPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool UpdateLogMusicOn(string musicName) {
    bool ret = pdje_POLYGLOTPINVOKE.editorObject_UpdateLogMusicOn(swigCPtr, musicName);
    if (pdje_POLYGLOTPINVOKE.SWIGPendingException.Pending) throw pdje_POLYGLOTPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
