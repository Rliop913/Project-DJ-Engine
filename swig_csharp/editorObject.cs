//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.3.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class editorObject : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnBase;

  internal editorObject(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwnBase = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(editorObject obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~editorObject() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnBase) {
          swigCMemOwnBase = false;
          pdje_POLYGLOTPINVOKE.delete_editorObject(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public SWIGTYPE_p_git_repository getMixRepo() {
    global::System.IntPtr cPtr = pdje_POLYGLOTPINVOKE.editorObject_getMixRepo(swigCPtr);
    SWIGTYPE_p_git_repository ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_git_repository(cPtr, false);
    if (pdje_POLYGLOTPINVOKE.SWIGPendingException.Pending) throw pdje_POLYGLOTPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_git_repository getMusicRepo(string Title) {
    global::System.IntPtr cPtr = pdje_POLYGLOTPINVOKE.editorObject_getMusicRepo(swigCPtr, Title);
    SWIGTYPE_p_git_repository ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_git_repository(cPtr, false);
    if (pdje_POLYGLOTPINVOKE.SWIGPendingException.Pending) throw pdje_POLYGLOTPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_git_repository getNoteRepo() {
    global::System.IntPtr cPtr = pdje_POLYGLOTPINVOKE.editorObject_getNoteRepo(swigCPtr);
    SWIGTYPE_p_git_repository ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_git_repository(cPtr, false);
    if (pdje_POLYGLOTPINVOKE.SWIGPendingException.Pending) throw pdje_POLYGLOTPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_git_repository getKVRepo() {
    global::System.IntPtr cPtr = pdje_POLYGLOTPINVOKE.editorObject_getKVRepo(swigCPtr);
    SWIGTYPE_p_git_repository ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_git_repository(cPtr, false);
    if (pdje_POLYGLOTPINVOKE.SWIGPendingException.Pending) throw pdje_POLYGLOTPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool AddLine(string musicName, string firstBar) {
    bool ret = pdje_POLYGLOTPINVOKE.editorObject_AddLine(swigCPtr, musicName, firstBar);
    if (pdje_POLYGLOTPINVOKE.SWIGPendingException.Pending) throw pdje_POLYGLOTPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int deleteLine(SWIGTYPE_p_MixArgs obj, bool skipType, bool skipDetail) {
    int ret = pdje_POLYGLOTPINVOKE.editorObject_deleteLine(swigCPtr, SWIGTYPE_p_MixArgs.getCPtr(obj), skipType, skipDetail);
    if (pdje_POLYGLOTPINVOKE.SWIGPendingException.Pending) throw pdje_POLYGLOTPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool render(string trackTitle, litedb ROOTDB) {
    bool ret = pdje_POLYGLOTPINVOKE.editorObject_render(swigCPtr, trackTitle, litedb.getCPtr(ROOTDB));
    if (pdje_POLYGLOTPINVOKE.SWIGPendingException.Pending) throw pdje_POLYGLOTPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void demoPlayInit(audioPlayer player, uint frameBufferSize, string trackTitle) {
    pdje_POLYGLOTPINVOKE.editorObject_demoPlayInit(swigCPtr, audioPlayer.getCPtr(player), frameBufferSize, trackTitle);
    if (pdje_POLYGLOTPINVOKE.SWIGPendingException.Pending) throw pdje_POLYGLOTPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool pushToRootDB(litedb ROOTDB, string trackTitleToPush) {
    bool ret = pdje_POLYGLOTPINVOKE.editorObject_pushToRootDB__SWIG_0(swigCPtr, litedb.getCPtr(ROOTDB), trackTitleToPush);
    if (pdje_POLYGLOTPINVOKE.SWIGPendingException.Pending) throw pdje_POLYGLOTPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool pushToRootDB(litedb ROOTDB, string musicTitle, string musicComposer) {
    bool ret = pdje_POLYGLOTPINVOKE.editorObject_pushToRootDB__SWIG_1(swigCPtr, litedb.getCPtr(ROOTDB), musicTitle, musicComposer);
    if (pdje_POLYGLOTPINVOKE.SWIGPendingException.Pending) throw pdje_POLYGLOTPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string DESTROY_PROJECT() {
    string ret = pdje_POLYGLOTPINVOKE.editorObject_DESTROY_PROJECT(swigCPtr);
    if (pdje_POLYGLOTPINVOKE.SWIGPendingException.Pending) throw pdje_POLYGLOTPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool ConfigNewMusic(string NewMusicName, string composer, SWIGTYPE_p_std__filesystem__path musicPath, string firstBar) {
    bool ret = pdje_POLYGLOTPINVOKE.editorObject_ConfigNewMusic__SWIG_0(swigCPtr, NewMusicName, composer, SWIGTYPE_p_std__filesystem__path.getCPtr(musicPath), firstBar);
    if (pdje_POLYGLOTPINVOKE.SWIGPendingException.Pending) throw pdje_POLYGLOTPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool ConfigNewMusic(string NewMusicName, string composer, SWIGTYPE_p_std__filesystem__path musicPath) {
    bool ret = pdje_POLYGLOTPINVOKE.editorObject_ConfigNewMusic__SWIG_1(swigCPtr, NewMusicName, composer, SWIGTYPE_p_std__filesystem__path.getCPtr(musicPath));
    if (pdje_POLYGLOTPINVOKE.SWIGPendingException.Pending) throw pdje_POLYGLOTPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool Open(SWIGTYPE_p_std__filesystem__path projectPath) {
    bool ret = pdje_POLYGLOTPINVOKE.editorObject_Open(swigCPtr, SWIGTYPE_p_std__filesystem__path.getCPtr(projectPath));
    if (pdje_POLYGLOTPINVOKE.SWIGPendingException.Pending) throw pdje_POLYGLOTPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public editorObject(string auth_name, string auth_email) : this(pdje_POLYGLOTPINVOKE.new_editorObject(auth_name, auth_email), true) {
    if (pdje_POLYGLOTPINVOKE.SWIGPendingException.Pending) throw pdje_POLYGLOTPINVOKE.SWIGPendingException.Retrieve();
  }

}
