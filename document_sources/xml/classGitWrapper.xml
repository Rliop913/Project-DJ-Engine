<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.14.0" xml:lang="en-US">
  <compounddef id="classGitWrapper" kind="class" language="C++" prot="public">
    <compoundname>GitWrapper</compoundname>
    <includes refid="gitWrapper_8hpp" local="no">gitWrapper.hpp</includes>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classGitWrapper_1a2307a0946b74a74440793557682d2787" prot="private" static="no" mutable="no">
        <type>git_signature *</type>
        <definition>git_signature* GitWrapper::auth_sign</definition>
        <argsstring></argsstring>
        <name>auth_sign</name>
        <qualifiedname>GitWrapper::auth_sign</qualifiedname>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/editor/featureWrapper/GitWrap/gitWrapper.hpp" line="35" column="33" bodyfile="include/editor/featureWrapper/GitWrap/gitWrapper.hpp" bodystart="35" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classGitWrapper_1a168f82a04ce859e339f9fc4e0286e04d" prot="private" static="no" mutable="no">
        <type>std::optional&lt; <ref refid="classAddController" kindref="compound">AddController</ref> &gt;</type>
        <definition>std::optional&lt;AddController&gt; GitWrapper::addIndex</definition>
        <argsstring></argsstring>
        <name>addIndex</name>
        <qualifiedname>GitWrapper::addIndex</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/editor/featureWrapper/GitWrap/gitWrapper.hpp" line="36" column="19" bodyfile="include/editor/featureWrapper/GitWrap/gitWrapper.hpp" bodystart="36" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classGitWrapper_1a95b889758023dafa8d08563aaf5729ad" prot="public" static="no" mutable="no">
        <type>git_repository *</type>
        <definition>git_repository* GitWrapper::repo</definition>
        <argsstring></argsstring>
        <name>repo</name>
        <qualifiedname>GitWrapper::repo</qualifiedname>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/editor/featureWrapper/GitWrap/gitWrapper.hpp" line="39" column="38" bodyfile="include/editor/featureWrapper/GitWrap/gitWrapper.hpp" bodystart="39" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classGitWrapper_1a2c5d649edd00c0a8de2d487082137aee" prot="public" static="no" mutable="no">
        <type>std::optional&lt; <ref refid="classgitwrap_1_1logHandle" kindref="compound">gitwrap::logHandle</ref> &gt;</type>
        <definition>std::optional&lt;gitwrap::logHandle&gt; GitWrapper::log_hdl</definition>
        <argsstring></argsstring>
        <name>log_hdl</name>
        <qualifiedname>GitWrapper::log_hdl</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/editor/featureWrapper/GitWrap/gitWrapper.hpp" line="40" column="19" bodyfile="include/editor/featureWrapper/GitWrap/gitWrapper.hpp" bodystart="40" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classGitWrapper_1a6bf7e4eeceae816ce7c423d89843ad0a" prot="public" static="no" mutable="no">
        <type><ref refid="gitWrapper_8hpp_1abf5aad0c0dda41ba18471ae87c3b2346" kindref="member">BRANCH_HANDLE</ref></type>
        <definition>BRANCH_HANDLE GitWrapper::handleBranch</definition>
        <argsstring></argsstring>
        <name>handleBranch</name>
        <qualifiedname>GitWrapper::handleBranch</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/editor/featureWrapper/GitWrap/gitWrapper.hpp" line="41" column="39" bodyfile="include/editor/featureWrapper/GitWrap/gitWrapper.hpp" bodystart="41" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classGitWrapper_1a4405a8082a9c6abd3bd0f00a4706477e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool GitWrapper::add</definition>
        <argsstring>(const fs::path &amp;path)</argsstring>
        <name>add</name>
        <qualifiedname>GitWrapper::add</qualifiedname>
        <param>
          <type>const fs::path &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Add a file to the repository index. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/editor/featureWrapper/GitWrap/gitWrapper.hpp" line="45" column="5" bodyfile="include/editor/featureWrapper/GitWrap/gitWrapper.cpp" bodystart="62" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="classGitWrapper_1a8d6ebb76c9cae0c577a631185f826b7d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool GitWrapper::open</definition>
        <argsstring>(const fs::path &amp;path)</argsstring>
        <name>open</name>
        <qualifiedname>GitWrapper::open</qualifiedname>
        <param>
          <type>const fs::path &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Open an existing repository. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/editor/featureWrapper/GitWrap/gitWrapper.hpp" line="48" column="5" bodyfile="include/editor/featureWrapper/GitWrap/gitWrapper.cpp" bodystart="82" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="classGitWrapper_1a9248ff6564221374cec0837c97747ca1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structDiffResult" kindref="compound">DiffResult</ref></type>
        <definition>DiffResult GitWrapper::diff</definition>
        <argsstring>(const gitwrap::commit &amp;oldCommit, const gitwrap::commit &amp;newCommit)</argsstring>
        <name>diff</name>
        <qualifiedname>GitWrapper::diff</qualifiedname>
        <param>
          <type>const <ref refid="structgitwrap_1_1commit" kindref="compound">gitwrap::commit</ref> &amp;</type>
          <declname>oldCommit</declname>
        </param>
        <param>
          <type>const <ref refid="structgitwrap_1_1commit" kindref="compound">gitwrap::commit</ref> &amp;</type>
          <declname>newCommit</declname>
        </param>
        <briefdescription>
<para>Get a diff between two commits. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/editor/featureWrapper/GitWrap/gitWrapper.hpp" line="52" column="5" bodyfile="include/editor/featureWrapper/GitWrap/gitWrapper.cpp" bodystart="31" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="classGitWrapper_1ac0d9714caa112b665d3170bf02a44d70" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="gitWrapper_8hpp_1a40e5ded694a4fe46703b6961ad90bc9b" kindref="member">MAYBE_BLAME</ref></type>
        <definition>MAYBE_BLAME GitWrapper::Blame</definition>
        <argsstring>(const fs::path &amp;filepath, const gitwrap::commit &amp;newCommit, const gitwrap::commit &amp;oldCommit)</argsstring>
        <name>Blame</name>
        <qualifiedname>GitWrapper::Blame</qualifiedname>
        <param>
          <type>const fs::path &amp;</type>
          <declname>filepath</declname>
        </param>
        <param>
          <type>const <ref refid="structgitwrap_1_1commit" kindref="compound">gitwrap::commit</ref> &amp;</type>
          <declname>newCommit</declname>
        </param>
        <param>
          <type>const <ref refid="structgitwrap_1_1commit" kindref="compound">gitwrap::commit</ref> &amp;</type>
          <declname>oldCommit</declname>
        </param>
        <briefdescription>
<para>Run git blame on a file between two commits. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/editor/featureWrapper/GitWrap/gitWrapper.hpp" line="56" column="5" bodyfile="include/editor/featureWrapper/GitWrap/gitWrapper.cpp" bodystart="12" bodyend="28"/>
      </memberdef>
      <memberdef kind="function" id="classGitWrapper_1a4a8155aae8a8e414a3bd11410b95bef6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool GitWrapper::commit</definition>
        <argsstring>(git_signature *sign, const std::string &amp;message)</argsstring>
        <name>commit</name>
        <qualifiedname>GitWrapper::commit</qualifiedname>
        <param>
          <type>git_signature *</type>
          <declname>sign</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>message</declname>
        </param>
        <briefdescription>
<para>Commit staged changes using the provided signature. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/editor/featureWrapper/GitWrap/gitWrapper.hpp" line="62" column="5" bodyfile="include/editor/featureWrapper/GitWrap/gitWrapper.cpp" bodystart="134" bodyend="217"/>
      </memberdef>
      <memberdef kind="function" id="classGitWrapper_1a174d1a1a0f8b8b8b15c04fb7d90ea38b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool GitWrapper::log</definition>
        <argsstring>()</argsstring>
        <name>log</name>
        <qualifiedname>GitWrapper::log</qualifiedname>
        <briefdescription>
<para>Walks the commit history and builds a log. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if the log was built successfully, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/editor/featureWrapper/GitWrap/gitWrapper.hpp" line="70" column="5" bodyfile="include/editor/featureWrapper/GitWrap/gitWrapper.cpp" bodystart="220" bodyend="239"/>
      </memberdef>
      <memberdef kind="function" id="classGitWrapper_1abe24ea986dc68b04555cf2328b5424ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool GitWrapper::log</definition>
        <argsstring>(const std::string &amp;branchName)</argsstring>
        <name>log</name>
        <qualifiedname>GitWrapper::log</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>branchName</declname>
        </param>
        <briefdescription>
<para>Walks the commit history of a specific branch and builds a log. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>branchName</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the branch to log. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if the log was built successfully, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/editor/featureWrapper/GitWrap/gitWrapper.hpp" line="79" column="5" bodyfile="include/editor/featureWrapper/GitWrap/gitWrapper.cpp" bodystart="242" bodyend="253"/>
      </memberdef>
      <memberdef kind="function" id="classGitWrapper_1a1b411134e5dac271fa3d400e66736df4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool GitWrapper::close</definition>
        <argsstring>()</argsstring>
        <name>close</name>
        <qualifiedname>GitWrapper::close</qualifiedname>
        <briefdescription>
<para>Close the repository and free resources. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/editor/featureWrapper/GitWrap/gitWrapper.hpp" line="87" column="5" bodyfile="include/editor/featureWrapper/GitWrap/gitWrapper.cpp" bodystart="104" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="classGitWrapper_1a2bd651dfe8cbd77c30d4e70186c43c03" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>GitWrapper::GitWrapper</definition>
        <argsstring>()</argsstring>
        <name>GitWrapper</name>
        <qualifiedname>GitWrapper::GitWrapper</qualifiedname>
        <briefdescription>
<para>Construct an empty wrapper. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/editor/featureWrapper/GitWrap/gitWrapper.hpp" line="90" column="5" bodyfile="include/editor/featureWrapper/GitWrap/gitWrapper.cpp" bodystart="117" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="classGitWrapper_1a36909e3fc709f3a3f24e1e7865254a8b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>GitWrapper::~GitWrapper</definition>
        <argsstring>()</argsstring>
        <name>~GitWrapper</name>
        <qualifiedname>GitWrapper::~GitWrapper</qualifiedname>
        <briefdescription>
<para>Destructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/editor/featureWrapper/GitWrap/gitWrapper.hpp" line="92" column="5" bodyfile="include/editor/featureWrapper/GitWrap/gitWrapper.cpp" bodystart="122" bodyend="131"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classGitWrapper_1a74944ba0a6187c24c46d8c39c4df349b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>DONT_SANITIZE GitWrapper::GenTimeStamp</definition>
        <argsstring>()</argsstring>
        <name>GenTimeStamp</name>
        <qualifiedname>GitWrapper::GenTimeStamp</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/editor/featureWrapper/GitWrap/gitWrapper.hpp" line="82" column="5" bodyfile="include/editor/featureWrapper/GitWrap/gitWrapper.cpp" bodystart="256" bodyend="278"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Thin wrapper around libgit2 for common operations. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="include/editor/featureWrapper/GitWrap/gitWrapper.hpp" line="33" column="1" bodyfile="include/editor/featureWrapper/GitWrap/gitWrapper.hpp" bodystart="33" bodyend="93"/>
    <listofallmembers>
      <member refid="classGitWrapper_1a4405a8082a9c6abd3bd0f00a4706477e" prot="public" virt="non-virtual"><scope>GitWrapper</scope><name>add</name></member>
      <member refid="classGitWrapper_1a168f82a04ce859e339f9fc4e0286e04d" prot="private" virt="non-virtual"><scope>GitWrapper</scope><name>addIndex</name></member>
      <member refid="classGitWrapper_1a2307a0946b74a74440793557682d2787" prot="private" virt="non-virtual"><scope>GitWrapper</scope><name>auth_sign</name></member>
      <member refid="classGitWrapper_1ac0d9714caa112b665d3170bf02a44d70" prot="public" virt="non-virtual"><scope>GitWrapper</scope><name>Blame</name></member>
      <member refid="classGitWrapper_1a1b411134e5dac271fa3d400e66736df4" prot="public" virt="non-virtual"><scope>GitWrapper</scope><name>close</name></member>
      <member refid="classGitWrapper_1a4a8155aae8a8e414a3bd11410b95bef6" prot="public" virt="non-virtual"><scope>GitWrapper</scope><name>commit</name></member>
      <member refid="classGitWrapper_1a9248ff6564221374cec0837c97747ca1" prot="public" virt="non-virtual"><scope>GitWrapper</scope><name>diff</name></member>
      <member refid="classGitWrapper_1a74944ba0a6187c24c46d8c39c4df349b" prot="public" virt="non-virtual"><scope>GitWrapper</scope><name>GenTimeStamp</name></member>
      <member refid="classGitWrapper_1a2bd651dfe8cbd77c30d4e70186c43c03" prot="public" virt="non-virtual"><scope>GitWrapper</scope><name>GitWrapper</name></member>
      <member refid="classGitWrapper_1a6bf7e4eeceae816ce7c423d89843ad0a" prot="public" virt="non-virtual"><scope>GitWrapper</scope><name>handleBranch</name></member>
      <member refid="classGitWrapper_1a174d1a1a0f8b8b8b15c04fb7d90ea38b" prot="public" virt="non-virtual"><scope>GitWrapper</scope><name>log</name></member>
      <member refid="classGitWrapper_1abe24ea986dc68b04555cf2328b5424ae" prot="public" virt="non-virtual"><scope>GitWrapper</scope><name>log</name></member>
      <member refid="classGitWrapper_1a2c5d649edd00c0a8de2d487082137aee" prot="public" virt="non-virtual"><scope>GitWrapper</scope><name>log_hdl</name></member>
      <member refid="classGitWrapper_1a8d6ebb76c9cae0c577a631185f826b7d" prot="public" virt="non-virtual"><scope>GitWrapper</scope><name>open</name></member>
      <member refid="classGitWrapper_1a95b889758023dafa8d08563aaf5729ad" prot="public" virt="non-virtual"><scope>GitWrapper</scope><name>repo</name></member>
      <member refid="classGitWrapper_1a36909e3fc709f3a3f24e1e7865254a8b" prot="public" virt="non-virtual"><scope>GitWrapper</scope><name>~GitWrapper</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
