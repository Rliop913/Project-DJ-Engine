<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.14.0" xml:lang="en-US">
  <compounddef id="classeditor_object" kind="class" language="C++" prot="public">
    <compoundname>editorObject</compoundname>
    <includes refid="editor_object_8hpp" local="no">editorObject.hpp</includes>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classeditor_object_1afe3027bfdc86cf213b3d44191e4ce4e7" prot="private" static="no" mutable="no">
        <type>std::optional&lt; <ref refid="classtemp_d_b" kindref="compound">tempDB</ref> &gt;</type>
        <definition>std::optional&lt;tempDB&gt; editorObject::projectLocalDB</definition>
        <argsstring></argsstring>
        <name>projectLocalDB</name>
        <qualifiedname>editorObject::projectLocalDB</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core_include/MainObjects/editorObject/editorObject.hpp" line="42" column="24" bodyfile="core_include/MainObjects/editorObject/editorObject.hpp" bodystart="42" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classeditor_object_1a9409f6aef52b2cb8a361674da49b97e1" prot="private" static="no" mutable="no">
        <type>fs::path</type>
        <definition>fs::path editorObject::projectRoot</definition>
        <argsstring></argsstring>
        <name>projectRoot</name>
        <qualifiedname>editorObject::projectRoot</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core_include/MainObjects/editorObject/editorObject.hpp" line="43" column="32" bodyfile="core_include/MainObjects/editorObject/editorObject.hpp" bodystart="43" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classeditor_object_1a3172e809911096988531fc5228f7055e" prot="private" static="no" mutable="no">
        <type>fs::path</type>
        <definition>fs::path editorObject::mixFilePath</definition>
        <argsstring></argsstring>
        <name>mixFilePath</name>
        <qualifiedname>editorObject::mixFilePath</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core_include/MainObjects/editorObject/editorObject.hpp" line="44" column="32" bodyfile="core_include/MainObjects/editorObject/editorObject.hpp" bodystart="44" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classeditor_object_1abeaedacd9b6d9e2fb61772aa348431b1" prot="private" static="no" mutable="no">
        <type>fs::path</type>
        <definition>fs::path editorObject::noteFilePath</definition>
        <argsstring></argsstring>
        <name>noteFilePath</name>
        <qualifiedname>editorObject::noteFilePath</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core_include/MainObjects/editorObject/editorObject.hpp" line="45" column="32" bodyfile="core_include/MainObjects/editorObject/editorObject.hpp" bodystart="45" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classeditor_object_1a1a72aaa0a758b9c32f2bcd603a607f3c" prot="private" static="no" mutable="no">
        <type>fs::path</type>
        <definition>fs::path editorObject::kvFilePath</definition>
        <argsstring></argsstring>
        <name>kvFilePath</name>
        <qualifiedname>editorObject::kvFilePath</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core_include/MainObjects/editorObject/editorObject.hpp" line="46" column="32" bodyfile="core_include/MainObjects/editorObject/editorObject.hpp" bodystart="46" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classeditor_object_1a76050465d4780555d62af1f9faee05e7" prot="private" static="no" mutable="no">
        <type>fs::path</type>
        <definition>fs::path editorObject::musicFileRootPath</definition>
        <argsstring></argsstring>
        <name>musicFileRootPath</name>
        <qualifiedname>editorObject::musicFileRootPath</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core_include/MainObjects/editorObject/editorObject.hpp" line="47" column="32" bodyfile="core_include/MainObjects/editorObject/editorObject.hpp" bodystart="47" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classeditor_object_1a23655580a822a7ae6c96ece123f0574d" prot="private" static="no" mutable="no">
        <type>std::optional&lt; <ref refid="class_p_d_j_e___editor" kindref="compound">PDJE_Editor</ref> &gt;</type>
        <definition>std::optional&lt;PDJE_Editor&gt; editorObject::E_obj</definition>
        <argsstring></argsstring>
        <name>E_obj</name>
        <qualifiedname>editorObject::E_obj</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core_include/MainObjects/editorObject/editorObject.hpp" line="48" column="19" bodyfile="core_include/MainObjects/editorObject/editorObject.hpp" bodystart="48" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-func">
      <memberdef kind="function" id="classeditor_object_1a70ea370646618a4ac7bd3d3ef50abc7d" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename EDIT_ARG_TYPE</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool editorObject::DefaultSaveFunction</definition>
        <argsstring>()</argsstring>
        <name>DefaultSaveFunction</name>
        <qualifiedname>editorObject::DefaultSaveFunction</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core_include/MainObjects/editorObject/editorObject.hpp" line="52" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classeditor_object_1aad816e22a3a63d00cb319bf4d985d950" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename EDIT_ARG_TYPE</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool editorObject::DefaultSaveFunction</definition>
        <argsstring>(PDJE_Editor::MusicHandleStruct &amp;i, const EDIT_ARG_MUSIC &amp;obj)</argsstring>
        <name>DefaultSaveFunction</name>
        <qualifiedname>editorObject::DefaultSaveFunction</qualifiedname>
        <param>
          <type><ref refid="struct_p_d_j_e___editor_1_1_music_handle_struct" kindref="compound">PDJE_Editor::MusicHandleStruct</ref> &amp;</type>
          <declname>i</declname>
        </param>
        <param>
          <type>const <ref refid="struct_e_d_i_t___a_r_g___m_u_s_i_c" kindref="compound">EDIT_ARG_MUSIC</ref> &amp;</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core_include/MainObjects/editorObject/editorObject.hpp" line="56" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classeditor_object_1a3bb22fbeed9a7e1516f3ab6461698f0b" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structtrackdata" kindref="compound">trackdata</ref></type>
        <definition>trackdata editorObject::makeTrackData</definition>
        <argsstring>(const UNSANITIZED &amp;trackTitle, TITLE_COMPOSER &amp;titles)</argsstring>
        <name>makeTrackData</name>
        <qualifiedname>editorObject::makeTrackData</qualifiedname>
        <param>
          <type>const <ref refid="file_name_sanitizer_8hpp_1a3dbfced66c4bb073515956060fd59604" kindref="member">UNSANITIZED</ref> &amp;</type>
          <declname>trackTitle</declname>
        </param>
        <param>
          <type><ref refid="editor_object_8hpp_1a899c0028ff4e674c7145d4c77087f957" kindref="member">TITLE_COMPOSER</ref> &amp;</type>
          <declname>titles</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core_include/MainObjects/editorObject/editorObject.hpp" line="60" column="5" bodyfile="core_include/MainObjects/editorObject/editorObject.cpp" bodystart="8" bodyend="39"/>
      </memberdef>
      <memberdef kind="function" id="classeditor_object_1afdb9406f4e2aae843f1de7921be5f796" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>bool</type>
        <definition>bool editorObject::DefaultSaveFunction</definition>
        <argsstring>()</argsstring>
        <name>DefaultSaveFunction</name>
        <qualifiedname>editorObject::DefaultSaveFunction</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core_include/MainObjects/editorObject/commonfunction.cpp" line="4" column="2" bodyfile="core_include/MainObjects/editorObject/commonfunction.cpp" bodystart="5" bodyend="21"/>
      </memberdef>
      <memberdef kind="function" id="classeditor_object_1afdb9406f4e2aae843f1de7921be5f796" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>bool</type>
        <definition>bool editorObject::DefaultSaveFunction</definition>
        <argsstring>()</argsstring>
        <name>DefaultSaveFunction</name>
        <qualifiedname>editorObject::DefaultSaveFunction</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core_include/MainObjects/editorObject/commonfunction.cpp" line="24" column="2" bodyfile="core_include/MainObjects/editorObject/commonfunction.cpp" bodystart="25" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="classeditor_object_1afdb9406f4e2aae843f1de7921be5f796" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>bool</type>
        <definition>bool editorObject::DefaultSaveFunction</definition>
        <argsstring>()</argsstring>
        <name>DefaultSaveFunction</name>
        <qualifiedname>editorObject::DefaultSaveFunction</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core_include/MainObjects/editorObject/commonfunction.cpp" line="44" column="2" bodyfile="core_include/MainObjects/editorObject/commonfunction.cpp" bodystart="45" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="classeditor_object_1a785b7a8cdc22a9c424f5f79b6b031e88" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>bool</type>
        <definition>bool editorObject::DefaultSaveFunction</definition>
        <argsstring>(PDJE_Editor::MusicHandleStruct &amp;i, const EDIT_ARG_MUSIC &amp;obj)</argsstring>
        <name>DefaultSaveFunction</name>
        <qualifiedname>editorObject::DefaultSaveFunction</qualifiedname>
        <param>
          <type><ref refid="struct_p_d_j_e___editor_1_1_music_handle_struct" kindref="compound">PDJE_Editor::MusicHandleStruct</ref> &amp;</type>
          <declname>i</declname>
        </param>
        <param>
          <type>const <ref refid="struct_e_d_i_t___a_r_g___m_u_s_i_c" kindref="compound">EDIT_ARG_MUSIC</ref> &amp;</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core_include/MainObjects/editorObject/commonfunction.cpp" line="63" column="2" bodyfile="core_include/MainObjects/editorObject/commonfunction.cpp" bodystart="64" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="classeditor_object_1afdb9406f4e2aae843f1de7921be5f796" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>bool</type>
        <definition>bool editorObject::DefaultSaveFunction</definition>
        <argsstring>()</argsstring>
        <name>DefaultSaveFunction</name>
        <qualifiedname>editorObject::DefaultSaveFunction</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core_include/MainObjects/editorObject/editorObject.hpp" line="396" column="2"/>
      </memberdef>
      <memberdef kind="function" id="classeditor_object_1afdb9406f4e2aae843f1de7921be5f796" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>bool</type>
        <definition>bool editorObject::DefaultSaveFunction</definition>
        <argsstring>()</argsstring>
        <name>DefaultSaveFunction</name>
        <qualifiedname>editorObject::DefaultSaveFunction</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core_include/MainObjects/editorObject/editorObject.hpp" line="399" column="2"/>
      </memberdef>
      <memberdef kind="function" id="classeditor_object_1afdb9406f4e2aae843f1de7921be5f796" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>bool</type>
        <definition>bool editorObject::DefaultSaveFunction</definition>
        <argsstring>()</argsstring>
        <name>DefaultSaveFunction</name>
        <qualifiedname>editorObject::DefaultSaveFunction</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core_include/MainObjects/editorObject/editorObject.hpp" line="402" column="2"/>
      </memberdef>
      <memberdef kind="function" id="classeditor_object_1a785b7a8cdc22a9c424f5f79b6b031e88" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>bool</type>
        <definition>bool editorObject::DefaultSaveFunction</definition>
        <argsstring>(PDJE_Editor::MusicHandleStruct &amp;i, const EDIT_ARG_MUSIC &amp;obj)</argsstring>
        <name>DefaultSaveFunction</name>
        <qualifiedname>editorObject::DefaultSaveFunction</qualifiedname>
        <param>
          <type><ref refid="struct_p_d_j_e___editor_1_1_music_handle_struct" kindref="compound">PDJE_Editor::MusicHandleStruct</ref> &amp;</type>
          <declname>i</declname>
        </param>
        <param>
          <type>const <ref refid="struct_e_d_i_t___a_r_g___m_u_s_i_c" kindref="compound">EDIT_ARG_MUSIC</ref> &amp;</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core_include/MainObjects/editorObject/editorObject.hpp" line="405" column="2"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classeditor_object_1ae5300f1a0b6d39b6fb1e6c79d2bcc91d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>git_repository *</type>
        <definition>git_repository * editorObject::getMixRepo</definition>
        <argsstring>()</argsstring>
        <name>getMixRepo</name>
        <qualifiedname>editorObject::getMixRepo</qualifiedname>
        <briefdescription>
<para>Gets the Git repository for the mix data. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A pointer to the Git repository, or <computeroutput>nullptr</computeroutput> if not available. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core_include/MainObjects/editorObject/editorObject.hpp" line="68" column="5" bodyfile="core_include/MainObjects/editorObject/editorObject.hpp" bodystart="68" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="classeditor_object_1ad4983a3abef2c8acadc325f26a6128d6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>git_repository *</type>
        <definition>git_repository * editorObject::getMusicRepo</definition>
        <argsstring>(const UNSANITIZED &amp;Title)</argsstring>
        <name>getMusicRepo</name>
        <qualifiedname>editorObject::getMusicRepo</qualifiedname>
        <param>
          <type>const <ref refid="file_name_sanitizer_8hpp_1a3dbfced66c4bb073515956060fd59604" kindref="member">UNSANITIZED</ref> &amp;</type>
          <declname>Title</declname>
        </param>
        <briefdescription>
<para>Gets the Git repository for a specific music entry. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Title</parametername>
</parameternamelist>
<parameterdescription>
<para>The unsanitized title of the music. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pointer to the Git repository, or <computeroutput>nullptr</computeroutput> if not found. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core_include/MainObjects/editorObject/editorObject.hpp" line="82" column="5" bodyfile="core_include/MainObjects/editorObject/editorObject.hpp" bodystart="82" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="classeditor_object_1a3bd541d0ff2a00541fad343c31742c71" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>git_repository *</type>
        <definition>git_repository * editorObject::getNoteRepo</definition>
        <argsstring>()</argsstring>
        <name>getNoteRepo</name>
        <qualifiedname>editorObject::getNoteRepo</qualifiedname>
        <briefdescription>
<para>Gets the Git repository for the note data. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A pointer to the Git repository, or <computeroutput>nullptr</computeroutput> if not available. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core_include/MainObjects/editorObject/editorObject.hpp" line="103" column="5" bodyfile="core_include/MainObjects/editorObject/editorObject.hpp" bodystart="103" bodyend="109"/>
      </memberdef>
      <memberdef kind="function" id="classeditor_object_1a7276d008fdf2ce71165d9f8f8332317d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>git_repository *</type>
        <definition>git_repository * editorObject::getKVRepo</definition>
        <argsstring>()</argsstring>
        <name>getKVRepo</name>
        <qualifiedname>editorObject::getKVRepo</qualifiedname>
        <briefdescription>
<para>Gets the Git repository for the key-value data. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A pointer to the Git repository, or <computeroutput>nullptr</computeroutput> if not available. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core_include/MainObjects/editorObject/editorObject.hpp" line="116" column="5" bodyfile="core_include/MainObjects/editorObject/editorObject.hpp" bodystart="116" bodyend="122"/>
      </memberdef>
      <memberdef kind="function" id="classeditor_object_1a77eaf52d8c470aadb9af3f3140e6beee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename EDIT_ARG_TYPE</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool editorObject::AddLine</definition>
        <argsstring>(const EDIT_ARG_TYPE &amp;obj)</argsstring>
        <name>AddLine</name>
        <qualifiedname>editorObject::AddLine</qualifiedname>
        <param>
          <type>const EDIT_ARG_TYPE &amp;</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
<para>Adds a new line of data to the editor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>EDIT_ARG_TYPE</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of data to add. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>The data object to add. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if the line was added successfully, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core_include/MainObjects/editorObject/editorObject.hpp" line="132" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classeditor_object_1a9162179d7a90217496e990ed631a79e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool editorObject::AddLine</definition>
        <argsstring>(const UNSANITIZED &amp;musicName, const DONT_SANITIZE &amp;firstBeat)</argsstring>
        <name>AddLine</name>
        <qualifiedname>editorObject::AddLine</qualifiedname>
        <param>
          <type>const <ref refid="file_name_sanitizer_8hpp_1a3dbfced66c4bb073515956060fd59604" kindref="member">UNSANITIZED</ref> &amp;</type>
          <declname>musicName</declname>
        </param>
        <param>
          <type>const <ref refid="file_name_sanitizer_8hpp_1a2ec6d785f45dccabee178706d40c0d7d" kindref="member">DONT_SANITIZE</ref> &amp;</type>
          <declname>firstBeat</declname>
        </param>
        <briefdescription>
<para>Adds a new music entry with a specified first Beat. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>musicName</parametername>
</parameternamelist>
<parameterdescription>
<para>The unsanitized name of the music. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>firstBeat</parametername>
</parameternamelist>
<parameterdescription>
<para>The first Beat of the music. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if the line was added successfully, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core_include/MainObjects/editorObject/editorObject.hpp" line="141" column="5" bodyfile="core_include/MainObjects/editorObject/addline.cpp" bodystart="96" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="classeditor_object_1acec5f49ab4cc77cd842d4eaf1a25ff87" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int editorObject::deleteLine</definition>
        <argsstring>(const EDIT_ARG_MIX &amp;obj, bool skipType, bool skipDetail)</argsstring>
        <name>deleteLine</name>
        <qualifiedname>editorObject::deleteLine</qualifiedname>
        <param>
          <type>const <ref refid="editor_object_8hpp_1a8c7c688d1e63ff780f13669e00fc091c" kindref="member">EDIT_ARG_MIX</ref> &amp;</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>skipType</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>skipDetail</declname>
        </param>
        <briefdescription>
<para>Deletes a line of mix data. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>The mix data to delete. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>skipType</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether to skip matching the <computeroutput>type</computeroutput> field. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>skipDetail</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether to skip matching the <computeroutput>details</computeroutput> field. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The number of lines deleted. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core_include/MainObjects/editorObject/editorObject.hpp" line="151" column="5" bodyfile="core_include/MainObjects/editorObject/deleteline.cpp" bodystart="4" bodyend="16"/>
      </memberdef>
      <memberdef kind="function" id="classeditor_object_1a74c726d83f0402fa3df6f74ac501dfea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename EDIT_ARG_TYPE</type>
          </param>
        </templateparamlist>
        <type>int</type>
        <definition>int editorObject::deleteLine</definition>
        <argsstring>(const EDIT_ARG_TYPE &amp;obj)</argsstring>
        <name>deleteLine</name>
        <qualifiedname>editorObject::deleteLine</qualifiedname>
        <param>
          <type>const EDIT_ARG_TYPE &amp;</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
<para>Deletes a line of data from the editor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>EDIT_ARG_TYPE</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of data to delete. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>The data object to delete. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The number of lines deleted. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core_include/MainObjects/editorObject/editorObject.hpp" line="161" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classeditor_object_1a40875c244c49f43d99238e7302b90927" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool editorObject::render</definition>
        <argsstring>(const UNSANITIZED &amp;trackTitle, litedb &amp;ROOTDB, UNSANITIZED &amp;lint_msg)</argsstring>
        <name>render</name>
        <qualifiedname>editorObject::render</qualifiedname>
        <param>
          <type>const <ref refid="file_name_sanitizer_8hpp_1a3dbfced66c4bb073515956060fd59604" kindref="member">UNSANITIZED</ref> &amp;</type>
          <declname>trackTitle</declname>
        </param>
        <param>
          <type><ref refid="classlitedb" kindref="compound">litedb</ref> &amp;</type>
          <declname>ROOTDB</declname>
        </param>
        <param>
          <type><ref refid="file_name_sanitizer_8hpp_1a3dbfced66c4bb073515956060fd59604" kindref="member">UNSANITIZED</ref> &amp;</type>
          <declname>lint_msg</declname>
        </param>
        <briefdescription>
<para>Renders the project data to the root database. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>trackTitle</parametername>
</parameternamelist>
<parameterdescription>
<para>The unsanitized title of the track to render. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ROOTDB</parametername>
</parameternamelist>
<parameterdescription>
<para>The root database to render to. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if the rendering was successful, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core_include/MainObjects/editorObject/editorObject.hpp" line="170" column="5" bodyfile="core_include/MainObjects/editorObject/render.cpp" bodystart="7" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="classeditor_object_1a394a200d5cf41ec74152c799d17b35e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void editorObject::demoPlayInit</definition>
        <argsstring>(std::shared_ptr&lt; audioPlayer &gt; &amp;player, unsigned int frameBufferSize, const UNSANITIZED &amp;trackTitle)</argsstring>
        <name>demoPlayInit</name>
        <qualifiedname>editorObject::demoPlayInit</qualifiedname>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classaudio_player" kindref="compound">audioPlayer</ref> &gt; &amp;</type>
          <declname>player</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>frameBufferSize</declname>
        </param>
        <param>
          <type>const <ref refid="file_name_sanitizer_8hpp_1a3dbfced66c4bb073515956060fd59604" kindref="member">UNSANITIZED</ref> &amp;</type>
          <declname>trackTitle</declname>
        </param>
        <briefdescription>
<para>Initializes a demo player for a given track. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">player</parametername>
</parameternamelist>
<parameterdescription>
<para>A shared pointer to the audio player to initialize. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>frameBufferSize</parametername>
</parameternamelist>
<parameterdescription>
<para>The frame buffer size for the player. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>trackTitle</parametername>
</parameternamelist>
<parameterdescription>
<para>The unsanitized title of the track to play. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core_include/MainObjects/editorObject/editorObject.hpp" line="181" column="5" bodyfile="core_include/MainObjects/editorObject/editorObject.cpp" bodystart="42" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="classeditor_object_1ae4f8059616e377582bade705a44aafb6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool editorObject::pushToRootDB</definition>
        <argsstring>(litedb &amp;ROOTDB, const UNSANITIZED &amp;trackTitleToPush)</argsstring>
        <name>pushToRootDB</name>
        <qualifiedname>editorObject::pushToRootDB</qualifiedname>
        <param>
          <type><ref refid="classlitedb" kindref="compound">litedb</ref> &amp;</type>
          <declname>ROOTDB</declname>
        </param>
        <param>
          <type>const <ref refid="file_name_sanitizer_8hpp_1a3dbfced66c4bb073515956060fd59604" kindref="member">UNSANITIZED</ref> &amp;</type>
          <declname>trackTitleToPush</declname>
        </param>
        <briefdescription>
<para>Pushes a track to the root database. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ROOTDB</parametername>
</parameternamelist>
<parameterdescription>
<para>The root database to push to. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>trackTitleToPush</parametername>
</parameternamelist>
<parameterdescription>
<para>The unsanitized title of the track to push. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if the push was successful, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core_include/MainObjects/editorObject/editorObject.hpp" line="192" column="5" bodyfile="core_include/MainObjects/editorObject/editorObject.cpp" bodystart="168" bodyend="201"/>
      </memberdef>
      <memberdef kind="function" id="classeditor_object_1a634c551a93f376650075d82dcbe1ffd5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool editorObject::pushToRootDB</definition>
        <argsstring>(litedb &amp;ROOTDB, const UNSANITIZED &amp;musicTitle, const UNSANITIZED &amp;musicComposer)</argsstring>
        <name>pushToRootDB</name>
        <qualifiedname>editorObject::pushToRootDB</qualifiedname>
        <param>
          <type><ref refid="classlitedb" kindref="compound">litedb</ref> &amp;</type>
          <declname>ROOTDB</declname>
        </param>
        <param>
          <type>const <ref refid="file_name_sanitizer_8hpp_1a3dbfced66c4bb073515956060fd59604" kindref="member">UNSANITIZED</ref> &amp;</type>
          <declname>musicTitle</declname>
        </param>
        <param>
          <type>const <ref refid="file_name_sanitizer_8hpp_1a3dbfced66c4bb073515956060fd59604" kindref="member">UNSANITIZED</ref> &amp;</type>
          <declname>musicComposer</declname>
        </param>
        <briefdescription>
<para>Pushes a music entry to the root database. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ROOTDB</parametername>
</parameternamelist>
<parameterdescription>
<para>The root database to push to. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>musicTitle</parametername>
</parameternamelist>
<parameterdescription>
<para>The unsanitized title of the music. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>musicComposer</parametername>
</parameternamelist>
<parameterdescription>
<para>The unsanitized composer of the music. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if the push was successful, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core_include/MainObjects/editorObject/editorObject.hpp" line="202" column="5" bodyfile="core_include/MainObjects/editorObject/editorObject.cpp" bodystart="204" bodyend="289"/>
      </memberdef>
      <memberdef kind="function" id="classeditor_object_1a720a623f570f5fbeafb28e812a127938" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename EDIT_ARG_TYPE</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void editorObject::getAll</definition>
        <argsstring>(std::function&lt; void(const EDIT_ARG_TYPE &amp;obj)&gt; jsonCallback)</argsstring>
        <name>getAll</name>
        <qualifiedname>editorObject::getAll</qualifiedname>
        <param>
          <type>std::function&lt; void(const EDIT_ARG_TYPE &amp;obj)&gt;</type>
          <declname>jsonCallback</declname>
        </param>
        <briefdescription>
<para>Gets all data of a specific type from the editor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>EDIT_ARG_TYPE</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of data to get. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>jsonCallback</parametername>
</parameternamelist>
<parameterdescription>
<para>A callback function to process each data object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core_include/MainObjects/editorObject/editorObject.hpp" line="213" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classeditor_object_1af807921cf49ccaa0d561badcb5348087" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename EDIT_ARG_TYPE</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool editorObject::Undo</definition>
        <argsstring>()</argsstring>
        <name>Undo</name>
        <qualifiedname>editorObject::Undo</qualifiedname>
        <briefdescription>
<para>Undoes the last operation. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>EDIT_ARG_TYPE</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of data to undo. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if the undo was successful, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core_include/MainObjects/editorObject/editorObject.hpp" line="222" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classeditor_object_1a70a6c28f2ad7b19ff50427f14378291a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename EDIT_ARG_TYPE</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool editorObject::Undo</definition>
        <argsstring>(const UNSANITIZED &amp;musicName)</argsstring>
        <name>Undo</name>
        <qualifiedname>editorObject::Undo</qualifiedname>
        <param>
          <type>const <ref refid="file_name_sanitizer_8hpp_1a3dbfced66c4bb073515956060fd59604" kindref="member">UNSANITIZED</ref> &amp;</type>
          <declname>musicName</declname>
        </param>
        <briefdescription>
<para>Undoes the last operation for a specific music entry. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>EDIT_ARG_TYPE</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of data to undo. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>musicName</parametername>
</parameternamelist>
<parameterdescription>
<para>The unsanitized name of the music. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if the undo was successful, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core_include/MainObjects/editorObject/editorObject.hpp" line="232" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classeditor_object_1ae24df06774592614acbfb17701f4e2e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename EDIT_ARG_TYPE</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool editorObject::Redo</definition>
        <argsstring>()</argsstring>
        <name>Redo</name>
        <qualifiedname>editorObject::Redo</qualifiedname>
        <briefdescription>
<para>Redoes the last undone operation. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>EDIT_ARG_TYPE</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of data to redo. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if the redo was successful, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core_include/MainObjects/editorObject/editorObject.hpp" line="241" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classeditor_object_1a2987ce88cb1d9a435871f80398a76e63" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename EDIT_ARG_TYPE</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool editorObject::Redo</definition>
        <argsstring>(const UNSANITIZED &amp;musicName)</argsstring>
        <name>Redo</name>
        <qualifiedname>editorObject::Redo</qualifiedname>
        <param>
          <type>const <ref refid="file_name_sanitizer_8hpp_1a3dbfced66c4bb073515956060fd59604" kindref="member">UNSANITIZED</ref> &amp;</type>
          <declname>musicName</declname>
        </param>
        <briefdescription>
<para>Redoes the last undone operation for a specific music entry. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>EDIT_ARG_TYPE</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of data to redo. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>musicName</parametername>
</parameternamelist>
<parameterdescription>
<para>The unsanitized name of the music. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if the redo was successful, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core_include/MainObjects/editorObject/editorObject.hpp" line="251" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classeditor_object_1ad9b0dfe188373cfe8b0605cfcbba2093" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename EDIT_ARG_TYPE</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool editorObject::Go</definition>
        <argsstring>(const DONT_SANITIZE &amp;branchName, const DONT_SANITIZE &amp;commitOID)</argsstring>
        <name>Go</name>
        <qualifiedname>editorObject::Go</qualifiedname>
        <param>
          <type>const <ref refid="file_name_sanitizer_8hpp_1a2ec6d785f45dccabee178706d40c0d7d" kindref="member">DONT_SANITIZE</ref> &amp;</type>
          <declname>branchName</declname>
        </param>
        <param>
          <type>const <ref refid="file_name_sanitizer_8hpp_1a2ec6d785f45dccabee178706d40c0d7d" kindref="member">DONT_SANITIZE</ref> &amp;</type>
          <declname>commitOID</declname>
        </param>
        <briefdescription>
<para>Switches to a specific branch or commit. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>EDIT_ARG_TYPE</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of data to operate on. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>branchName</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the branch to switch to. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>commitOID</parametername>
</parameternamelist>
<parameterdescription>
<para>A oid string to the commit <ref refid="_mix_machine_8hpp_1a61bcf5b33c99ebcd26c016da6c8a69bc" kindref="member">ID</ref> to switch to. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if the operation was successful, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core_include/MainObjects/editorObject/editorObject.hpp" line="262" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classeditor_object_1a360e0000f965db643a0127f7240a425a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename EDIT_ARG_TYPE</type>
          </param>
        </templateparamlist>
        <type><ref refid="file_name_sanitizer_8hpp_1a2ec6d785f45dccabee178706d40c0d7d" kindref="member">DONT_SANITIZE</ref></type>
        <definition>DONT_SANITIZE editorObject::GetLogWithJSONGraph</definition>
        <argsstring>()</argsstring>
        <name>GetLogWithJSONGraph</name>
        <qualifiedname>editorObject::GetLogWithJSONGraph</qualifiedname>
        <briefdescription>
<para>Gets the commit log as a JSON graph. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>EDIT_ARG_TYPE</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of data to get the log for. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The commit log as a JSON string. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core_include/MainObjects/editorObject/editorObject.hpp" line="271" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classeditor_object_1a994b27da4e10c21758c374d77b638cad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename EDIT_ARG_TYPE</type>
          </param>
        </templateparamlist>
        <type><ref refid="file_name_sanitizer_8hpp_1a2ec6d785f45dccabee178706d40c0d7d" kindref="member">DONT_SANITIZE</ref></type>
        <definition>DONT_SANITIZE editorObject::GetLogWithJSONGraph</definition>
        <argsstring>(const UNSANITIZED &amp;musicName)</argsstring>
        <name>GetLogWithJSONGraph</name>
        <qualifiedname>editorObject::GetLogWithJSONGraph</qualifiedname>
        <param>
          <type>const <ref refid="file_name_sanitizer_8hpp_1a3dbfced66c4bb073515956060fd59604" kindref="member">UNSANITIZED</ref> &amp;</type>
          <declname>musicName</declname>
        </param>
        <briefdescription>
<para>Gets the commit log for a specific music entry as a JSON graph. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>EDIT_ARG_TYPE</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of data to get the log for. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>musicName</parametername>
</parameternamelist>
<parameterdescription>
<para>The unsanitized name of the music. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The commit log as a JSON string. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core_include/MainObjects/editorObject/editorObject.hpp" line="281" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classeditor_object_1af72d99c3cb239afe1f633ad592327ae7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename EDIT_ARG_TYPE</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool editorObject::UpdateLog</definition>
        <argsstring>()</argsstring>
        <name>UpdateLog</name>
        <qualifiedname>editorObject::UpdateLog</qualifiedname>
        <briefdescription>
<para>Updates the commit log. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>EDIT_ARG_TYPE</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of data to update the log for. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if the update was successful, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core_include/MainObjects/editorObject/editorObject.hpp" line="290" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classeditor_object_1a551a8f7e02b6d1723a8699af450daa79" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename EDIT_ARG_TYPE</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool editorObject::UpdateLog</definition>
        <argsstring>(const DONT_SANITIZE &amp;branchName)</argsstring>
        <name>UpdateLog</name>
        <qualifiedname>editorObject::UpdateLog</qualifiedname>
        <param>
          <type>const <ref refid="file_name_sanitizer_8hpp_1a2ec6d785f45dccabee178706d40c0d7d" kindref="member">DONT_SANITIZE</ref> &amp;</type>
          <declname>branchName</declname>
        </param>
        <briefdescription>
<para>Updates the commit log for a specific branch. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>EDIT_ARG_TYPE</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of data to update the log for. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>branchName</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the branch to update. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if the update was successful, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core_include/MainObjects/editorObject/editorObject.hpp" line="300" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classeditor_object_1a28dc3aa435512e4ad16ad0f821c64907" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename EDIT_ARG_TYPE</type>
          </param>
        </templateparamlist>
        <type><ref refid="struct_diff_result" kindref="compound">DiffResult</ref></type>
        <definition>DiffResult editorObject::GetDiff</definition>
        <argsstring>(const gitwrap::commit &amp;oldTimeStamp, const gitwrap::commit &amp;newTimeStamp)</argsstring>
        <name>GetDiff</name>
        <qualifiedname>editorObject::GetDiff</qualifiedname>
        <param>
          <type>const <ref refid="structgitwrap_1_1commit" kindref="compound">gitwrap::commit</ref> &amp;</type>
          <declname>oldTimeStamp</declname>
        </param>
        <param>
          <type>const <ref refid="structgitwrap_1_1commit" kindref="compound">gitwrap::commit</ref> &amp;</type>
          <declname>newTimeStamp</declname>
        </param>
        <briefdescription>
<para>Gets the diff between two timestamps. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>EDIT_ARG_TYPE</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of data to get the diff for. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>oldTimeStamp</parametername>
</parameternamelist>
<parameterdescription>
<para>The old timestamp. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>newTimeStamp</parametername>
</parameternamelist>
<parameterdescription>
<para>The new timestamp. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A <computeroutput><ref refid="struct_diff_result" kindref="compound">DiffResult</ref></computeroutput> object containing the diff. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core_include/MainObjects/editorObject/editorObject.hpp" line="311" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classeditor_object_1aa664471474287d500e65d09f08f61001" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="json_wrapper_8hpp_1a6c08a6bca89aa954d4bf90371a27dfa9" kindref="member">nj</ref> &amp;</type>
        <definition>nj &amp; editorObject::operator[]</definition>
        <argsstring>(const DONT_SANITIZE &amp;key)</argsstring>
        <name>operator[]</name>
        <qualifiedname>editorObject::operator[]</qualifiedname>
        <param>
          <type>const <ref refid="file_name_sanitizer_8hpp_1a2ec6d785f45dccabee178706d40c0d7d" kindref="member">DONT_SANITIZE</ref> &amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>Provides access to the underlying JSON data for key-value pairs. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>The key to access. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A reference to the JSON value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core_include/MainObjects/editorObject/editorObject.hpp" line="320" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classeditor_object_1a9e14b13d0a93115510856587e3d0b597" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="file_name_sanitizer_8hpp_1a2ec6d785f45dccabee178706d40c0d7d" kindref="member">DONT_SANITIZE</ref></type>
        <definition>DONT_SANITIZE editorObject::DESTROY_PROJECT</definition>
        <argsstring>()</argsstring>
        <name>DESTROY_PROJECT</name>
        <qualifiedname>editorObject::DESTROY_PROJECT</qualifiedname>
        <briefdescription>
<para>Destroys the entire project. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>This operation is irreversible. </para>
</simplesect>
<simplesect kind="return"><para>A string indicating the result of the operation. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core_include/MainObjects/editorObject/editorObject.hpp" line="328" column="5" bodyfile="core_include/MainObjects/editorObject/editorObject.cpp" bodystart="70" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="classeditor_object_1a3ec9d3ccf73457ee3067cd3f47ac23c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool editorObject::ConfigNewMusic</definition>
        <argsstring>(const UNSANITIZED &amp;NewMusicName, const UNSANITIZED &amp;composer, const fs::path &amp;musicPath, const DONT_SANITIZE &amp;firstBeat=&quot;0&quot;)</argsstring>
        <name>ConfigNewMusic</name>
        <qualifiedname>editorObject::ConfigNewMusic</qualifiedname>
        <param>
          <type>const <ref refid="file_name_sanitizer_8hpp_1a3dbfced66c4bb073515956060fd59604" kindref="member">UNSANITIZED</ref> &amp;</type>
          <declname>NewMusicName</declname>
        </param>
        <param>
          <type>const <ref refid="file_name_sanitizer_8hpp_1a3dbfced66c4bb073515956060fd59604" kindref="member">UNSANITIZED</ref> &amp;</type>
          <declname>composer</declname>
        </param>
        <param>
          <type>const fs::path &amp;</type>
          <declname>musicPath</declname>
        </param>
        <param>
          <type>const <ref refid="file_name_sanitizer_8hpp_1a2ec6d785f45dccabee178706d40c0d7d" kindref="member">DONT_SANITIZE</ref> &amp;</type>
          <declname>firstBeat</declname>
          <defval>&quot;0&quot;</defval>
        </param>
        <briefdescription>
<para>Configures a new music entry. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>NewMusicName</parametername>
</parameternamelist>
<parameterdescription>
<para>The unsanitized name of the new music. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>composer</parametername>
</parameternamelist>
<parameterdescription>
<para>The unsanitized composer of the new music. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>musicPath</parametername>
</parameternamelist>
<parameterdescription>
<para>The path to the music file. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>firstBeat</parametername>
</parameternamelist>
<parameterdescription>
<para>The first Beat of the music (defaults to &quot;0&quot;). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if the configuration was successful, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core_include/MainObjects/editorObject/editorObject.hpp" line="339" column="5" bodyfile="core_include/MainObjects/editorObject/editorObject.cpp" bodystart="90" bodyend="152"/>
      </memberdef>
      <memberdef kind="function" id="classeditor_object_1adb7115154add6c06baf9c4e090977d24" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool editorObject::Open</definition>
        <argsstring>(const fs::path &amp;projectPath)</argsstring>
        <name>Open</name>
        <qualifiedname>editorObject::Open</qualifiedname>
        <param>
          <type>const fs::path &amp;</type>
          <declname>projectPath</declname>
        </param>
        <briefdescription>
<para>Opens an existing editor project. if <ref refid="class_p_d_j_e" kindref="compound">PDJE</ref> called InitEditor, you don&apos;t need to call this again. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>projectPath</parametername>
</parameternamelist>
<parameterdescription>
<para>The path to the project. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if the project was opened successfully, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core_include/MainObjects/editorObject/editorObject.hpp" line="351" column="5" bodyfile="core_include/MainObjects/editorObject/editorObject.cpp" bodystart="155" bodyend="165"/>
      </memberdef>
      <memberdef kind="function" id="classeditor_object_1a690ad4f1302edbb56c2ae2cdba91189d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>editorObject::editorObject</definition>
        <argsstring>()=delete</argsstring>
        <name>editorObject</name>
        <qualifiedname>editorObject::editorObject</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core_include/MainObjects/editorObject/editorObject.hpp" line="353" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classeditor_object_1a7a44ba5a8abd1bdacdf538b08360339b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>editorObject::editorObject</definition>
        <argsstring>(const DONT_SANITIZE &amp;auth_name, const DONT_SANITIZE &amp;auth_email)</argsstring>
        <name>editorObject</name>
        <qualifiedname>editorObject::editorObject</qualifiedname>
        <param>
          <type>const <ref refid="file_name_sanitizer_8hpp_1a2ec6d785f45dccabee178706d40c0d7d" kindref="member">DONT_SANITIZE</ref> &amp;</type>
          <declname>auth_name</declname>
        </param>
        <param>
          <type>const <ref refid="file_name_sanitizer_8hpp_1a2ec6d785f45dccabee178706d40c0d7d" kindref="member">DONT_SANITIZE</ref> &amp;</type>
          <declname>auth_email</declname>
        </param>
        <briefdescription>
<para>Constructs a new editor object with author information. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>auth_name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the author. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>auth_email</parametername>
</parameternamelist>
<parameterdescription>
<para>The email of the author. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core_include/MainObjects/editorObject/editorObject.hpp" line="360" column="5" bodyfile="core_include/MainObjects/editorObject/editorObject.hpp" bodystart="360" bodyend="364"/>
      </memberdef>
      <memberdef kind="function" id="classeditor_object_1ae5c4229489a3b798968960d7806a96a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>editorObject::~editorObject</definition>
        <argsstring>()=default</argsstring>
        <name>~editorObject</name>
        <qualifiedname>editorObject::~editorObject</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core_include/MainObjects/editorObject/editorObject.hpp" line="366" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classeditor_object_1ad3274f4153e7e8845a5c5d048f037901" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>bool</type>
        <definition>bool editorObject::AddLine</definition>
        <argsstring>(const EDIT_ARG_MUSIC &amp;obj)</argsstring>
        <name>AddLine</name>
        <qualifiedname>editorObject::AddLine</qualifiedname>
        <param>
          <type>const <ref refid="struct_e_d_i_t___a_r_g___m_u_s_i_c" kindref="compound">EDIT_ARG_MUSIC</ref> &amp;</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core_include/MainObjects/editorObject/addline.cpp" line="5" column="1" bodyfile="core_include/MainObjects/editorObject/addline.cpp" bodystart="5" bodyend="22"/>
      </memberdef>
      <memberdef kind="function" id="classeditor_object_1a85dd1bfab830dc51fd12f6f27956ec19" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>bool</type>
        <definition>bool editorObject::AddLine</definition>
        <argsstring>(const EDIT_ARG_MIX &amp;obj)</argsstring>
        <name>AddLine</name>
        <qualifiedname>editorObject::AddLine</qualifiedname>
        <param>
          <type>const <ref refid="editor_object_8hpp_1a8c7c688d1e63ff780f13669e00fc091c" kindref="member">EDIT_ARG_MIX</ref> &amp;</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core_include/MainObjects/editorObject/addline.cpp" line="26" column="1" bodyfile="core_include/MainObjects/editorObject/addline.cpp" bodystart="26" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="classeditor_object_1aa6a8bd9998b64a8ee9bc46cd185b518f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>bool</type>
        <definition>bool editorObject::AddLine</definition>
        <argsstring>(const EDIT_ARG_NOTE &amp;obj)</argsstring>
        <name>AddLine</name>
        <qualifiedname>editorObject::AddLine</qualifiedname>
        <param>
          <type>const <ref refid="editor_object_8hpp_1a2de2e14491806b81a5ba85836b550f18" kindref="member">EDIT_ARG_NOTE</ref> &amp;</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core_include/MainObjects/editorObject/addline.cpp" line="64" column="1" bodyfile="core_include/MainObjects/editorObject/addline.cpp" bodystart="64" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="classeditor_object_1a307c57aa6a231f6394d82be67a1d94ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>bool</type>
        <definition>bool editorObject::AddLine</definition>
        <argsstring>(const EDIT_ARG_KEY_VALUE &amp;obj)</argsstring>
        <name>AddLine</name>
        <qualifiedname>editorObject::AddLine</qualifiedname>
        <param>
          <type>const <ref refid="editor_object_8hpp_1a305098bfe154230cbef2fbe44e5f9220" kindref="member">EDIT_ARG_KEY_VALUE</ref> &amp;</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core_include/MainObjects/editorObject/addline.cpp" line="81" column="1" bodyfile="core_include/MainObjects/editorObject/addline.cpp" bodystart="81" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="classeditor_object_1a1470c80235c92292a246fa3f9ce15865" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>int</type>
        <definition>int editorObject::deleteLine</definition>
        <argsstring>(const EDIT_ARG_NOTE &amp;obj)</argsstring>
        <name>deleteLine</name>
        <qualifiedname>editorObject::deleteLine</qualifiedname>
        <param>
          <type>const <ref refid="editor_object_8hpp_1a2de2e14491806b81a5ba85836b550f18" kindref="member">EDIT_ARG_NOTE</ref> &amp;</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core_include/MainObjects/editorObject/deleteline.cpp" line="20" column="1" bodyfile="core_include/MainObjects/editorObject/deleteline.cpp" bodystart="20" bodyend="29"/>
      </memberdef>
      <memberdef kind="function" id="classeditor_object_1a0d5200a4e92a2faee32536810298f590" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>int</type>
        <definition>int editorObject::deleteLine</definition>
        <argsstring>(const EDIT_ARG_KEY_VALUE &amp;obj)</argsstring>
        <name>deleteLine</name>
        <qualifiedname>editorObject::deleteLine</qualifiedname>
        <param>
          <type>const <ref refid="editor_object_8hpp_1a305098bfe154230cbef2fbe44e5f9220" kindref="member">EDIT_ARG_KEY_VALUE</ref> &amp;</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core_include/MainObjects/editorObject/deleteline.cpp" line="33" column="1" bodyfile="core_include/MainObjects/editorObject/deleteline.cpp" bodystart="33" bodyend="42"/>
      </memberdef>
      <memberdef kind="function" id="classeditor_object_1a6ab0f93838db62d7e61e9d4f97838e2b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>int</type>
        <definition>int editorObject::deleteLine</definition>
        <argsstring>(const EDIT_ARG_MUSIC &amp;obj)</argsstring>
        <name>deleteLine</name>
        <qualifiedname>editorObject::deleteLine</qualifiedname>
        <param>
          <type>const <ref refid="struct_e_d_i_t___a_r_g___m_u_s_i_c" kindref="compound">EDIT_ARG_MUSIC</ref> &amp;</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core_include/MainObjects/editorObject/deleteline.cpp" line="46" column="1" bodyfile="core_include/MainObjects/editorObject/deleteline.cpp" bodystart="46" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="classeditor_object_1ab4d9fad40219f8d0abf61d62fe6148ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>bool</type>
        <definition>bool editorObject::Undo</definition>
        <argsstring>()</argsstring>
        <name>Undo</name>
        <qualifiedname>editorObject::Undo</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core_include/MainObjects/editorObject/editorObject.hpp" line="370" column="2"/>
      </memberdef>
      <memberdef kind="function" id="classeditor_object_1ab4d9fad40219f8d0abf61d62fe6148ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>bool</type>
        <definition>bool editorObject::Undo</definition>
        <argsstring>()</argsstring>
        <name>Undo</name>
        <qualifiedname>editorObject::Undo</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core_include/MainObjects/editorObject/editorObject.hpp" line="373" column="2"/>
      </memberdef>
      <memberdef kind="function" id="classeditor_object_1ab4d9fad40219f8d0abf61d62fe6148ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>bool</type>
        <definition>bool editorObject::Undo</definition>
        <argsstring>()</argsstring>
        <name>Undo</name>
        <qualifiedname>editorObject::Undo</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core_include/MainObjects/editorObject/editorObject.hpp" line="376" column="2"/>
      </memberdef>
      <memberdef kind="function" id="classeditor_object_1a789f87b8ed201e8e08b22ba6bc3311b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>bool</type>
        <definition>bool editorObject::Undo</definition>
        <argsstring>(const UNSANITIZED &amp;musicName)</argsstring>
        <name>Undo</name>
        <qualifiedname>editorObject::Undo</qualifiedname>
        <param>
          <type>const <ref refid="file_name_sanitizer_8hpp_1a3dbfced66c4bb073515956060fd59604" kindref="member">UNSANITIZED</ref> &amp;</type>
          <declname>musicName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core_include/MainObjects/editorObject/editorObject.hpp" line="379" column="2"/>
      </memberdef>
      <memberdef kind="function" id="classeditor_object_1aa6a8bd9998b64a8ee9bc46cd185b518f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>bool</type>
        <definition>bool editorObject::AddLine</definition>
        <argsstring>(const EDIT_ARG_NOTE &amp;obj)</argsstring>
        <name>AddLine</name>
        <qualifiedname>editorObject::AddLine</qualifiedname>
        <param>
          <type>const <ref refid="editor_object_8hpp_1a2de2e14491806b81a5ba85836b550f18" kindref="member">EDIT_ARG_NOTE</ref> &amp;</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core_include/MainObjects/editorObject/editorObject.hpp" line="383" column="2"/>
      </memberdef>
      <memberdef kind="function" id="classeditor_object_1a85dd1bfab830dc51fd12f6f27956ec19" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>bool</type>
        <definition>bool editorObject::AddLine</definition>
        <argsstring>(const EDIT_ARG_MIX &amp;obj)</argsstring>
        <name>AddLine</name>
        <qualifiedname>editorObject::AddLine</qualifiedname>
        <param>
          <type>const <ref refid="editor_object_8hpp_1a8c7c688d1e63ff780f13669e00fc091c" kindref="member">EDIT_ARG_MIX</ref> &amp;</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core_include/MainObjects/editorObject/editorObject.hpp" line="386" column="2"/>
      </memberdef>
      <memberdef kind="function" id="classeditor_object_1a307c57aa6a231f6394d82be67a1d94ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>bool</type>
        <definition>bool editorObject::AddLine</definition>
        <argsstring>(const EDIT_ARG_KEY_VALUE &amp;obj)</argsstring>
        <name>AddLine</name>
        <qualifiedname>editorObject::AddLine</qualifiedname>
        <param>
          <type>const <ref refid="editor_object_8hpp_1a305098bfe154230cbef2fbe44e5f9220" kindref="member">EDIT_ARG_KEY_VALUE</ref> &amp;</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core_include/MainObjects/editorObject/editorObject.hpp" line="389" column="2"/>
      </memberdef>
      <memberdef kind="function" id="classeditor_object_1ad3274f4153e7e8845a5c5d048f037901" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>bool</type>
        <definition>bool editorObject::AddLine</definition>
        <argsstring>(const EDIT_ARG_MUSIC &amp;obj)</argsstring>
        <name>AddLine</name>
        <qualifiedname>editorObject::AddLine</qualifiedname>
        <param>
          <type>const <ref refid="struct_e_d_i_t___a_r_g___m_u_s_i_c" kindref="compound">EDIT_ARG_MUSIC</ref> &amp;</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core_include/MainObjects/editorObject/editorObject.hpp" line="392" column="2"/>
      </memberdef>
      <memberdef kind="function" id="classeditor_object_1a1470c80235c92292a246fa3f9ce15865" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>int</type>
        <definition>int editorObject::deleteLine</definition>
        <argsstring>(const EDIT_ARG_NOTE &amp;obj)</argsstring>
        <name>deleteLine</name>
        <qualifiedname>editorObject::deleteLine</qualifiedname>
        <param>
          <type>const <ref refid="editor_object_8hpp_1a2de2e14491806b81a5ba85836b550f18" kindref="member">EDIT_ARG_NOTE</ref> &amp;</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core_include/MainObjects/editorObject/editorObject.hpp" line="410" column="2"/>
      </memberdef>
      <memberdef kind="function" id="classeditor_object_1a0d5200a4e92a2faee32536810298f590" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>int</type>
        <definition>int editorObject::deleteLine</definition>
        <argsstring>(const EDIT_ARG_KEY_VALUE &amp;obj)</argsstring>
        <name>deleteLine</name>
        <qualifiedname>editorObject::deleteLine</qualifiedname>
        <param>
          <type>const <ref refid="editor_object_8hpp_1a305098bfe154230cbef2fbe44e5f9220" kindref="member">EDIT_ARG_KEY_VALUE</ref> &amp;</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core_include/MainObjects/editorObject/editorObject.hpp" line="413" column="2"/>
      </memberdef>
      <memberdef kind="function" id="classeditor_object_1a6ab0f93838db62d7e61e9d4f97838e2b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>int</type>
        <definition>int editorObject::deleteLine</definition>
        <argsstring>(const EDIT_ARG_MUSIC &amp;obj)</argsstring>
        <name>deleteLine</name>
        <qualifiedname>editorObject::deleteLine</qualifiedname>
        <param>
          <type>const <ref refid="struct_e_d_i_t___a_r_g___m_u_s_i_c" kindref="compound">EDIT_ARG_MUSIC</ref> &amp;</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core_include/MainObjects/editorObject/editorObject.hpp" line="416" column="2"/>
      </memberdef>
      <memberdef kind="function" id="classeditor_object_1a77db8c854567b251bec9cebd5e91c662" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>void</type>
        <definition>void editorObject::getAll</definition>
        <argsstring>(std::function&lt; void(const EDIT_ARG_NOTE &amp;obj)&gt; jsonCallback)</argsstring>
        <name>getAll</name>
        <qualifiedname>editorObject::getAll</qualifiedname>
        <param>
          <type>std::function&lt; void(const <ref refid="editor_object_8hpp_1a2de2e14491806b81a5ba85836b550f18" kindref="member">EDIT_ARG_NOTE</ref> &amp;obj)&gt;</type>
          <declname>jsonCallback</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core_include/MainObjects/editorObject/editorObject.hpp" line="420" column="2"/>
      </memberdef>
      <memberdef kind="function" id="classeditor_object_1a16ef00ce6ae7569f39a60ff8f382bd1c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>void</type>
        <definition>void editorObject::getAll</definition>
        <argsstring>(std::function&lt; void(const EDIT_ARG_MIX &amp;obj)&gt; jsonCallback)</argsstring>
        <name>getAll</name>
        <qualifiedname>editorObject::getAll</qualifiedname>
        <param>
          <type>std::function&lt; void(const <ref refid="editor_object_8hpp_1a8c7c688d1e63ff780f13669e00fc091c" kindref="member">EDIT_ARG_MIX</ref> &amp;obj)&gt;</type>
          <declname>jsonCallback</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core_include/MainObjects/editorObject/editorObject.hpp" line="424" column="2"/>
      </memberdef>
      <memberdef kind="function" id="classeditor_object_1a479985c5e13f1986c6b88ceac67924c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>void</type>
        <definition>void editorObject::getAll</definition>
        <argsstring>(std::function&lt; void(const EDIT_ARG_KEY_VALUE &amp;obj)&gt; jsonCallback)</argsstring>
        <name>getAll</name>
        <qualifiedname>editorObject::getAll</qualifiedname>
        <param>
          <type>std::function&lt; void(const <ref refid="editor_object_8hpp_1a305098bfe154230cbef2fbe44e5f9220" kindref="member">EDIT_ARG_KEY_VALUE</ref> &amp;obj)&gt;</type>
          <declname>jsonCallback</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core_include/MainObjects/editorObject/editorObject.hpp" line="428" column="2"/>
      </memberdef>
      <memberdef kind="function" id="classeditor_object_1a5fff7bdde5101a29d10a25989c8e248d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>void</type>
        <definition>void editorObject::getAll</definition>
        <argsstring>(std::function&lt; void(const EDIT_ARG_MUSIC &amp;obj)&gt; jsonCallback)</argsstring>
        <name>getAll</name>
        <qualifiedname>editorObject::getAll</qualifiedname>
        <param>
          <type>std::function&lt; void(const <ref refid="struct_e_d_i_t___a_r_g___m_u_s_i_c" kindref="compound">EDIT_ARG_MUSIC</ref> &amp;obj)&gt;</type>
          <declname>jsonCallback</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core_include/MainObjects/editorObject/editorObject.hpp" line="432" column="2"/>
      </memberdef>
      <memberdef kind="function" id="classeditor_object_1aac2481cb9b8cdce5b8b4bb955d75ecb0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="struct_diff_result" kindref="compound">DiffResult</ref></type>
        <definition>DiffResult editorObject::GetDiff</definition>
        <argsstring>(const gitwrap::commit &amp;oldTimeStamp, const gitwrap::commit &amp;newTimeStamp)</argsstring>
        <name>GetDiff</name>
        <qualifiedname>editorObject::GetDiff</qualifiedname>
        <param>
          <type>const <ref refid="structgitwrap_1_1commit" kindref="compound">gitwrap::commit</ref> &amp;</type>
          <declname>oldTimeStamp</declname>
        </param>
        <param>
          <type>const <ref refid="structgitwrap_1_1commit" kindref="compound">gitwrap::commit</ref> &amp;</type>
          <declname>newTimeStamp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core_include/MainObjects/editorObject/editorObject.hpp" line="437" column="2"/>
      </memberdef>
      <memberdef kind="function" id="classeditor_object_1aac2481cb9b8cdce5b8b4bb955d75ecb0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="struct_diff_result" kindref="compound">DiffResult</ref></type>
        <definition>DiffResult editorObject::GetDiff</definition>
        <argsstring>(const gitwrap::commit &amp;oldTimeStamp, const gitwrap::commit &amp;newTimeStamp)</argsstring>
        <name>GetDiff</name>
        <qualifiedname>editorObject::GetDiff</qualifiedname>
        <param>
          <type>const <ref refid="structgitwrap_1_1commit" kindref="compound">gitwrap::commit</ref> &amp;</type>
          <declname>oldTimeStamp</declname>
        </param>
        <param>
          <type>const <ref refid="structgitwrap_1_1commit" kindref="compound">gitwrap::commit</ref> &amp;</type>
          <declname>newTimeStamp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core_include/MainObjects/editorObject/editorObject.hpp" line="441" column="2"/>
      </memberdef>
      <memberdef kind="function" id="classeditor_object_1aac2481cb9b8cdce5b8b4bb955d75ecb0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="struct_diff_result" kindref="compound">DiffResult</ref></type>
        <definition>DiffResult editorObject::GetDiff</definition>
        <argsstring>(const gitwrap::commit &amp;oldTimeStamp, const gitwrap::commit &amp;newTimeStamp)</argsstring>
        <name>GetDiff</name>
        <qualifiedname>editorObject::GetDiff</qualifiedname>
        <param>
          <type>const <ref refid="structgitwrap_1_1commit" kindref="compound">gitwrap::commit</ref> &amp;</type>
          <declname>oldTimeStamp</declname>
        </param>
        <param>
          <type>const <ref refid="structgitwrap_1_1commit" kindref="compound">gitwrap::commit</ref> &amp;</type>
          <declname>newTimeStamp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core_include/MainObjects/editorObject/editorObject.hpp" line="445" column="2"/>
      </memberdef>
      <memberdef kind="function" id="classeditor_object_1aac2481cb9b8cdce5b8b4bb955d75ecb0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="struct_diff_result" kindref="compound">DiffResult</ref></type>
        <definition>DiffResult editorObject::GetDiff</definition>
        <argsstring>(const gitwrap::commit &amp;oldTimeStamp, const gitwrap::commit &amp;newTimeStamp)</argsstring>
        <name>GetDiff</name>
        <qualifiedname>editorObject::GetDiff</qualifiedname>
        <param>
          <type>const <ref refid="structgitwrap_1_1commit" kindref="compound">gitwrap::commit</ref> &amp;</type>
          <declname>oldTimeStamp</declname>
        </param>
        <param>
          <type>const <ref refid="structgitwrap_1_1commit" kindref="compound">gitwrap::commit</ref> &amp;</type>
          <declname>newTimeStamp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core_include/MainObjects/editorObject/editorObject.hpp" line="449" column="2"/>
      </memberdef>
      <memberdef kind="function" id="classeditor_object_1af2cfb77e5f312a23c61c34d3f9a04b51" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="file_name_sanitizer_8hpp_1a2ec6d785f45dccabee178706d40c0d7d" kindref="member">DONT_SANITIZE</ref></type>
        <definition>DONT_SANITIZE editorObject::GetLogWithJSONGraph</definition>
        <argsstring>()</argsstring>
        <name>GetLogWithJSONGraph</name>
        <qualifiedname>editorObject::GetLogWithJSONGraph</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core_include/MainObjects/editorObject/editorObject.hpp" line="454" column="2"/>
      </memberdef>
      <memberdef kind="function" id="classeditor_object_1af2cfb77e5f312a23c61c34d3f9a04b51" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="file_name_sanitizer_8hpp_1a2ec6d785f45dccabee178706d40c0d7d" kindref="member">DONT_SANITIZE</ref></type>
        <definition>DONT_SANITIZE editorObject::GetLogWithJSONGraph</definition>
        <argsstring>()</argsstring>
        <name>GetLogWithJSONGraph</name>
        <qualifiedname>editorObject::GetLogWithJSONGraph</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core_include/MainObjects/editorObject/editorObject.hpp" line="457" column="2"/>
      </memberdef>
      <memberdef kind="function" id="classeditor_object_1af2cfb77e5f312a23c61c34d3f9a04b51" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="file_name_sanitizer_8hpp_1a2ec6d785f45dccabee178706d40c0d7d" kindref="member">DONT_SANITIZE</ref></type>
        <definition>DONT_SANITIZE editorObject::GetLogWithJSONGraph</definition>
        <argsstring>()</argsstring>
        <name>GetLogWithJSONGraph</name>
        <qualifiedname>editorObject::GetLogWithJSONGraph</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core_include/MainObjects/editorObject/editorObject.hpp" line="460" column="2"/>
      </memberdef>
      <memberdef kind="function" id="classeditor_object_1af2cfb77e5f312a23c61c34d3f9a04b51" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="file_name_sanitizer_8hpp_1a2ec6d785f45dccabee178706d40c0d7d" kindref="member">DONT_SANITIZE</ref></type>
        <definition>DONT_SANITIZE editorObject::GetLogWithJSONGraph</definition>
        <argsstring>()</argsstring>
        <name>GetLogWithJSONGraph</name>
        <qualifiedname>editorObject::GetLogWithJSONGraph</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core_include/MainObjects/editorObject/editorObject.hpp" line="463" column="2"/>
      </memberdef>
      <memberdef kind="function" id="classeditor_object_1a51962d2a580b4eab625d260ffedbd19a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>bool</type>
        <definition>bool editorObject::Go</definition>
        <argsstring>(const DONT_SANITIZE &amp;branchName, const DONT_SANITIZE &amp;commitOID)</argsstring>
        <name>Go</name>
        <qualifiedname>editorObject::Go</qualifiedname>
        <param>
          <type>const <ref refid="file_name_sanitizer_8hpp_1a2ec6d785f45dccabee178706d40c0d7d" kindref="member">DONT_SANITIZE</ref> &amp;</type>
          <declname>branchName</declname>
        </param>
        <param>
          <type>const <ref refid="file_name_sanitizer_8hpp_1a2ec6d785f45dccabee178706d40c0d7d" kindref="member">DONT_SANITIZE</ref> &amp;</type>
          <declname>commitOID</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core_include/MainObjects/editorObject/editorObject.hpp" line="467" column="2"/>
      </memberdef>
      <memberdef kind="function" id="classeditor_object_1a51962d2a580b4eab625d260ffedbd19a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>bool</type>
        <definition>bool editorObject::Go</definition>
        <argsstring>(const DONT_SANITIZE &amp;branchName, const DONT_SANITIZE &amp;commitOID)</argsstring>
        <name>Go</name>
        <qualifiedname>editorObject::Go</qualifiedname>
        <param>
          <type>const <ref refid="file_name_sanitizer_8hpp_1a2ec6d785f45dccabee178706d40c0d7d" kindref="member">DONT_SANITIZE</ref> &amp;</type>
          <declname>branchName</declname>
        </param>
        <param>
          <type>const <ref refid="file_name_sanitizer_8hpp_1a2ec6d785f45dccabee178706d40c0d7d" kindref="member">DONT_SANITIZE</ref> &amp;</type>
          <declname>commitOID</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core_include/MainObjects/editorObject/editorObject.hpp" line="471" column="2"/>
      </memberdef>
      <memberdef kind="function" id="classeditor_object_1a51962d2a580b4eab625d260ffedbd19a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>bool</type>
        <definition>bool editorObject::Go</definition>
        <argsstring>(const DONT_SANITIZE &amp;branchName, const DONT_SANITIZE &amp;commitOID)</argsstring>
        <name>Go</name>
        <qualifiedname>editorObject::Go</qualifiedname>
        <param>
          <type>const <ref refid="file_name_sanitizer_8hpp_1a2ec6d785f45dccabee178706d40c0d7d" kindref="member">DONT_SANITIZE</ref> &amp;</type>
          <declname>branchName</declname>
        </param>
        <param>
          <type>const <ref refid="file_name_sanitizer_8hpp_1a2ec6d785f45dccabee178706d40c0d7d" kindref="member">DONT_SANITIZE</ref> &amp;</type>
          <declname>commitOID</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core_include/MainObjects/editorObject/editorObject.hpp" line="475" column="2"/>
      </memberdef>
      <memberdef kind="function" id="classeditor_object_1a51962d2a580b4eab625d260ffedbd19a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>bool</type>
        <definition>bool editorObject::Go</definition>
        <argsstring>(const DONT_SANITIZE &amp;branchName, const DONT_SANITIZE &amp;commitOID)</argsstring>
        <name>Go</name>
        <qualifiedname>editorObject::Go</qualifiedname>
        <param>
          <type>const <ref refid="file_name_sanitizer_8hpp_1a2ec6d785f45dccabee178706d40c0d7d" kindref="member">DONT_SANITIZE</ref> &amp;</type>
          <declname>branchName</declname>
        </param>
        <param>
          <type>const <ref refid="file_name_sanitizer_8hpp_1a2ec6d785f45dccabee178706d40c0d7d" kindref="member">DONT_SANITIZE</ref> &amp;</type>
          <declname>commitOID</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core_include/MainObjects/editorObject/editorObject.hpp" line="479" column="2"/>
      </memberdef>
      <memberdef kind="function" id="classeditor_object_1aefa353d96fd225e77138f1ebb482f2a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>bool</type>
        <definition>bool editorObject::Redo</definition>
        <argsstring>()</argsstring>
        <name>Redo</name>
        <qualifiedname>editorObject::Redo</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core_include/MainObjects/editorObject/editorObject.hpp" line="484" column="2"/>
      </memberdef>
      <memberdef kind="function" id="classeditor_object_1aefa353d96fd225e77138f1ebb482f2a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>bool</type>
        <definition>bool editorObject::Redo</definition>
        <argsstring>()</argsstring>
        <name>Redo</name>
        <qualifiedname>editorObject::Redo</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core_include/MainObjects/editorObject/editorObject.hpp" line="487" column="2"/>
      </memberdef>
      <memberdef kind="function" id="classeditor_object_1aefa353d96fd225e77138f1ebb482f2a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>bool</type>
        <definition>bool editorObject::Redo</definition>
        <argsstring>()</argsstring>
        <name>Redo</name>
        <qualifiedname>editorObject::Redo</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core_include/MainObjects/editorObject/editorObject.hpp" line="490" column="2"/>
      </memberdef>
      <memberdef kind="function" id="classeditor_object_1a6c4c8c3a96ae891026202464c3117f5d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>bool</type>
        <definition>bool editorObject::Redo</definition>
        <argsstring>(const UNSANITIZED &amp;musicName)</argsstring>
        <name>Redo</name>
        <qualifiedname>editorObject::Redo</qualifiedname>
        <param>
          <type>const <ref refid="file_name_sanitizer_8hpp_1a3dbfced66c4bb073515956060fd59604" kindref="member">UNSANITIZED</ref> &amp;</type>
          <declname>musicName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core_include/MainObjects/editorObject/editorObject.hpp" line="493" column="2"/>
      </memberdef>
      <memberdef kind="function" id="classeditor_object_1ab4d9fad40219f8d0abf61d62fe6148ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>bool</type>
        <definition>bool editorObject::Undo</definition>
        <argsstring>()</argsstring>
        <name>Undo</name>
        <qualifiedname>editorObject::Undo</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core_include/MainObjects/editorObject/editorObject.hpp" line="497" column="2"/>
      </memberdef>
      <memberdef kind="function" id="classeditor_object_1ab4d9fad40219f8d0abf61d62fe6148ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>bool</type>
        <definition>bool editorObject::Undo</definition>
        <argsstring>()</argsstring>
        <name>Undo</name>
        <qualifiedname>editorObject::Undo</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core_include/MainObjects/editorObject/editorObject.hpp" line="500" column="2"/>
      </memberdef>
      <memberdef kind="function" id="classeditor_object_1ab4d9fad40219f8d0abf61d62fe6148ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>bool</type>
        <definition>bool editorObject::Undo</definition>
        <argsstring>()</argsstring>
        <name>Undo</name>
        <qualifiedname>editorObject::Undo</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core_include/MainObjects/editorObject/editorObject.hpp" line="503" column="2"/>
      </memberdef>
      <memberdef kind="function" id="classeditor_object_1a789f87b8ed201e8e08b22ba6bc3311b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>bool</type>
        <definition>bool editorObject::Undo</definition>
        <argsstring>(const UNSANITIZED &amp;musicName)</argsstring>
        <name>Undo</name>
        <qualifiedname>editorObject::Undo</qualifiedname>
        <param>
          <type>const <ref refid="file_name_sanitizer_8hpp_1a3dbfced66c4bb073515956060fd59604" kindref="member">UNSANITIZED</ref> &amp;</type>
          <declname>musicName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core_include/MainObjects/editorObject/editorObject.hpp" line="506" column="2"/>
      </memberdef>
      <memberdef kind="function" id="classeditor_object_1a4c49089d69f7f45e1ed9900e67338551" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>bool</type>
        <definition>bool editorObject::UpdateLog</definition>
        <argsstring>()</argsstring>
        <name>UpdateLog</name>
        <qualifiedname>editorObject::UpdateLog</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core_include/MainObjects/editorObject/editorObject.hpp" line="510" column="2"/>
      </memberdef>
      <memberdef kind="function" id="classeditor_object_1a78f427458b3e66f7102182ddec828eb0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>bool</type>
        <definition>bool editorObject::UpdateLog</definition>
        <argsstring>(const DONT_SANITIZE &amp;branchName)</argsstring>
        <name>UpdateLog</name>
        <qualifiedname>editorObject::UpdateLog</qualifiedname>
        <param>
          <type>const <ref refid="file_name_sanitizer_8hpp_1a2ec6d785f45dccabee178706d40c0d7d" kindref="member">DONT_SANITIZE</ref> &amp;</type>
          <declname>branchName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core_include/MainObjects/editorObject/editorObject.hpp" line="513" column="2"/>
      </memberdef>
      <memberdef kind="function" id="classeditor_object_1a4c49089d69f7f45e1ed9900e67338551" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>bool</type>
        <definition>bool editorObject::UpdateLog</definition>
        <argsstring>()</argsstring>
        <name>UpdateLog</name>
        <qualifiedname>editorObject::UpdateLog</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core_include/MainObjects/editorObject/editorObject.hpp" line="516" column="2"/>
      </memberdef>
      <memberdef kind="function" id="classeditor_object_1a78f427458b3e66f7102182ddec828eb0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>bool</type>
        <definition>bool editorObject::UpdateLog</definition>
        <argsstring>(const DONT_SANITIZE &amp;branchName)</argsstring>
        <name>UpdateLog</name>
        <qualifiedname>editorObject::UpdateLog</qualifiedname>
        <param>
          <type>const <ref refid="file_name_sanitizer_8hpp_1a2ec6d785f45dccabee178706d40c0d7d" kindref="member">DONT_SANITIZE</ref> &amp;</type>
          <declname>branchName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core_include/MainObjects/editorObject/editorObject.hpp" line="519" column="2"/>
      </memberdef>
      <memberdef kind="function" id="classeditor_object_1a4c49089d69f7f45e1ed9900e67338551" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>bool</type>
        <definition>bool editorObject::UpdateLog</definition>
        <argsstring>()</argsstring>
        <name>UpdateLog</name>
        <qualifiedname>editorObject::UpdateLog</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core_include/MainObjects/editorObject/editorObject.hpp" line="522" column="2"/>
      </memberdef>
      <memberdef kind="function" id="classeditor_object_1a78f427458b3e66f7102182ddec828eb0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>bool</type>
        <definition>bool editorObject::UpdateLog</definition>
        <argsstring>(const DONT_SANITIZE &amp;branchName)</argsstring>
        <name>UpdateLog</name>
        <qualifiedname>editorObject::UpdateLog</qualifiedname>
        <param>
          <type>const <ref refid="file_name_sanitizer_8hpp_1a2ec6d785f45dccabee178706d40c0d7d" kindref="member">DONT_SANITIZE</ref> &amp;</type>
          <declname>branchName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core_include/MainObjects/editorObject/editorObject.hpp" line="525" column="2"/>
      </memberdef>
      <memberdef kind="function" id="classeditor_object_1a4c49089d69f7f45e1ed9900e67338551" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>bool</type>
        <definition>bool editorObject::UpdateLog</definition>
        <argsstring>()</argsstring>
        <name>UpdateLog</name>
        <qualifiedname>editorObject::UpdateLog</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core_include/MainObjects/editorObject/editorObject.hpp" line="528" column="2"/>
      </memberdef>
      <memberdef kind="function" id="classeditor_object_1a08bd920f3c202193ee69524f86ebfa66" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>bool</type>
        <definition>bool editorObject::UpdateLog</definition>
        <argsstring>(const UNSANITIZED &amp;musicName)</argsstring>
        <name>UpdateLog</name>
        <qualifiedname>editorObject::UpdateLog</qualifiedname>
        <param>
          <type>const <ref refid="file_name_sanitizer_8hpp_1a3dbfced66c4bb073515956060fd59604" kindref="member">UNSANITIZED</ref> &amp;</type>
          <declname>musicName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core_include/MainObjects/editorObject/editorObject.hpp" line="531" column="2"/>
      </memberdef>
      <memberdef kind="function" id="classeditor_object_1a479985c5e13f1986c6b88ceac67924c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>void</type>
        <definition>void editorObject::getAll</definition>
        <argsstring>(std::function&lt; void(const EDIT_ARG_KEY_VALUE &amp;obj)&gt; jsonCallback)</argsstring>
        <name>getAll</name>
        <qualifiedname>editorObject::getAll</qualifiedname>
        <param>
          <type>std::function&lt; void(const <ref refid="editor_object_8hpp_1a305098bfe154230cbef2fbe44e5f9220" kindref="member">EDIT_ARG_KEY_VALUE</ref> &amp;obj)&gt;</type>
          <declname>jsonCallback</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core_include/MainObjects/editorObject/getall.cpp" line="5" column="1" bodyfile="core_include/MainObjects/editorObject/getall.cpp" bodystart="5" bodyend="9"/>
      </memberdef>
      <memberdef kind="function" id="classeditor_object_1a16ef00ce6ae7569f39a60ff8f382bd1c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>void</type>
        <definition>void editorObject::getAll</definition>
        <argsstring>(std::function&lt; void(const EDIT_ARG_MIX &amp;obj)&gt; jsonCallback)</argsstring>
        <name>getAll</name>
        <qualifiedname>editorObject::getAll</qualifiedname>
        <param>
          <type>std::function&lt; void(const <ref refid="editor_object_8hpp_1a8c7c688d1e63ff780f13669e00fc091c" kindref="member">EDIT_ARG_MIX</ref> &amp;obj)&gt;</type>
          <declname>jsonCallback</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core_include/MainObjects/editorObject/getall.cpp" line="13" column="1" bodyfile="core_include/MainObjects/editorObject/getall.cpp" bodystart="13" bodyend="16"/>
      </memberdef>
      <memberdef kind="function" id="classeditor_object_1a77db8c854567b251bec9cebd5e91c662" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>void</type>
        <definition>void editorObject::getAll</definition>
        <argsstring>(std::function&lt; void(const EDIT_ARG_NOTE &amp;obj)&gt; jsonCallback)</argsstring>
        <name>getAll</name>
        <qualifiedname>editorObject::getAll</qualifiedname>
        <param>
          <type>std::function&lt; void(const <ref refid="editor_object_8hpp_1a2de2e14491806b81a5ba85836b550f18" kindref="member">EDIT_ARG_NOTE</ref> &amp;obj)&gt;</type>
          <declname>jsonCallback</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core_include/MainObjects/editorObject/getall.cpp" line="20" column="1" bodyfile="core_include/MainObjects/editorObject/getall.cpp" bodystart="20" bodyend="23"/>
      </memberdef>
      <memberdef kind="function" id="classeditor_object_1a5fff7bdde5101a29d10a25989c8e248d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>void</type>
        <definition>void editorObject::getAll</definition>
        <argsstring>(std::function&lt; void(const EDIT_ARG_MUSIC &amp;obj)&gt; jsonCallback)</argsstring>
        <name>getAll</name>
        <qualifiedname>editorObject::getAll</qualifiedname>
        <param>
          <type>std::function&lt; void(const <ref refid="struct_e_d_i_t___a_r_g___m_u_s_i_c" kindref="compound">EDIT_ARG_MUSIC</ref> &amp;obj)&gt;</type>
          <declname>jsonCallback</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core_include/MainObjects/editorObject/getall.cpp" line="27" column="1" bodyfile="core_include/MainObjects/editorObject/getall.cpp" bodystart="27" bodyend="33"/>
      </memberdef>
      <memberdef kind="function" id="classeditor_object_1aac2481cb9b8cdce5b8b4bb955d75ecb0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="struct_diff_result" kindref="compound">DiffResult</ref></type>
        <definition>DiffResult editorObject::GetDiff</definition>
        <argsstring>(const gitwrap::commit &amp;oldTimeStamp, const gitwrap::commit &amp;newTimeStamp)</argsstring>
        <name>GetDiff</name>
        <qualifiedname>editorObject::GetDiff</qualifiedname>
        <param>
          <type>const <ref refid="structgitwrap_1_1commit" kindref="compound">gitwrap::commit</ref> &amp;</type>
          <declname>oldTimeStamp</declname>
        </param>
        <param>
          <type>const <ref refid="structgitwrap_1_1commit" kindref="compound">gitwrap::commit</ref> &amp;</type>
          <declname>newTimeStamp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core_include/MainObjects/editorObject/getdiff.cpp" line="4" column="2" bodyfile="core_include/MainObjects/editorObject/getdiff.cpp" bodystart="5" bodyend="10"/>
      </memberdef>
      <memberdef kind="function" id="classeditor_object_1aac2481cb9b8cdce5b8b4bb955d75ecb0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="struct_diff_result" kindref="compound">DiffResult</ref></type>
        <definition>DiffResult editorObject::GetDiff</definition>
        <argsstring>(const gitwrap::commit &amp;oldTimeStamp, const gitwrap::commit &amp;newTimeStamp)</argsstring>
        <name>GetDiff</name>
        <qualifiedname>editorObject::GetDiff</qualifiedname>
        <param>
          <type>const <ref refid="structgitwrap_1_1commit" kindref="compound">gitwrap::commit</ref> &amp;</type>
          <declname>oldTimeStamp</declname>
        </param>
        <param>
          <type>const <ref refid="structgitwrap_1_1commit" kindref="compound">gitwrap::commit</ref> &amp;</type>
          <declname>newTimeStamp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core_include/MainObjects/editorObject/getdiff.cpp" line="13" column="2" bodyfile="core_include/MainObjects/editorObject/getdiff.cpp" bodystart="14" bodyend="19"/>
      </memberdef>
      <memberdef kind="function" id="classeditor_object_1aac2481cb9b8cdce5b8b4bb955d75ecb0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="struct_diff_result" kindref="compound">DiffResult</ref></type>
        <definition>DiffResult editorObject::GetDiff</definition>
        <argsstring>(const gitwrap::commit &amp;oldTimeStamp, const gitwrap::commit &amp;newTimeStamp)</argsstring>
        <name>GetDiff</name>
        <qualifiedname>editorObject::GetDiff</qualifiedname>
        <param>
          <type>const <ref refid="structgitwrap_1_1commit" kindref="compound">gitwrap::commit</ref> &amp;</type>
          <declname>oldTimeStamp</declname>
        </param>
        <param>
          <type>const <ref refid="structgitwrap_1_1commit" kindref="compound">gitwrap::commit</ref> &amp;</type>
          <declname>newTimeStamp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core_include/MainObjects/editorObject/getdiff.cpp" line="22" column="2" bodyfile="core_include/MainObjects/editorObject/getdiff.cpp" bodystart="23" bodyend="28"/>
      </memberdef>
      <memberdef kind="function" id="classeditor_object_1aac2481cb9b8cdce5b8b4bb955d75ecb0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="struct_diff_result" kindref="compound">DiffResult</ref></type>
        <definition>DiffResult editorObject::GetDiff</definition>
        <argsstring>(const gitwrap::commit &amp;oldTimeStamp, const gitwrap::commit &amp;newTimeStamp)</argsstring>
        <name>GetDiff</name>
        <qualifiedname>editorObject::GetDiff</qualifiedname>
        <param>
          <type>const <ref refid="structgitwrap_1_1commit" kindref="compound">gitwrap::commit</ref> &amp;</type>
          <declname>oldTimeStamp</declname>
        </param>
        <param>
          <type>const <ref refid="structgitwrap_1_1commit" kindref="compound">gitwrap::commit</ref> &amp;</type>
          <declname>newTimeStamp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core_include/MainObjects/editorObject/getdiff.cpp" line="31" column="2" bodyfile="core_include/MainObjects/editorObject/getdiff.cpp" bodystart="32" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="classeditor_object_1af2cfb77e5f312a23c61c34d3f9a04b51" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="file_name_sanitizer_8hpp_1a2ec6d785f45dccabee178706d40c0d7d" kindref="member">DONT_SANITIZE</ref></type>
        <definition>DONT_SANITIZE editorObject::GetLogWithJSONGraph</definition>
        <argsstring>()</argsstring>
        <name>GetLogWithJSONGraph</name>
        <qualifiedname>editorObject::GetLogWithJSONGraph</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core_include/MainObjects/editorObject/getlogwithjsongraph.cpp" line="4" column="2" bodyfile="core_include/MainObjects/editorObject/getlogwithjsongraph.cpp" bodystart="5" bodyend="8"/>
      </memberdef>
      <memberdef kind="function" id="classeditor_object_1af2cfb77e5f312a23c61c34d3f9a04b51" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="file_name_sanitizer_8hpp_1a2ec6d785f45dccabee178706d40c0d7d" kindref="member">DONT_SANITIZE</ref></type>
        <definition>DONT_SANITIZE editorObject::GetLogWithJSONGraph</definition>
        <argsstring>()</argsstring>
        <name>GetLogWithJSONGraph</name>
        <qualifiedname>editorObject::GetLogWithJSONGraph</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core_include/MainObjects/editorObject/getlogwithjsongraph.cpp" line="11" column="2" bodyfile="core_include/MainObjects/editorObject/getlogwithjsongraph.cpp" bodystart="12" bodyend="15"/>
      </memberdef>
      <memberdef kind="function" id="classeditor_object_1af2cfb77e5f312a23c61c34d3f9a04b51" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="file_name_sanitizer_8hpp_1a2ec6d785f45dccabee178706d40c0d7d" kindref="member">DONT_SANITIZE</ref></type>
        <definition>DONT_SANITIZE editorObject::GetLogWithJSONGraph</definition>
        <argsstring>()</argsstring>
        <name>GetLogWithJSONGraph</name>
        <qualifiedname>editorObject::GetLogWithJSONGraph</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core_include/MainObjects/editorObject/getlogwithjsongraph.cpp" line="18" column="2" bodyfile="core_include/MainObjects/editorObject/getlogwithjsongraph.cpp" bodystart="19" bodyend="22"/>
      </memberdef>
      <memberdef kind="function" id="classeditor_object_1a5028cdb2062742b460a6586acefc1a01" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="file_name_sanitizer_8hpp_1a2ec6d785f45dccabee178706d40c0d7d" kindref="member">DONT_SANITIZE</ref></type>
        <definition>DONT_SANITIZE editorObject::GetLogWithJSONGraph</definition>
        <argsstring>(const UNSANITIZED &amp;musicName)</argsstring>
        <name>GetLogWithJSONGraph</name>
        <qualifiedname>editorObject::GetLogWithJSONGraph</qualifiedname>
        <param>
          <type>const <ref refid="file_name_sanitizer_8hpp_1a3dbfced66c4bb073515956060fd59604" kindref="member">UNSANITIZED</ref> &amp;</type>
          <declname>musicName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core_include/MainObjects/editorObject/getlogwithjsongraph.cpp" line="25" column="2" bodyfile="core_include/MainObjects/editorObject/getlogwithjsongraph.cpp" bodystart="26" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="classeditor_object_1a51962d2a580b4eab625d260ffedbd19a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>bool</type>
        <definition>bool editorObject::Go</definition>
        <argsstring>(const DONT_SANITIZE &amp;branchName, const DONT_SANITIZE &amp;commitOID)</argsstring>
        <name>Go</name>
        <qualifiedname>editorObject::Go</qualifiedname>
        <param>
          <type>const <ref refid="file_name_sanitizer_8hpp_1a2ec6d785f45dccabee178706d40c0d7d" kindref="member">DONT_SANITIZE</ref> &amp;</type>
          <declname>branchName</declname>
        </param>
        <param>
          <type>const <ref refid="file_name_sanitizer_8hpp_1a2ec6d785f45dccabee178706d40c0d7d" kindref="member">DONT_SANITIZE</ref> &amp;</type>
          <declname>commitOID</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core_include/MainObjects/editorObject/go.cpp" line="4" column="2" bodyfile="core_include/MainObjects/editorObject/go.cpp" bodystart="5" bodyend="17"/>
      </memberdef>
      <memberdef kind="function" id="classeditor_object_1a51962d2a580b4eab625d260ffedbd19a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>bool</type>
        <definition>bool editorObject::Go</definition>
        <argsstring>(const DONT_SANITIZE &amp;branchName, const DONT_SANITIZE &amp;commitOID)</argsstring>
        <name>Go</name>
        <qualifiedname>editorObject::Go</qualifiedname>
        <param>
          <type>const <ref refid="file_name_sanitizer_8hpp_1a2ec6d785f45dccabee178706d40c0d7d" kindref="member">DONT_SANITIZE</ref> &amp;</type>
          <declname>branchName</declname>
        </param>
        <param>
          <type>const <ref refid="file_name_sanitizer_8hpp_1a2ec6d785f45dccabee178706d40c0d7d" kindref="member">DONT_SANITIZE</ref> &amp;</type>
          <declname>commitOID</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core_include/MainObjects/editorObject/go.cpp" line="20" column="2" bodyfile="core_include/MainObjects/editorObject/go.cpp" bodystart="21" bodyend="32"/>
      </memberdef>
      <memberdef kind="function" id="classeditor_object_1a51962d2a580b4eab625d260ffedbd19a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>bool</type>
        <definition>bool editorObject::Go</definition>
        <argsstring>(const DONT_SANITIZE &amp;branchName, const DONT_SANITIZE &amp;commitOID)</argsstring>
        <name>Go</name>
        <qualifiedname>editorObject::Go</qualifiedname>
        <param>
          <type>const <ref refid="file_name_sanitizer_8hpp_1a2ec6d785f45dccabee178706d40c0d7d" kindref="member">DONT_SANITIZE</ref> &amp;</type>
          <declname>branchName</declname>
        </param>
        <param>
          <type>const <ref refid="file_name_sanitizer_8hpp_1a2ec6d785f45dccabee178706d40c0d7d" kindref="member">DONT_SANITIZE</ref> &amp;</type>
          <declname>commitOID</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core_include/MainObjects/editorObject/go.cpp" line="35" column="2" bodyfile="core_include/MainObjects/editorObject/go.cpp" bodystart="36" bodyend="47"/>
      </memberdef>
      <memberdef kind="function" id="classeditor_object_1a51962d2a580b4eab625d260ffedbd19a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>bool</type>
        <definition>bool editorObject::Go</definition>
        <argsstring>(const DONT_SANITIZE &amp;branchName, const DONT_SANITIZE &amp;commitOID)</argsstring>
        <name>Go</name>
        <qualifiedname>editorObject::Go</qualifiedname>
        <param>
          <type>const <ref refid="file_name_sanitizer_8hpp_1a2ec6d785f45dccabee178706d40c0d7d" kindref="member">DONT_SANITIZE</ref> &amp;</type>
          <declname>branchName</declname>
        </param>
        <param>
          <type>const <ref refid="file_name_sanitizer_8hpp_1a2ec6d785f45dccabee178706d40c0d7d" kindref="member">DONT_SANITIZE</ref> &amp;</type>
          <declname>commitOID</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core_include/MainObjects/editorObject/go.cpp" line="50" column="2" bodyfile="core_include/MainObjects/editorObject/go.cpp" bodystart="51" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="classeditor_object_1aefa353d96fd225e77138f1ebb482f2a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>bool</type>
        <definition>bool editorObject::Redo</definition>
        <argsstring>()</argsstring>
        <name>Redo</name>
        <qualifiedname>editorObject::Redo</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core_include/MainObjects/editorObject/redo.cpp" line="4" column="2" bodyfile="core_include/MainObjects/editorObject/redo.cpp" bodystart="5" bodyend="8"/>
      </memberdef>
      <memberdef kind="function" id="classeditor_object_1aefa353d96fd225e77138f1ebb482f2a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>bool</type>
        <definition>bool editorObject::Redo</definition>
        <argsstring>()</argsstring>
        <name>Redo</name>
        <qualifiedname>editorObject::Redo</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core_include/MainObjects/editorObject/redo.cpp" line="11" column="2" bodyfile="core_include/MainObjects/editorObject/redo.cpp" bodystart="12" bodyend="15"/>
      </memberdef>
      <memberdef kind="function" id="classeditor_object_1a6c4c8c3a96ae891026202464c3117f5d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>bool</type>
        <definition>bool editorObject::Redo</definition>
        <argsstring>(const UNSANITIZED &amp;musicName)</argsstring>
        <name>Redo</name>
        <qualifiedname>editorObject::Redo</qualifiedname>
        <param>
          <type>const <ref refid="file_name_sanitizer_8hpp_1a3dbfced66c4bb073515956060fd59604" kindref="member">UNSANITIZED</ref> &amp;</type>
          <declname>musicName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core_include/MainObjects/editorObject/redo.cpp" line="17" column="2" bodyfile="core_include/MainObjects/editorObject/redo.cpp" bodystart="18" bodyend="36"/>
      </memberdef>
      <memberdef kind="function" id="classeditor_object_1aefa353d96fd225e77138f1ebb482f2a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>bool</type>
        <definition>bool editorObject::Redo</definition>
        <argsstring>()</argsstring>
        <name>Redo</name>
        <qualifiedname>editorObject::Redo</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core_include/MainObjects/editorObject/redo.cpp" line="38" column="2" bodyfile="core_include/MainObjects/editorObject/redo.cpp" bodystart="39" bodyend="42"/>
      </memberdef>
      <memberdef kind="function" id="classeditor_object_1ab4d9fad40219f8d0abf61d62fe6148ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>bool</type>
        <definition>bool editorObject::Undo</definition>
        <argsstring>()</argsstring>
        <name>Undo</name>
        <qualifiedname>editorObject::Undo</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core_include/MainObjects/editorObject/undo.cpp" line="4" column="2" bodyfile="core_include/MainObjects/editorObject/undo.cpp" bodystart="5" bodyend="8"/>
      </memberdef>
      <memberdef kind="function" id="classeditor_object_1ab4d9fad40219f8d0abf61d62fe6148ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>bool</type>
        <definition>bool editorObject::Undo</definition>
        <argsstring>()</argsstring>
        <name>Undo</name>
        <qualifiedname>editorObject::Undo</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core_include/MainObjects/editorObject/undo.cpp" line="11" column="2" bodyfile="core_include/MainObjects/editorObject/undo.cpp" bodystart="12" bodyend="15"/>
      </memberdef>
      <memberdef kind="function" id="classeditor_object_1a789f87b8ed201e8e08b22ba6bc3311b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>bool</type>
        <definition>bool editorObject::Undo</definition>
        <argsstring>(const UNSANITIZED &amp;musicName)</argsstring>
        <name>Undo</name>
        <qualifiedname>editorObject::Undo</qualifiedname>
        <param>
          <type>const <ref refid="file_name_sanitizer_8hpp_1a3dbfced66c4bb073515956060fd59604" kindref="member">UNSANITIZED</ref> &amp;</type>
          <declname>musicName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core_include/MainObjects/editorObject/undo.cpp" line="18" column="2" bodyfile="core_include/MainObjects/editorObject/undo.cpp" bodystart="19" bodyend="39"/>
      </memberdef>
      <memberdef kind="function" id="classeditor_object_1ab4d9fad40219f8d0abf61d62fe6148ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>bool</type>
        <definition>bool editorObject::Undo</definition>
        <argsstring>()</argsstring>
        <name>Undo</name>
        <qualifiedname>editorObject::Undo</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core_include/MainObjects/editorObject/undo.cpp" line="42" column="2" bodyfile="core_include/MainObjects/editorObject/undo.cpp" bodystart="43" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="classeditor_object_1a4c49089d69f7f45e1ed9900e67338551" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>bool</type>
        <definition>bool editorObject::UpdateLog</definition>
        <argsstring>()</argsstring>
        <name>UpdateLog</name>
        <qualifiedname>editorObject::UpdateLog</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core_include/MainObjects/editorObject/updatelog.cpp" line="4" column="2" bodyfile="core_include/MainObjects/editorObject/updatelog.cpp" bodystart="5" bodyend="8"/>
      </memberdef>
      <memberdef kind="function" id="classeditor_object_1a78f427458b3e66f7102182ddec828eb0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>bool</type>
        <definition>bool editorObject::UpdateLog</definition>
        <argsstring>(const DONT_SANITIZE &amp;branchName)</argsstring>
        <name>UpdateLog</name>
        <qualifiedname>editorObject::UpdateLog</qualifiedname>
        <param>
          <type>const <ref refid="file_name_sanitizer_8hpp_1a2ec6d785f45dccabee178706d40c0d7d" kindref="member">DONT_SANITIZE</ref> &amp;</type>
          <declname>branchName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core_include/MainObjects/editorObject/updatelog.cpp" line="11" column="2" bodyfile="core_include/MainObjects/editorObject/updatelog.cpp" bodystart="12" bodyend="16"/>
      </memberdef>
      <memberdef kind="function" id="classeditor_object_1a4c49089d69f7f45e1ed9900e67338551" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>bool</type>
        <definition>bool editorObject::UpdateLog</definition>
        <argsstring>()</argsstring>
        <name>UpdateLog</name>
        <qualifiedname>editorObject::UpdateLog</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core_include/MainObjects/editorObject/updatelog.cpp" line="19" column="2" bodyfile="core_include/MainObjects/editorObject/updatelog.cpp" bodystart="20" bodyend="23"/>
      </memberdef>
      <memberdef kind="function" id="classeditor_object_1a78f427458b3e66f7102182ddec828eb0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>bool</type>
        <definition>bool editorObject::UpdateLog</definition>
        <argsstring>(const DONT_SANITIZE &amp;branchName)</argsstring>
        <name>UpdateLog</name>
        <qualifiedname>editorObject::UpdateLog</qualifiedname>
        <param>
          <type>const <ref refid="file_name_sanitizer_8hpp_1a2ec6d785f45dccabee178706d40c0d7d" kindref="member">DONT_SANITIZE</ref> &amp;</type>
          <declname>branchName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core_include/MainObjects/editorObject/updatelog.cpp" line="26" column="2" bodyfile="core_include/MainObjects/editorObject/updatelog.cpp" bodystart="27" bodyend="30"/>
      </memberdef>
      <memberdef kind="function" id="classeditor_object_1a4c49089d69f7f45e1ed9900e67338551" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>bool</type>
        <definition>bool editorObject::UpdateLog</definition>
        <argsstring>()</argsstring>
        <name>UpdateLog</name>
        <qualifiedname>editorObject::UpdateLog</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core_include/MainObjects/editorObject/updatelog.cpp" line="33" column="2" bodyfile="core_include/MainObjects/editorObject/updatelog.cpp" bodystart="34" bodyend="37"/>
      </memberdef>
      <memberdef kind="function" id="classeditor_object_1a78f427458b3e66f7102182ddec828eb0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>bool</type>
        <definition>bool editorObject::UpdateLog</definition>
        <argsstring>(const DONT_SANITIZE &amp;branchName)</argsstring>
        <name>UpdateLog</name>
        <qualifiedname>editorObject::UpdateLog</qualifiedname>
        <param>
          <type>const <ref refid="file_name_sanitizer_8hpp_1a2ec6d785f45dccabee178706d40c0d7d" kindref="member">DONT_SANITIZE</ref> &amp;</type>
          <declname>branchName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core_include/MainObjects/editorObject/updatelog.cpp" line="40" column="2" bodyfile="core_include/MainObjects/editorObject/updatelog.cpp" bodystart="41" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="classeditor_object_1a4c49089d69f7f45e1ed9900e67338551" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>bool</type>
        <definition>bool editorObject::UpdateLog</definition>
        <argsstring>()</argsstring>
        <name>UpdateLog</name>
        <qualifiedname>editorObject::UpdateLog</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core_include/MainObjects/editorObject/updatelog.cpp" line="47" column="2" bodyfile="core_include/MainObjects/editorObject/updatelog.cpp" bodystart="48" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="classeditor_object_1a08bd920f3c202193ee69524f86ebfa66" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>bool</type>
        <definition>bool editorObject::UpdateLog</definition>
        <argsstring>(const UNSANITIZED &amp;musicName)</argsstring>
        <name>UpdateLog</name>
        <qualifiedname>editorObject::UpdateLog</qualifiedname>
        <param>
          <type>const <ref refid="file_name_sanitizer_8hpp_1a3dbfced66c4bb073515956060fd59604" kindref="member">UNSANITIZED</ref> &amp;</type>
          <declname>musicName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core_include/MainObjects/editorObject/updatelog.cpp" line="62" column="2" bodyfile="core_include/MainObjects/editorObject/updatelog.cpp" bodystart="63" bodyend="81"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>The main editor object for managing project data. </para>
    </briefdescription>
    <detaileddescription>
<para>This class provides a high-level interface for interacting with the editor, including file I/O, version control, and data rendering. </para>
    </detaileddescription>
    <location file="core_include/MainObjects/editorObject/editorObject.hpp" line="40" column="1" bodyfile="core_include/MainObjects/editorObject/editorObject.hpp" bodystart="40" bodyend="367"/>
    <listofallmembers>
      <member refid="classeditor_object_1a77eaf52d8c470aadb9af3f3140e6beee" prot="public" virt="non-virtual"><scope>editorObject</scope><name>AddLine</name></member>
      <member refid="classeditor_object_1a9162179d7a90217496e990ed631a79e7" prot="public" virt="non-virtual"><scope>editorObject</scope><name>AddLine</name></member>
      <member refid="classeditor_object_1ad3274f4153e7e8845a5c5d048f037901" prot="public" virt="non-virtual"><scope>editorObject</scope><name>AddLine</name></member>
      <member refid="classeditor_object_1a85dd1bfab830dc51fd12f6f27956ec19" prot="public" virt="non-virtual"><scope>editorObject</scope><name>AddLine</name></member>
      <member refid="classeditor_object_1aa6a8bd9998b64a8ee9bc46cd185b518f" prot="public" virt="non-virtual"><scope>editorObject</scope><name>AddLine</name></member>
      <member refid="classeditor_object_1a307c57aa6a231f6394d82be67a1d94ae" prot="public" virt="non-virtual"><scope>editorObject</scope><name>AddLine</name></member>
      <member refid="classeditor_object_1aa6a8bd9998b64a8ee9bc46cd185b518f" prot="public" virt="non-virtual"><scope>editorObject</scope><name>AddLine</name></member>
      <member refid="classeditor_object_1a85dd1bfab830dc51fd12f6f27956ec19" prot="public" virt="non-virtual"><scope>editorObject</scope><name>AddLine</name></member>
      <member refid="classeditor_object_1a307c57aa6a231f6394d82be67a1d94ae" prot="public" virt="non-virtual"><scope>editorObject</scope><name>AddLine</name></member>
      <member refid="classeditor_object_1ad3274f4153e7e8845a5c5d048f037901" prot="public" virt="non-virtual"><scope>editorObject</scope><name>AddLine</name></member>
      <member refid="classeditor_object_1a3ec9d3ccf73457ee3067cd3f47ac23c1" prot="public" virt="non-virtual"><scope>editorObject</scope><name>ConfigNewMusic</name></member>
      <member refid="classeditor_object_1a70ea370646618a4ac7bd3d3ef50abc7d" prot="private" virt="non-virtual"><scope>editorObject</scope><name>DefaultSaveFunction</name></member>
      <member refid="classeditor_object_1aad816e22a3a63d00cb319bf4d985d950" prot="private" virt="non-virtual"><scope>editorObject</scope><name>DefaultSaveFunction</name></member>
      <member refid="classeditor_object_1afdb9406f4e2aae843f1de7921be5f796" prot="private" virt="non-virtual"><scope>editorObject</scope><name>DefaultSaveFunction</name></member>
      <member refid="classeditor_object_1afdb9406f4e2aae843f1de7921be5f796" prot="private" virt="non-virtual"><scope>editorObject</scope><name>DefaultSaveFunction</name></member>
      <member refid="classeditor_object_1afdb9406f4e2aae843f1de7921be5f796" prot="private" virt="non-virtual"><scope>editorObject</scope><name>DefaultSaveFunction</name></member>
      <member refid="classeditor_object_1a785b7a8cdc22a9c424f5f79b6b031e88" prot="private" virt="non-virtual"><scope>editorObject</scope><name>DefaultSaveFunction</name></member>
      <member refid="classeditor_object_1afdb9406f4e2aae843f1de7921be5f796" prot="private" virt="non-virtual"><scope>editorObject</scope><name>DefaultSaveFunction</name></member>
      <member refid="classeditor_object_1afdb9406f4e2aae843f1de7921be5f796" prot="private" virt="non-virtual"><scope>editorObject</scope><name>DefaultSaveFunction</name></member>
      <member refid="classeditor_object_1afdb9406f4e2aae843f1de7921be5f796" prot="private" virt="non-virtual"><scope>editorObject</scope><name>DefaultSaveFunction</name></member>
      <member refid="classeditor_object_1a785b7a8cdc22a9c424f5f79b6b031e88" prot="private" virt="non-virtual"><scope>editorObject</scope><name>DefaultSaveFunction</name></member>
      <member refid="classeditor_object_1acec5f49ab4cc77cd842d4eaf1a25ff87" prot="public" virt="non-virtual"><scope>editorObject</scope><name>deleteLine</name></member>
      <member refid="classeditor_object_1a74c726d83f0402fa3df6f74ac501dfea" prot="public" virt="non-virtual"><scope>editorObject</scope><name>deleteLine</name></member>
      <member refid="classeditor_object_1a1470c80235c92292a246fa3f9ce15865" prot="public" virt="non-virtual"><scope>editorObject</scope><name>deleteLine</name></member>
      <member refid="classeditor_object_1a0d5200a4e92a2faee32536810298f590" prot="public" virt="non-virtual"><scope>editorObject</scope><name>deleteLine</name></member>
      <member refid="classeditor_object_1a6ab0f93838db62d7e61e9d4f97838e2b" prot="public" virt="non-virtual"><scope>editorObject</scope><name>deleteLine</name></member>
      <member refid="classeditor_object_1a1470c80235c92292a246fa3f9ce15865" prot="public" virt="non-virtual"><scope>editorObject</scope><name>deleteLine</name></member>
      <member refid="classeditor_object_1a0d5200a4e92a2faee32536810298f590" prot="public" virt="non-virtual"><scope>editorObject</scope><name>deleteLine</name></member>
      <member refid="classeditor_object_1a6ab0f93838db62d7e61e9d4f97838e2b" prot="public" virt="non-virtual"><scope>editorObject</scope><name>deleteLine</name></member>
      <member refid="classeditor_object_1a394a200d5cf41ec74152c799d17b35e7" prot="public" virt="non-virtual"><scope>editorObject</scope><name>demoPlayInit</name></member>
      <member refid="classeditor_object_1a9e14b13d0a93115510856587e3d0b597" prot="public" virt="non-virtual"><scope>editorObject</scope><name>DESTROY_PROJECT</name></member>
      <member refid="classeditor_object_1a23655580a822a7ae6c96ece123f0574d" prot="private" virt="non-virtual"><scope>editorObject</scope><name>E_obj</name></member>
      <member refid="classeditor_object_1a690ad4f1302edbb56c2ae2cdba91189d" prot="public" virt="non-virtual"><scope>editorObject</scope><name>editorObject</name></member>
      <member refid="classeditor_object_1a7a44ba5a8abd1bdacdf538b08360339b" prot="public" virt="non-virtual"><scope>editorObject</scope><name>editorObject</name></member>
      <member refid="classeditor_object_1a720a623f570f5fbeafb28e812a127938" prot="public" virt="non-virtual"><scope>editorObject</scope><name>getAll</name></member>
      <member refid="classeditor_object_1a77db8c854567b251bec9cebd5e91c662" prot="public" virt="non-virtual"><scope>editorObject</scope><name>getAll</name></member>
      <member refid="classeditor_object_1a16ef00ce6ae7569f39a60ff8f382bd1c" prot="public" virt="non-virtual"><scope>editorObject</scope><name>getAll</name></member>
      <member refid="classeditor_object_1a479985c5e13f1986c6b88ceac67924c6" prot="public" virt="non-virtual"><scope>editorObject</scope><name>getAll</name></member>
      <member refid="classeditor_object_1a5fff7bdde5101a29d10a25989c8e248d" prot="public" virt="non-virtual"><scope>editorObject</scope><name>getAll</name></member>
      <member refid="classeditor_object_1a479985c5e13f1986c6b88ceac67924c6" prot="public" virt="non-virtual"><scope>editorObject</scope><name>getAll</name></member>
      <member refid="classeditor_object_1a16ef00ce6ae7569f39a60ff8f382bd1c" prot="public" virt="non-virtual"><scope>editorObject</scope><name>getAll</name></member>
      <member refid="classeditor_object_1a77db8c854567b251bec9cebd5e91c662" prot="public" virt="non-virtual"><scope>editorObject</scope><name>getAll</name></member>
      <member refid="classeditor_object_1a5fff7bdde5101a29d10a25989c8e248d" prot="public" virt="non-virtual"><scope>editorObject</scope><name>getAll</name></member>
      <member refid="classeditor_object_1a28dc3aa435512e4ad16ad0f821c64907" prot="public" virt="non-virtual"><scope>editorObject</scope><name>GetDiff</name></member>
      <member refid="classeditor_object_1aac2481cb9b8cdce5b8b4bb955d75ecb0" prot="public" virt="non-virtual"><scope>editorObject</scope><name>GetDiff</name></member>
      <member refid="classeditor_object_1aac2481cb9b8cdce5b8b4bb955d75ecb0" prot="public" virt="non-virtual"><scope>editorObject</scope><name>GetDiff</name></member>
      <member refid="classeditor_object_1aac2481cb9b8cdce5b8b4bb955d75ecb0" prot="public" virt="non-virtual"><scope>editorObject</scope><name>GetDiff</name></member>
      <member refid="classeditor_object_1aac2481cb9b8cdce5b8b4bb955d75ecb0" prot="public" virt="non-virtual"><scope>editorObject</scope><name>GetDiff</name></member>
      <member refid="classeditor_object_1aac2481cb9b8cdce5b8b4bb955d75ecb0" prot="public" virt="non-virtual"><scope>editorObject</scope><name>GetDiff</name></member>
      <member refid="classeditor_object_1aac2481cb9b8cdce5b8b4bb955d75ecb0" prot="public" virt="non-virtual"><scope>editorObject</scope><name>GetDiff</name></member>
      <member refid="classeditor_object_1aac2481cb9b8cdce5b8b4bb955d75ecb0" prot="public" virt="non-virtual"><scope>editorObject</scope><name>GetDiff</name></member>
      <member refid="classeditor_object_1aac2481cb9b8cdce5b8b4bb955d75ecb0" prot="public" virt="non-virtual"><scope>editorObject</scope><name>GetDiff</name></member>
      <member refid="classeditor_object_1a7276d008fdf2ce71165d9f8f8332317d" prot="public" virt="non-virtual"><scope>editorObject</scope><name>getKVRepo</name></member>
      <member refid="classeditor_object_1a360e0000f965db643a0127f7240a425a" prot="public" virt="non-virtual"><scope>editorObject</scope><name>GetLogWithJSONGraph</name></member>
      <member refid="classeditor_object_1a994b27da4e10c21758c374d77b638cad" prot="public" virt="non-virtual"><scope>editorObject</scope><name>GetLogWithJSONGraph</name></member>
      <member refid="classeditor_object_1af2cfb77e5f312a23c61c34d3f9a04b51" prot="public" virt="non-virtual"><scope>editorObject</scope><name>GetLogWithJSONGraph</name></member>
      <member refid="classeditor_object_1af2cfb77e5f312a23c61c34d3f9a04b51" prot="public" virt="non-virtual"><scope>editorObject</scope><name>GetLogWithJSONGraph</name></member>
      <member refid="classeditor_object_1af2cfb77e5f312a23c61c34d3f9a04b51" prot="public" virt="non-virtual"><scope>editorObject</scope><name>GetLogWithJSONGraph</name></member>
      <member refid="classeditor_object_1af2cfb77e5f312a23c61c34d3f9a04b51" prot="public" virt="non-virtual"><scope>editorObject</scope><name>GetLogWithJSONGraph</name></member>
      <member refid="classeditor_object_1af2cfb77e5f312a23c61c34d3f9a04b51" prot="public" virt="non-virtual"><scope>editorObject</scope><name>GetLogWithJSONGraph</name></member>
      <member refid="classeditor_object_1af2cfb77e5f312a23c61c34d3f9a04b51" prot="public" virt="non-virtual"><scope>editorObject</scope><name>GetLogWithJSONGraph</name></member>
      <member refid="classeditor_object_1af2cfb77e5f312a23c61c34d3f9a04b51" prot="public" virt="non-virtual"><scope>editorObject</scope><name>GetLogWithJSONGraph</name></member>
      <member refid="classeditor_object_1a5028cdb2062742b460a6586acefc1a01" prot="public" virt="non-virtual"><scope>editorObject</scope><name>GetLogWithJSONGraph</name></member>
      <member refid="classeditor_object_1ae5300f1a0b6d39b6fb1e6c79d2bcc91d" prot="public" virt="non-virtual"><scope>editorObject</scope><name>getMixRepo</name></member>
      <member refid="classeditor_object_1ad4983a3abef2c8acadc325f26a6128d6" prot="public" virt="non-virtual"><scope>editorObject</scope><name>getMusicRepo</name></member>
      <member refid="classeditor_object_1a3bd541d0ff2a00541fad343c31742c71" prot="public" virt="non-virtual"><scope>editorObject</scope><name>getNoteRepo</name></member>
      <member refid="classeditor_object_1ad9b0dfe188373cfe8b0605cfcbba2093" prot="public" virt="non-virtual"><scope>editorObject</scope><name>Go</name></member>
      <member refid="classeditor_object_1a51962d2a580b4eab625d260ffedbd19a" prot="public" virt="non-virtual"><scope>editorObject</scope><name>Go</name></member>
      <member refid="classeditor_object_1a51962d2a580b4eab625d260ffedbd19a" prot="public" virt="non-virtual"><scope>editorObject</scope><name>Go</name></member>
      <member refid="classeditor_object_1a51962d2a580b4eab625d260ffedbd19a" prot="public" virt="non-virtual"><scope>editorObject</scope><name>Go</name></member>
      <member refid="classeditor_object_1a51962d2a580b4eab625d260ffedbd19a" prot="public" virt="non-virtual"><scope>editorObject</scope><name>Go</name></member>
      <member refid="classeditor_object_1a51962d2a580b4eab625d260ffedbd19a" prot="public" virt="non-virtual"><scope>editorObject</scope><name>Go</name></member>
      <member refid="classeditor_object_1a51962d2a580b4eab625d260ffedbd19a" prot="public" virt="non-virtual"><scope>editorObject</scope><name>Go</name></member>
      <member refid="classeditor_object_1a51962d2a580b4eab625d260ffedbd19a" prot="public" virt="non-virtual"><scope>editorObject</scope><name>Go</name></member>
      <member refid="classeditor_object_1a51962d2a580b4eab625d260ffedbd19a" prot="public" virt="non-virtual"><scope>editorObject</scope><name>Go</name></member>
      <member refid="classeditor_object_1a1a72aaa0a758b9c32f2bcd603a607f3c" prot="private" virt="non-virtual"><scope>editorObject</scope><name>kvFilePath</name></member>
      <member refid="classeditor_object_1a3bb22fbeed9a7e1516f3ab6461698f0b" prot="private" virt="non-virtual"><scope>editorObject</scope><name>makeTrackData</name></member>
      <member refid="classeditor_object_1a3172e809911096988531fc5228f7055e" prot="private" virt="non-virtual"><scope>editorObject</scope><name>mixFilePath</name></member>
      <member refid="classeditor_object_1a76050465d4780555d62af1f9faee05e7" prot="private" virt="non-virtual"><scope>editorObject</scope><name>musicFileRootPath</name></member>
      <member refid="classeditor_object_1abeaedacd9b6d9e2fb61772aa348431b1" prot="private" virt="non-virtual"><scope>editorObject</scope><name>noteFilePath</name></member>
      <member refid="classeditor_object_1adb7115154add6c06baf9c4e090977d24" prot="public" virt="non-virtual"><scope>editorObject</scope><name>Open</name></member>
      <member refid="classeditor_object_1aa664471474287d500e65d09f08f61001" prot="public" virt="non-virtual"><scope>editorObject</scope><name>operator[]</name></member>
      <member refid="classeditor_object_1afe3027bfdc86cf213b3d44191e4ce4e7" prot="private" virt="non-virtual"><scope>editorObject</scope><name>projectLocalDB</name></member>
      <member refid="classeditor_object_1a9409f6aef52b2cb8a361674da49b97e1" prot="private" virt="non-virtual"><scope>editorObject</scope><name>projectRoot</name></member>
      <member refid="classeditor_object_1ae4f8059616e377582bade705a44aafb6" prot="public" virt="non-virtual"><scope>editorObject</scope><name>pushToRootDB</name></member>
      <member refid="classeditor_object_1a634c551a93f376650075d82dcbe1ffd5" prot="public" virt="non-virtual"><scope>editorObject</scope><name>pushToRootDB</name></member>
      <member refid="classeditor_object_1ae24df06774592614acbfb17701f4e2e1" prot="public" virt="non-virtual"><scope>editorObject</scope><name>Redo</name></member>
      <member refid="classeditor_object_1a2987ce88cb1d9a435871f80398a76e63" prot="public" virt="non-virtual"><scope>editorObject</scope><name>Redo</name></member>
      <member refid="classeditor_object_1aefa353d96fd225e77138f1ebb482f2a8" prot="public" virt="non-virtual"><scope>editorObject</scope><name>Redo</name></member>
      <member refid="classeditor_object_1aefa353d96fd225e77138f1ebb482f2a8" prot="public" virt="non-virtual"><scope>editorObject</scope><name>Redo</name></member>
      <member refid="classeditor_object_1aefa353d96fd225e77138f1ebb482f2a8" prot="public" virt="non-virtual"><scope>editorObject</scope><name>Redo</name></member>
      <member refid="classeditor_object_1a6c4c8c3a96ae891026202464c3117f5d" prot="public" virt="non-virtual"><scope>editorObject</scope><name>Redo</name></member>
      <member refid="classeditor_object_1aefa353d96fd225e77138f1ebb482f2a8" prot="public" virt="non-virtual"><scope>editorObject</scope><name>Redo</name></member>
      <member refid="classeditor_object_1aefa353d96fd225e77138f1ebb482f2a8" prot="public" virt="non-virtual"><scope>editorObject</scope><name>Redo</name></member>
      <member refid="classeditor_object_1a6c4c8c3a96ae891026202464c3117f5d" prot="public" virt="non-virtual"><scope>editorObject</scope><name>Redo</name></member>
      <member refid="classeditor_object_1aefa353d96fd225e77138f1ebb482f2a8" prot="public" virt="non-virtual"><scope>editorObject</scope><name>Redo</name></member>
      <member refid="classeditor_object_1a40875c244c49f43d99238e7302b90927" prot="public" virt="non-virtual"><scope>editorObject</scope><name>render</name></member>
      <member refid="classeditor_object_1af807921cf49ccaa0d561badcb5348087" prot="public" virt="non-virtual"><scope>editorObject</scope><name>Undo</name></member>
      <member refid="classeditor_object_1a70a6c28f2ad7b19ff50427f14378291a" prot="public" virt="non-virtual"><scope>editorObject</scope><name>Undo</name></member>
      <member refid="classeditor_object_1ab4d9fad40219f8d0abf61d62fe6148ff" prot="public" virt="non-virtual"><scope>editorObject</scope><name>Undo</name></member>
      <member refid="classeditor_object_1ab4d9fad40219f8d0abf61d62fe6148ff" prot="public" virt="non-virtual"><scope>editorObject</scope><name>Undo</name></member>
      <member refid="classeditor_object_1ab4d9fad40219f8d0abf61d62fe6148ff" prot="public" virt="non-virtual"><scope>editorObject</scope><name>Undo</name></member>
      <member refid="classeditor_object_1a789f87b8ed201e8e08b22ba6bc3311b7" prot="public" virt="non-virtual"><scope>editorObject</scope><name>Undo</name></member>
      <member refid="classeditor_object_1ab4d9fad40219f8d0abf61d62fe6148ff" prot="public" virt="non-virtual"><scope>editorObject</scope><name>Undo</name></member>
      <member refid="classeditor_object_1ab4d9fad40219f8d0abf61d62fe6148ff" prot="public" virt="non-virtual"><scope>editorObject</scope><name>Undo</name></member>
      <member refid="classeditor_object_1ab4d9fad40219f8d0abf61d62fe6148ff" prot="public" virt="non-virtual"><scope>editorObject</scope><name>Undo</name></member>
      <member refid="classeditor_object_1a789f87b8ed201e8e08b22ba6bc3311b7" prot="public" virt="non-virtual"><scope>editorObject</scope><name>Undo</name></member>
      <member refid="classeditor_object_1ab4d9fad40219f8d0abf61d62fe6148ff" prot="public" virt="non-virtual"><scope>editorObject</scope><name>Undo</name></member>
      <member refid="classeditor_object_1ab4d9fad40219f8d0abf61d62fe6148ff" prot="public" virt="non-virtual"><scope>editorObject</scope><name>Undo</name></member>
      <member refid="classeditor_object_1a789f87b8ed201e8e08b22ba6bc3311b7" prot="public" virt="non-virtual"><scope>editorObject</scope><name>Undo</name></member>
      <member refid="classeditor_object_1ab4d9fad40219f8d0abf61d62fe6148ff" prot="public" virt="non-virtual"><scope>editorObject</scope><name>Undo</name></member>
      <member refid="classeditor_object_1af72d99c3cb239afe1f633ad592327ae7" prot="public" virt="non-virtual"><scope>editorObject</scope><name>UpdateLog</name></member>
      <member refid="classeditor_object_1a551a8f7e02b6d1723a8699af450daa79" prot="public" virt="non-virtual"><scope>editorObject</scope><name>UpdateLog</name></member>
      <member refid="classeditor_object_1a4c49089d69f7f45e1ed9900e67338551" prot="public" virt="non-virtual"><scope>editorObject</scope><name>UpdateLog</name></member>
      <member refid="classeditor_object_1a78f427458b3e66f7102182ddec828eb0" prot="public" virt="non-virtual"><scope>editorObject</scope><name>UpdateLog</name></member>
      <member refid="classeditor_object_1a4c49089d69f7f45e1ed9900e67338551" prot="public" virt="non-virtual"><scope>editorObject</scope><name>UpdateLog</name></member>
      <member refid="classeditor_object_1a78f427458b3e66f7102182ddec828eb0" prot="public" virt="non-virtual"><scope>editorObject</scope><name>UpdateLog</name></member>
      <member refid="classeditor_object_1a4c49089d69f7f45e1ed9900e67338551" prot="public" virt="non-virtual"><scope>editorObject</scope><name>UpdateLog</name></member>
      <member refid="classeditor_object_1a78f427458b3e66f7102182ddec828eb0" prot="public" virt="non-virtual"><scope>editorObject</scope><name>UpdateLog</name></member>
      <member refid="classeditor_object_1a4c49089d69f7f45e1ed9900e67338551" prot="public" virt="non-virtual"><scope>editorObject</scope><name>UpdateLog</name></member>
      <member refid="classeditor_object_1a08bd920f3c202193ee69524f86ebfa66" prot="public" virt="non-virtual"><scope>editorObject</scope><name>UpdateLog</name></member>
      <member refid="classeditor_object_1a4c49089d69f7f45e1ed9900e67338551" prot="public" virt="non-virtual"><scope>editorObject</scope><name>UpdateLog</name></member>
      <member refid="classeditor_object_1a78f427458b3e66f7102182ddec828eb0" prot="public" virt="non-virtual"><scope>editorObject</scope><name>UpdateLog</name></member>
      <member refid="classeditor_object_1a4c49089d69f7f45e1ed9900e67338551" prot="public" virt="non-virtual"><scope>editorObject</scope><name>UpdateLog</name></member>
      <member refid="classeditor_object_1a78f427458b3e66f7102182ddec828eb0" prot="public" virt="non-virtual"><scope>editorObject</scope><name>UpdateLog</name></member>
      <member refid="classeditor_object_1a4c49089d69f7f45e1ed9900e67338551" prot="public" virt="non-virtual"><scope>editorObject</scope><name>UpdateLog</name></member>
      <member refid="classeditor_object_1a78f427458b3e66f7102182ddec828eb0" prot="public" virt="non-virtual"><scope>editorObject</scope><name>UpdateLog</name></member>
      <member refid="classeditor_object_1a4c49089d69f7f45e1ed9900e67338551" prot="public" virt="non-virtual"><scope>editorObject</scope><name>UpdateLog</name></member>
      <member refid="classeditor_object_1a08bd920f3c202193ee69524f86ebfa66" prot="public" virt="non-virtual"><scope>editorObject</scope><name>UpdateLog</name></member>
      <member refid="classeditor_object_1ae5c4229489a3b798968960d7806a96a9" prot="public" virt="non-virtual"><scope>editorObject</scope><name>~editorObject</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
