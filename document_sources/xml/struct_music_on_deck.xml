<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.14.0" xml:lang="en-US">
  <compounddef id="struct_music_on_deck" kind="struct" language="C++" prot="public">
    <compoundname>MusicOnDeck</compoundname>
    <includes refid="_music_control_panel_8hpp" local="no">MusicControlPanel.hpp</includes>
    <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="struct_music_on_deck_1ad0a6052696e1eda69e1de2ca883377d9" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool MusicOnDeck::play</definition>
        <argsstring></argsstring>
        <name>play</name>
        <qualifiedname>MusicOnDeck::play</qualifiedname>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core_include/audioRender/ManualMix/MusicControlPanel.hpp" line="27" column="43" bodyfile="core_include/audioRender/ManualMix/MusicControlPanel.hpp" bodystart="27" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_music_on_deck_1a1f21ed340dc5a0de10c6ea3ef5f02ae2" prot="public" static="no" mutable="no">
        <type><ref refid="struct_decoder" kindref="compound">Decoder</ref></type>
        <definition>Decoder MusicOnDeck::dec</definition>
        <argsstring></argsstring>
        <name>dec</name>
        <qualifiedname>MusicOnDeck::dec</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core_include/audioRender/ManualMix/MusicControlPanel.hpp" line="28" column="43" bodyfile="core_include/audioRender/ManualMix/MusicControlPanel.hpp" bodystart="28" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_music_on_deck_1a40f67a5fdbed5601ec7e8bc624adda81" prot="public" static="no" mutable="no">
        <type><ref refid="class_f_x_control_panel" kindref="compound">FXControlPanel</ref> *</type>
        <definition>FXControlPanel* MusicOnDeck::fxP</definition>
        <argsstring></argsstring>
        <name>fxP</name>
        <qualifiedname>MusicOnDeck::fxP</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core_include/audioRender/ManualMix/MusicControlPanel.hpp" line="29" column="41" bodyfile="core_include/audioRender/ManualMix/MusicControlPanel.hpp" bodystart="29" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_music_on_deck_1a676df855f013b4c7efebfeda13fcab32" prot="public" static="no" mutable="no">
        <type>std::optional&lt; soundtouch::SoundTouch &gt;</type>
        <definition>std::optional&lt;soundtouch::SoundTouch&gt; MusicOnDeck::st</definition>
        <argsstring></argsstring>
        <name>st</name>
        <qualifiedname>MusicOnDeck::st</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core_include/audioRender/ManualMix/MusicControlPanel.hpp" line="30" column="19" bodyfile="core_include/audioRender/ManualMix/MusicControlPanel.hpp" bodystart="30" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="struct_music_on_deck_1a25b320b8236579fcccd0d33682b98bd6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>MusicOnDeck::MusicOnDeck</definition>
        <argsstring>()</argsstring>
        <name>MusicOnDeck</name>
        <qualifiedname>MusicOnDeck::MusicOnDeck</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core_include/audioRender/ManualMix/MusicControlPanel.hpp" line="31" column="5" bodyfile="core_include/audioRender/ManualMix/MusicControlPanel.hpp" bodystart="31" bodyend="39"/>
      </memberdef>
      <memberdef kind="function" id="struct_music_on_deck_1ac8fb7619e76b328d2714d273deb77518" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>MusicOnDeck::~MusicOnDeck</definition>
        <argsstring>()</argsstring>
        <name>~MusicOnDeck</name>
        <qualifiedname>MusicOnDeck::~MusicOnDeck</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core_include/audioRender/ManualMix/MusicControlPanel.hpp" line="40" column="5" bodyfile="core_include/audioRender/ManualMix/MusicControlPanel.hpp" bodystart="40" bodyend="44"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Music handling data structure for manual mode. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="2">
        <label>Decoder</label>
        <link refid="struct_decoder"/>
        <childnode refid="3" relation="usage">
          <edgelabel>musicBinary</edgelabel>
        </childnode>
      </node>
      <node id="4">
        <label>FXControlPanel</label>
        <link refid="class_f_x_control_panel"/>
        <childnode refid="5" relation="usage">
          <edgelabel>compressorPanel</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>distortionPanel</edgelabel>
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>echoPanel</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>eqPanel</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>filterPanel</edgelabel>
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>flangerPanel</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>ocsFilterPanel</edgelabel>
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>pannerPanel</edgelabel>
        </childnode>
        <childnode refid="13" relation="usage">
          <edgelabel>phaserPanel</edgelabel>
        </childnode>
        <childnode refid="14" relation="usage">
          <edgelabel>robotPanel</edgelabel>
        </childnode>
        <childnode refid="15" relation="usage">
          <edgelabel>rollPanel</edgelabel>
        </childnode>
        <childnode refid="16" relation="usage">
          <edgelabel>trancePanel</edgelabel>
        </childnode>
        <childnode refid="17" relation="usage">
          <edgelabel>volPanel</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>MusicOnDeck</label>
        <link refid="struct_music_on_deck"/>
        <childnode refid="2" relation="usage">
          <edgelabel>dec</edgelabel>
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>fxP</edgelabel>
        </childnode>
      </node>
      <node id="5">
        <label>std::pair&lt; bool, CompressorFAUSTMan &gt;</label>
      </node>
      <node id="6">
        <label>std::pair&lt; bool, DistortionFAUSTMan &gt;</label>
      </node>
      <node id="8">
        <label>std::pair&lt; bool, EQFAUSTMan &gt;</label>
      </node>
      <node id="7">
        <label>std::pair&lt; bool, EchoFAUSTMan &gt;</label>
      </node>
      <node id="9">
        <label>std::pair&lt; bool, FilterFAUSTMan &gt;</label>
      </node>
      <node id="10">
        <label>std::pair&lt; bool, FlangerFAUSTMan &gt;</label>
      </node>
      <node id="11">
        <label>std::pair&lt; bool, OcsFilterFAUSTMan &gt;</label>
      </node>
      <node id="12">
        <label>std::pair&lt; bool, PannerFAUSTMan &gt;</label>
      </node>
      <node id="13">
        <label>std::pair&lt; bool, PhaserFAUSTMan &gt;</label>
      </node>
      <node id="14">
        <label>std::pair&lt; bool, RobotFAUSTMan &gt;</label>
      </node>
      <node id="15">
        <label>std::pair&lt; bool, RollFAUSTMan &gt;</label>
      </node>
      <node id="16">
        <label>std::pair&lt; bool, TranceFAUSTMan &gt;</label>
      </node>
      <node id="17">
        <label>std::pair&lt; bool, VolFAUSTMan &gt;</label>
      </node>
      <node id="3">
        <label>std::vector&lt; uint8_t &gt;</label>
      </node>
    </collaborationgraph>
    <location file="core_include/audioRender/ManualMix/MusicControlPanel.hpp" line="26" column="1" bodyfile="core_include/audioRender/ManualMix/MusicControlPanel.hpp" bodystart="26" bodyend="45"/>
    <listofallmembers>
      <member refid="struct_music_on_deck_1a1f21ed340dc5a0de10c6ea3ef5f02ae2" prot="public" virt="non-virtual"><scope>MusicOnDeck</scope><name>dec</name></member>
      <member refid="struct_music_on_deck_1a40f67a5fdbed5601ec7e8bc624adda81" prot="public" virt="non-virtual"><scope>MusicOnDeck</scope><name>fxP</name></member>
      <member refid="struct_music_on_deck_1a25b320b8236579fcccd0d33682b98bd6" prot="public" virt="non-virtual"><scope>MusicOnDeck</scope><name>MusicOnDeck</name></member>
      <member refid="struct_music_on_deck_1ad0a6052696e1eda69e1de2ca883377d9" prot="public" virt="non-virtual"><scope>MusicOnDeck</scope><name>play</name></member>
      <member refid="struct_music_on_deck_1a676df855f013b4c7efebfeda13fcab32" prot="public" virt="non-virtual"><scope>MusicOnDeck</scope><name>st</name></member>
      <member refid="struct_music_on_deck_1ac8fb7619e76b328d2714d273deb77518" prot="public" virt="non-virtual"><scope>MusicOnDeck</scope><name>~MusicOnDeck</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
