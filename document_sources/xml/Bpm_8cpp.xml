<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.14.0" xml:lang="en-US">
  <compounddef id="Bpm_8cpp" kind="file" language="C++">
    <compoundname>Bpm.cpp</compoundname>
    <includes refid="Bpm_8hpp" local="yes">Bpm.hpp</includes>
    <incdepgraph>
      <node id="17">
        <label>PDJE_EXPORT_SETTER.hpp</label>
        <link refid="PDJE__EXPORT__SETTER_8hpp"/>
      </node>
      <node id="18">
        <label>PDJE_LOG_SETTER.hpp</label>
        <link refid="PDJE__LOG__SETTER_8hpp"/>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>CapnpBinary.hpp</label>
        <link refid="CapnpBinary_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>FrameCalc.hpp</label>
        <link refid="FrameCalc_8hpp"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>include/db/Capnp/Translators/MixTranslator/Bpm.cpp</label>
        <link refid="Bpm_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>Bpm.hpp</label>
        <link refid="Bpm_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>Mix.hpp</label>
        <link refid="Mix_8hpp"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>MixBinary.capnp.h</label>
      </node>
      <node id="15">
        <label>MusicBinary.capnp.h</label>
      </node>
      <node id="16">
        <label>NoteBinary.capnp.h</label>
      </node>
      <node id="9">
        <label>algorithm</label>
      </node>
      <node id="12">
        <label>capnp/message.h</label>
      </node>
      <node id="13">
        <label>capnp/serialize.h</label>
      </node>
      <node id="8">
        <label>cmath</label>
      </node>
      <node id="22">
        <label>filesystem</label>
      </node>
      <node id="25">
        <label>hwy/aligned_allocator.h</label>
      </node>
      <node id="5">
        <label>mutex</label>
      </node>
      <node id="11">
        <label>optional</label>
      </node>
      <node id="20">
        <label>spdlog/sinks/basic_file_sink.h</label>
      </node>
      <node id="21">
        <label>spdlog/sinks/stdout_color_sinks.h</label>
      </node>
      <node id="19">
        <label>spdlog/spdlog.h</label>
      </node>
      <node id="6">
        <label>string</label>
      </node>
      <node id="24">
        <label>string_view</label>
      </node>
      <node id="4">
        <label>thread</label>
      </node>
      <node id="23">
        <label>type_traits</label>
      </node>
      <node id="3">
        <label>vector</label>
      </node>
    </incdepgraph>
    <sectiondef kind="func">
      <memberdef kind="function" id="Bpm_8cpp_1a88b0de12ebc7f29ffc71e140169681b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void bpm_thread</definition>
        <argsstring>(MixStruct *M, std::mutex *bpm_locker, BpmStruct *bpms, unsigned long range)</argsstring>
        <name>bpm_thread</name>
        <param>
          <type><ref refid="structMixStruct" kindref="compound">MixStruct</ref> *</type>
          <declname>M</declname>
        </param>
        <param>
          <type>std::mutex *</type>
          <declname>bpm_locker</declname>
        </param>
        <param>
          <type><ref refid="structBpmStruct" kindref="compound">BpmStruct</ref> *</type>
          <declname>bpms</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>range</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/db/Capnp/Translators/MixTranslator/Bpm.cpp" line="18" column="1" bodyfile="include/db/Capnp/Translators/MixTranslator/Bpm.cpp" bodystart="18" bodyend="50"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="Bpm_8hpp" kindref="compound">Bpm.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4" refid="classBPM_1ac21c692bbcfb2cd43aa46e23e36ca293" refkind="member"><highlight class="normal"><ref refid="classBPM_1ac21c692bbcfb2cd43aa46e23e36ca293" kindref="member">BPM::BPM</ref>()</highlight></codeline>
<codeline lineno="5"><highlight class="normal">{</highlight></codeline>
<codeline lineno="6"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classBPM_1a6e8d067dc319dd26b6bdd10606d2f72d" kindref="member">usable_threads</ref><sp/>=<sp/>std::thread::hardware_concurrency();</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classBPM_1a6e8d067dc319dd26b6bdd10606d2f72d" kindref="member">usable_threads</ref><sp/>==<sp/>0){</highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classBPM_1a6e8d067dc319dd26b6bdd10606d2f72d" kindref="member">usable_threads</ref><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10"><highlight class="normal">}</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12" refid="classBPM_1a7efee7a2cf514afbd302c1f88ad320ff" refkind="member"><highlight class="normal"><ref refid="classBPM_1a7efee7a2cf514afbd302c1f88ad320ff" kindref="member">BPM::~BPM</ref>()</highlight></codeline>
<codeline lineno="13"><highlight class="normal">{</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal">}</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="18" refid="Bpm_8cpp_1a88b0de12ebc7f29ffc71e140169681b3" refkind="member"><highlight class="normal"><ref refid="Bpm_8cpp_1a88b0de12ebc7f29ffc71e140169681b3" kindref="member">bpm_thread</ref>(</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structMixStruct" kindref="compound">MixStruct</ref>*<sp/>M,<sp/></highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>std::mutex*<sp/>bpm_locker,<sp/></highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structBpmStruct" kindref="compound">BpmStruct</ref>*<sp/>bpms,<sp/></highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>range</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="24"><highlight class="normal">{</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structMixStruct" kindref="compound">MixStruct</ref>*<sp/>mp<sp/>=<sp/>M;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;range;<sp/>++i){</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(mp-&gt;<ref refid="structMixStruct_1a314c1d61023e8cd69d16e3fed823f0f5" kindref="member">RP</ref>.getType()<sp/>==<sp/>TypeEnum::BPM_CONTROL){</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>bpmStr<sp/>=<sp/>std::string(mp-&gt;<ref refid="structMixStruct_1a314c1d61023e8cd69d16e3fed823f0f5" kindref="member">RP</ref>.getFirst().cStr());</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structBpmFragment" kindref="compound">BpmFragment</ref><sp/>tempbpm;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tempbpm.<ref refid="structBpmFragment_1a581acc6c23ec9205f26ca09117aaafe7" kindref="member">bar</ref><sp/>=<sp/>mp-&gt;<ref refid="structMixStruct_1a314c1d61023e8cd69d16e3fed823f0f5" kindref="member">RP</ref>.getBar();</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tempbpm.<ref refid="structBpmFragment_1a9f2f09c2a59575d2aaf85decfaca4f62" kindref="member">beat</ref><sp/>=<sp/>mp-&gt;<ref refid="structMixStruct_1a314c1d61023e8cd69d16e3fed823f0f5" kindref="member">RP</ref>.getBeat();</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tempbpm.<ref refid="structBpmFragment_1a8cb01948227beb2939e67b0aed378fab" kindref="member">separate</ref><sp/>=<sp/>mp-&gt;<ref refid="structMixStruct_1a314c1d61023e8cd69d16e3fed823f0f5" kindref="member">RP</ref>.getSeparate();</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tempbpm.<ref refid="structBpmFragment_1aff3e11fa4ee76d171b5bf93da9a27002" kindref="member">bpm</ref><sp/>=<sp/>std::stod(bpmStr);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal">(...)</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="PDJE__LOG__SETTER_8hpp_1ab5c002a5dab4ac06223c10cc8c69e287" kindref="member">critlog</ref>(</highlight><highlight class="stringliteral">&quot;failed<sp/>to<sp/>convert<sp/>string<sp/>to<sp/>double.<sp/>From<sp/>Bpm.cpp<sp/>bpm_thread.<sp/>ExceptionLog:<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="PDJE__LOG__SETTER_8hpp_1ab5c002a5dab4ac06223c10cc8c69e287" kindref="member">critlog</ref>(bpmStr);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tempbpm.<ref refid="structBpmFragment_1aff3e11fa4ee76d171b5bf93da9a27002" kindref="member">bpm</ref><sp/>=<sp/>-404;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::lock_guard&lt;std::mutex&gt;<sp/>lock(*bpm_locker);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bpms-&gt;<ref refid="structBpmStruct_1aa27a7fdda1a74bac6d5a61b459c2ee45" kindref="member">fragments</ref>.push_back(tempbpm);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++mp;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="50"><highlight class="normal">}</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53" refid="classBPM_1ae216c1ddcfbfd512746b2d1c8a680de3" refkind="member"><highlight class="normal"><ref refid="classBPM_1ae216c1ddcfbfd512746b2d1c8a680de3" kindref="member">BPM::getBpms</ref>(<ref refid="classMIX" kindref="compound">MIX</ref>&amp;<sp/>mixx)</highlight></codeline>
<codeline lineno="54"><highlight class="normal">{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>jobs_per_thread<sp/>=<sp/>mixx.<ref refid="classMIX_1a8195224b3dde178a14717c9356150538" kindref="member">mixVec</ref>.size()<sp/>/<sp/><ref refid="classBPM_1a6e8d067dc319dd26b6bdd10606d2f72d" kindref="member">usable_threads</ref>;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(jobs_per_thread<sp/>==<sp/>0){</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::mutex<sp/>bpm_locker;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="Bpm_8cpp_1a88b0de12ebc7f29ffc71e140169681b3" kindref="member">bpm_thread</ref>(</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;(mixx.<ref refid="classMIX_1a8195224b3dde178a14717c9356150538" kindref="member">mixVec</ref>[0]),</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;bpm_locker,</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;(<ref refid="classBPM_1af4082077eb47049bc829a428f3a4959f" kindref="member">bpmVec</ref>),</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mixx.<ref refid="classMIX_1a8195224b3dde178a14717c9356150538" kindref="member">mixVec</ref>.size()</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>remained_job<sp/>=<sp/>mixx.<ref refid="classMIX_1a8195224b3dde178a14717c9356150538" kindref="member">mixVec</ref>.size()<sp/>-<sp/>(jobs_per_thread<sp/>*<sp/><ref refid="classBPM_1a6e8d067dc319dd26b6bdd10606d2f72d" kindref="member">usable_threads</ref>);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::thread&gt;<sp/>thread_pool;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="audioTest_8cpp_1a7618272fcf9d87de9616cec36f26d330" kindref="member">idx</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::mutex<sp/>bpm_locker;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;(<ref refid="classBPM_1a6e8d067dc319dd26b6bdd10606d2f72d" kindref="member">usable_threads</ref><sp/>-<sp/>1);<sp/>++i){</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thread_pool.emplace_back(</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="Bpm_8cpp_1a88b0de12ebc7f29ffc71e140169681b3" kindref="member">bpm_thread</ref>,<sp/></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;(mixx.<ref refid="classMIX_1a8195224b3dde178a14717c9356150538" kindref="member">mixVec</ref>[<ref refid="audioTest_8cpp_1a7618272fcf9d87de9616cec36f26d330" kindref="member">idx</ref>]),</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;bpm_locker,</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;(<ref refid="classBPM_1af4082077eb47049bc829a428f3a4959f" kindref="member">bpmVec</ref>),</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>jobs_per_thread);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="audioTest_8cpp_1a7618272fcf9d87de9616cec36f26d330" kindref="member">idx</ref><sp/>+=<sp/>jobs_per_thread;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thread_pool.emplace_back(</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="Bpm_8cpp_1a88b0de12ebc7f29ffc71e140169681b3" kindref="member">bpm_thread</ref>,<sp/></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;(mixx.<ref refid="classMIX_1a8195224b3dde178a14717c9356150538" kindref="member">mixVec</ref>[<ref refid="audioTest_8cpp_1a7618272fcf9d87de9616cec36f26d330" kindref="member">idx</ref>]),</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;bpm_locker,</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;(<ref refid="classBPM_1af4082077eb47049bc829a428f3a4959f" kindref="member">bpmVec</ref>),</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>jobs_per_thread<sp/>+<sp/>remained_job);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=0<sp/>;<sp/>i&lt;thread_pool.size();<sp/>++i){</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thread_pool[i].join();</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classBPM_1af4082077eb47049bc829a428f3a4959f" kindref="member">bpmVec</ref>.sortFragment();</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classBPM_1af4082077eb47049bc829a428f3a4959f" kindref="member">bpmVec</ref>.fragments.empty()<sp/>||</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classBPM_1af4082077eb47049bc829a428f3a4959f" kindref="member">bpmVec</ref>.fragments[0].bar<sp/>!=<sp/>0<sp/>||</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classBPM_1af4082077eb47049bc829a428f3a4959f" kindref="member">bpmVec</ref>.fragments[0].beat<sp/>!=<sp/>0</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>){</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="PDJE__LOG__SETTER_8hpp_1ab5c002a5dab4ac06223c10cc8c69e287" kindref="member">critlog</ref>(</highlight><highlight class="stringliteral">&quot;failed<sp/>to<sp/>sort<sp/>bpmFragments.<sp/>from<sp/>BPM<sp/>getBpms.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classBPM_1af4082077eb47049bc829a428f3a4959f" kindref="member">bpmVec</ref>.calcFrame();</highlight></codeline>
<codeline lineno="101"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="include/db/Capnp/Translators/MixTranslator/Bpm.cpp"/>
  </compounddef>
</doxygen>
