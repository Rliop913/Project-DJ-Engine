<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.14.0" xml:lang="en-US">
  <compounddef id="editorBranch_8cpp" kind="file" language="C++">
    <compoundname>editorBranch.cpp</compoundname>
    <includes refid="editorBranch_8hpp" local="yes">editorBranch.hpp</includes>
    <includes local="yes">git2/oid.h</includes>
    <includes refid="PDJE__LOG__SETTER_8hpp" local="yes">PDJE_LOG_SETTER.hpp</includes>
    <incdepgraph>
      <node id="9">
        <label>PDJE_EXPORT_SETTER.hpp</label>
        <link refid="PDJE__EXPORT__SETTER_8hpp"/>
      </node>
      <node id="11">
        <label>PDJE_LOG_SETTER.hpp</label>
        <link refid="PDJE__LOG__SETTER_8hpp"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>include/editor/featureWrapper/GitWrap/Branch/editorBranch.cpp</label>
        <link refid="editorBranch_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>editorBranch.hpp</label>
        <link refid="editorBranch_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>editorCommit.hpp</label>
        <link refid="editorCommit_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>filesystem</label>
      </node>
      <node id="4">
        <label>git2.h</label>
      </node>
      <node id="10">
        <label>git2/oid.h</label>
      </node>
      <node id="8">
        <label>list</label>
      </node>
      <node id="7">
        <label>optional</label>
      </node>
      <node id="13">
        <label>spdlog/sinks/basic_file_sink.h</label>
      </node>
      <node id="14">
        <label>spdlog/sinks/stdout_color_sinks.h</label>
      </node>
      <node id="12">
        <label>spdlog/spdlog.h</label>
      </node>
      <node id="5">
        <label>string</label>
      </node>
      <node id="17">
        <label>string_view</label>
      </node>
      <node id="16">
        <label>type_traits</label>
      </node>
      <node id="6">
        <label>vector</label>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/><sp/>&quot;<ref refid="editorBranch_8hpp" kindref="compound">editorBranch.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;git2/oid.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="PDJE__LOG__SETTER_8hpp" kindref="compound">PDJE_LOG_SETTER.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacegitwrap" kindref="compound">gitwrap</ref>;</highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal">std::vector&lt;std::string&gt;</highlight></codeline>
<codeline lineno="8" refid="classgitwrap_1_1branch_1ae0d093973cfdaa5791802c46d3a9309b" refkind="member"><highlight class="normal"><ref refid="classgitwrap_1_1branch_1ae0d093973cfdaa5791802c46d3a9309b" kindref="member">branch::ShowExistBranch</ref>()</highlight></codeline>
<codeline lineno="9"><highlight class="normal">{</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/>git_branch_iterator*<sp/>branchIT<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(git_branch_iterator_new(&amp;branchIT,<sp/><ref refid="classgitwrap_1_1branch_1ac5d4fc73cb2f76b3bc1646454840aa95" kindref="member">repo_pointer</ref>,<sp/>GIT_BRANCH_LOCAL)<sp/>!=<sp/>0){</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="PDJE__LOG__SETTER_8hpp_1ab5c002a5dab4ac06223c10cc8c69e287" kindref="member">critlog</ref>(</highlight><highlight class="stringliteral">&quot;failed<sp/>to<sp/>iterate<sp/>branch.<sp/>from<sp/>gitwrap::branch<sp/>ShowExistBranch.<sp/>gitLog:<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="PDJE__LOG__SETTER_8hpp_1ab5c002a5dab4ac06223c10cc8c69e287" kindref="member">critlog</ref>(git_error_last()-&gt;message);</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::vector&lt;std::string&gt;();</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/>git_reference*<sp/>branchITRRef;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>git_branch_t<sp/>branchType;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/><ref refid="classgitwrap_1_1branch_1a059d40014bd9076186a2450c8792790a" kindref="member">branchName</ref>;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>branchlist;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(git_branch_next(&amp;branchITRRef,<sp/>&amp;branchType,<sp/>branchIT)<sp/>==<sp/>0){</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(git_branch_name(&amp;<ref refid="classgitwrap_1_1branch_1a059d40014bd9076186a2450c8792790a" kindref="member">branchName</ref>,<sp/>branchITRRef)<sp/>==<sp/>0){</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>branchlist.emplace_back(<ref refid="classgitwrap_1_1branch_1a059d40014bd9076186a2450c8792790a" kindref="member">branchName</ref>);</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>git_reference_free(branchITRRef);</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>git_branch_iterator_free(branchIT);</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>branchlist;</highlight></codeline>
<codeline lineno="29"><highlight class="normal">}</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;</highlight></codeline>
<codeline lineno="32"><highlight class="normal">std::string</highlight></codeline>
<codeline lineno="33" refid="classgitwrap_1_1branch_1a9edf474f1e04ba4830b6d7ace83fc654" refkind="member"><highlight class="normal"><ref refid="classgitwrap_1_1branch_1adf3f8cc3764e9600e78b738fa59e841e" kindref="member">branch::ToBranchRefName</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/><ref refid="classgitwrap_1_1branch_1a059d40014bd9076186a2450c8792790a" kindref="member">branchName</ref>){</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;refs/heads/&quot;</highlight><highlight class="normal"><sp/>+<sp/><ref refid="classgitwrap_1_1branch_1a059d40014bd9076186a2450c8792790a" kindref="member">branchName</ref>;</highlight></codeline>
<codeline lineno="35"><highlight class="normal">}</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;</highlight></codeline>
<codeline lineno="38"><highlight class="normal">std::string</highlight></codeline>
<codeline lineno="39" refid="classgitwrap_1_1branch_1acae49b5f6758173db14821aad1b9bb71" refkind="member"><highlight class="normal"><ref refid="classgitwrap_1_1branch_1adf3f8cc3764e9600e78b738fa59e841e" kindref="member">branch::ToBranchRefName</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="classgitwrap_1_1branch_1a059d40014bd9076186a2450c8792790a" kindref="member">branchName</ref>){</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;refs/heads/&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::string(<ref refid="classgitwrap_1_1branch_1a059d40014bd9076186a2450c8792790a" kindref="member">branchName</ref>);</highlight></codeline>
<codeline lineno="41"><highlight class="normal">}</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal">std::vector&lt;commit&gt;</highlight></codeline>
<codeline lineno="47" refid="classgitwrap_1_1branch_1a55f244956fde3e69eba54f8454858684" refkind="member"><highlight class="normal"><ref refid="classgitwrap_1_1branch_1a55f244956fde3e69eba54f8454858684" kindref="member">branch::ShowExistCommitsOnBranch</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/><ref refid="classgitwrap_1_1branch_1a059d40014bd9076186a2450c8792790a" kindref="member">branchName</ref>)</highlight></codeline>
<codeline lineno="48"><highlight class="normal">{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>git_revwalk*<sp/>walker<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(git_revwalk_new(&amp;walker,<sp/><ref refid="classgitwrap_1_1branch_1ac5d4fc73cb2f76b3bc1646454840aa95" kindref="member">repo_pointer</ref>)<sp/>!=<sp/>0){</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="PDJE__LOG__SETTER_8hpp_1ab5c002a5dab4ac06223c10cc8c69e287" kindref="member">critlog</ref>(</highlight><highlight class="stringliteral">&quot;failed<sp/>to<sp/>reverse<sp/>walk.<sp/>from<sp/>gitwrap::branch<sp/>ShowExistCommitsOnBranch.<sp/>gitLog:<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="PDJE__LOG__SETTER_8hpp_1ab5c002a5dab4ac06223c10cc8c69e287" kindref="member">critlog</ref>(git_error_last()-&gt;message);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::vector&lt;commit&gt;();</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(git_revwalk_push_ref(walker,<sp/><ref refid="classgitwrap_1_1branch_1adf3f8cc3764e9600e78b738fa59e841e" kindref="member">ToBranchRefName&lt;const std::string&amp;&gt;</ref>(<ref refid="classgitwrap_1_1branch_1a059d40014bd9076186a2450c8792790a" kindref="member">branchName</ref>).c_str())<sp/>!=<sp/>0){</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>git_revwalk_free(walker);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="PDJE__LOG__SETTER_8hpp_1ab5c002a5dab4ac06223c10cc8c69e287" kindref="member">critlog</ref>(</highlight><highlight class="stringliteral">&quot;failed<sp/>to<sp/>push<sp/>reverse<sp/>walk<sp/>ref.<sp/>from<sp/>gitwrap::branch<sp/>ShowExistCommitsOnBranch.<sp/>gitLog:<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="PDJE__LOG__SETTER_8hpp_1ab5c002a5dab4ac06223c10cc8c69e287" kindref="member">critlog</ref>(git_error_last()-&gt;message);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::vector&lt;commit&gt;();</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>git_revwalk_sorting(walker,<sp/>GIT_SORT_TIME);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;commit&gt;<sp/>commits;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>git_oid<sp/>tempid;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(git_revwalk_next(&amp;tempid,<sp/>walker)<sp/>==<sp/>0){</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structgitwrap_1_1commit" kindref="compound">commit</ref><sp/>tempcommit;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>git_oid_cpy(&amp;tempcommit.<ref refid="structgitwrap_1_1commit_1a99f52037b3c4cc106d57ba5afb9a9084" kindref="member">commitID</ref>,<sp/>&amp;tempid);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(git_commit_lookup(&amp;tempcommit.<ref refid="structgitwrap_1_1commit_1aed795b54d06cb41d5293e800ab7c06df" kindref="member">commitPointer</ref>,<sp/><ref refid="classgitwrap_1_1branch_1ac5d4fc73cb2f76b3bc1646454840aa95" kindref="member">repo_pointer</ref>,<sp/>&amp;tempcommit.<ref refid="structgitwrap_1_1commit_1a99f52037b3c4cc106d57ba5afb9a9084" kindref="member">commitID</ref>)<sp/>==<sp/>0){</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tempcommit.<ref refid="structgitwrap_1_1commit_1ac0ad6b68f27f3a5accf8ad092c7dc3be" kindref="member">msg</ref><sp/>=<sp/>std::string(git_commit_message(tempcommit.<ref refid="structgitwrap_1_1commit_1aed795b54d06cb41d5293e800ab7c06df" kindref="member">commitPointer</ref>));</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>commits.emplace_back(std::move(tempcommit));</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>git_revwalk_free(walker);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>commits;</highlight></codeline>
<codeline lineno="78"><highlight class="normal">}</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81" refid="classgitwrap_1_1branch_1a5e97f25efd4a6a61b06b0e31437c3bfb" refkind="member"><highlight class="normal"><ref refid="classgitwrap_1_1branch_1a5e97f25efd4a6a61b06b0e31437c3bfb" kindref="member">branch::SetBranch</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>NewbranchName)</highlight></codeline>
<codeline lineno="82"><highlight class="normal">{</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(git_repository_set_head(<ref refid="classgitwrap_1_1branch_1ac5d4fc73cb2f76b3bc1646454840aa95" kindref="member">repo_pointer</ref>,<sp/><ref refid="classgitwrap_1_1branch_1adf3f8cc3764e9600e78b738fa59e841e" kindref="member">ToBranchRefName&lt;const std::string&amp;&gt;</ref>(NewbranchName).c_str())<sp/>==<sp/>0){</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classgitwrap_1_1branch_1a059d40014bd9076186a2450c8792790a" kindref="member">branchName</ref><sp/>=<sp/>NewbranchName;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="PDJE__LOG__SETTER_8hpp_1ab5c002a5dab4ac06223c10cc8c69e287" kindref="member">critlog</ref>(</highlight><highlight class="stringliteral">&quot;failed<sp/>to<sp/>set<sp/>branch.<sp/>from<sp/>gitwrap::branch<sp/>SetBranch.<sp/>gitLog:<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="PDJE__LOG__SETTER_8hpp_1ab5c002a5dab4ac06223c10cc8c69e287" kindref="member">critlog</ref>(git_error_last()-&gt;message);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="92"><highlight class="normal">}</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96" refid="classgitwrap_1_1branch_1a051bd627fd9204e95bcdf55f2356ca68" refkind="member"><highlight class="normal"><ref refid="classgitwrap_1_1branch_1a051bd627fd9204e95bcdf55f2356ca68" kindref="member">branch::MakeNewFromHEAD</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>newBranchName)</highlight></codeline>
<codeline lineno="97"><highlight class="normal">{</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>head<sp/>=<sp/><ref refid="classgitwrap_1_1branch_1a5df6117c678de498f588cdbb07473cf7" kindref="member">GetHEAD</ref>();</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!head.has_value()){</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="PDJE__LOG__SETTER_8hpp_1ab5c002a5dab4ac06223c10cc8c69e287" kindref="member">critlog</ref>(</highlight><highlight class="stringliteral">&quot;failed<sp/>to<sp/>get<sp/>head.<sp/>from<sp/>gitwrap::branch<sp/>MakeNewFromHEAD.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>git_reference*<sp/>newbranch<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(git_branch_create(&amp;newbranch,<sp/><ref refid="classgitwrap_1_1branch_1ac5d4fc73cb2f76b3bc1646454840aa95" kindref="member">repo_pointer</ref>,<sp/>newBranchName.c_str(),<sp/>head-&gt;commitPointer,<sp/>1)<sp/>==<sp/>0){</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>git_reference_free(newbranch);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>refN<sp/>=<sp/><ref refid="classgitwrap_1_1branch_1adf3f8cc3764e9600e78b738fa59e841e" kindref="member">ToBranchRefName&lt;const std::string&amp;&gt;</ref>(newBranchName);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>git_repository_set_head(<ref refid="classgitwrap_1_1branch_1ac5d4fc73cb2f76b3bc1646454840aa95" kindref="member">repo_pointer</ref>,<sp/>refN.c_str());</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(newbranch<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">){</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>git_reference_free(newbranch);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="PDJE__LOG__SETTER_8hpp_1ab5c002a5dab4ac06223c10cc8c69e287" kindref="member">critlog</ref>(</highlight><highlight class="stringliteral">&quot;failed<sp/>to<sp/>make<sp/>new<sp/>from<sp/>head.<sp/>from<sp/>gitwrap::branch<sp/>MakeNewFromHEAD.<sp/>gitLog:<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="PDJE__LOG__SETTER_8hpp_1ab5c002a5dab4ac06223c10cc8c69e287" kindref="member">critlog</ref>(git_error_last()-&gt;message);</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="116"><highlight class="normal">}</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119" refid="classgitwrap_1_1branch_1a2e4615dedd0d65a107fd64548982d4f2" refkind="member"><highlight class="normal"><ref refid="classgitwrap_1_1branch_1a2e4615dedd0d65a107fd64548982d4f2" kindref="member">branch::MakeNewFromCommit</ref>(<ref refid="structgitwrap_1_1commit" kindref="compound">commit</ref>&amp;<sp/>c,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>newBranchName)</highlight></codeline>
<codeline lineno="120"><highlight class="normal">{</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>git_reference*<sp/>newBranchRef<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(git_branch_create(&amp;newBranchRef,<sp/><ref refid="classgitwrap_1_1branch_1ac5d4fc73cb2f76b3bc1646454840aa95" kindref="member">repo_pointer</ref>,<sp/>newBranchName.c_str(),<sp/>c.<ref refid="structgitwrap_1_1commit_1aed795b54d06cb41d5293e800ab7c06df" kindref="member">commitPointer</ref>,<sp/>1)<sp/>==<sp/>0){</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>git_reference_free(newBranchRef);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classgitwrap_1_1branch_1a5e97f25efd4a6a61b06b0e31437c3bfb" kindref="member">SetBranch</ref>(newBranchName);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="PDJE__LOG__SETTER_8hpp_1ab5c002a5dab4ac06223c10cc8c69e287" kindref="member">critlog</ref>(</highlight><highlight class="stringliteral">&quot;failed<sp/>to<sp/>create<sp/>from<sp/>commit<sp/>.<sp/>from<sp/>gitwrap::branch<sp/>MakeNewFromCommit.<sp/>gitLog:<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="PDJE__LOG__SETTER_8hpp_1ab5c002a5dab4ac06223c10cc8c69e287" kindref="member">critlog</ref>(git_error_last()-&gt;message);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="131"><highlight class="normal">}</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134" refid="classgitwrap_1_1branch_1a5fc5405a63a380548fa4b8b6c720b672" refkind="member"><highlight class="normal"><ref refid="classgitwrap_1_1branch_1a5fc5405a63a380548fa4b8b6c720b672" kindref="member">branch::DeleteBranch</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/><ref refid="classgitwrap_1_1branch_1a059d40014bd9076186a2450c8792790a" kindref="member">branchName</ref>)</highlight></codeline>
<codeline lineno="135"><highlight class="normal">{</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>git_reference*<sp/>branchForDelete<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(git_branch_lookup(&amp;branchForDelete,<sp/><ref refid="classgitwrap_1_1branch_1ac5d4fc73cb2f76b3bc1646454840aa95" kindref="member">repo_pointer</ref>,<sp/><ref refid="classgitwrap_1_1branch_1a059d40014bd9076186a2450c8792790a" kindref="member">branchName</ref>.c_str(),<sp/>GIT_BRANCH_LOCAL)<sp/>!=<sp/>0){</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="PDJE__LOG__SETTER_8hpp_1a6f4ac2826ed21d631281a5644018f590" kindref="member">warnlog</ref>(</highlight><highlight class="stringliteral">&quot;failed<sp/>to<sp/>ref<sp/>branch<sp/>from<sp/>gitwrap::branch<sp/>DeleteBranch<sp/>.<sp/>gitLog:<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="PDJE__LOG__SETTER_8hpp_1a6f4ac2826ed21d631281a5644018f590" kindref="member">warnlog</ref>(git_error_last()-&gt;message);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(git_branch_delete(branchForDelete)<sp/>!=<sp/>0){</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>git_reference_free(branchForDelete);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="PDJE__LOG__SETTER_8hpp_1ab5c002a5dab4ac06223c10cc8c69e287" kindref="member">critlog</ref>(</highlight><highlight class="stringliteral">&quot;failed<sp/>to<sp/>delete<sp/>branch.<sp/>from<sp/>gitwrap::branch<sp/>DeleteBranch.<sp/>gitLog:<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="PDJE__LOG__SETTER_8hpp_1ab5c002a5dab4ac06223c10cc8c69e287" kindref="member">critlog</ref>(git_error_last()-&gt;message);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>git_reference_free(branchForDelete);</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="151"><highlight class="normal">}</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155" refid="classgitwrap_1_1branch_1a544e4ab210cea6436eb8238b70946fdb" refkind="member"><highlight class="normal"><ref refid="classgitwrap_1_1branch_1a544e4ab210cea6436eb8238b70946fdb" kindref="member">branch::CheckoutThisHEAD</ref>()</highlight></codeline>
<codeline lineno="156"><highlight class="normal">{</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classgitwrap_1_1branch_1a93b2d69e629d19540344910277a643c3" kindref="member">FLAG_TEMP_CHECKOUT</ref>.reset();</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>chkHead<sp/>=<sp/>git_checkout_head(<ref refid="classgitwrap_1_1branch_1ac5d4fc73cb2f76b3bc1646454840aa95" kindref="member">repo_pointer</ref>,<sp/>&amp;<ref refid="classgitwrap_1_1branch_1a0c8c937a6057d4d638e4dac6e3482265" kindref="member">checkoutOpts</ref>)<sp/>==<sp/>0;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!chkHead){</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="PDJE__LOG__SETTER_8hpp_1ab5c002a5dab4ac06223c10cc8c69e287" kindref="member">critlog</ref>(</highlight><highlight class="stringliteral">&quot;failed<sp/>to<sp/>checkout<sp/>to<sp/>head.<sp/>from<sp/>gitwrap::branch<sp/>CheckouotThisHEAD.<sp/>gitLog:<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="PDJE__LOG__SETTER_8hpp_1ab5c002a5dab4ac06223c10cc8c69e287" kindref="member">critlog</ref>(git_error_last()-&gt;message);</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>chkHead;</highlight></codeline>
<codeline lineno="164"><highlight class="normal">}</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167" refid="classgitwrap_1_1branch_1ab313aded5d74b26e3d6f4ccee8c36710" refkind="member"><highlight class="normal"><ref refid="classgitwrap_1_1branch_1ab313aded5d74b26e3d6f4ccee8c36710" kindref="member">branch::CheckoutCommitTemp</ref>(<ref refid="structgitwrap_1_1commit" kindref="compound">commit</ref>&amp;<sp/>c)</highlight></codeline>
<codeline lineno="168"><highlight class="normal">{</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/>git_object*<sp/>target<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(git_object_lookup(&amp;target,<sp/><ref refid="classgitwrap_1_1branch_1ac5d4fc73cb2f76b3bc1646454840aa95" kindref="member">repo_pointer</ref>,<sp/>&amp;c.<ref refid="structgitwrap_1_1commit_1a99f52037b3c4cc106d57ba5afb9a9084" kindref="member">commitID</ref>,<sp/>GIT_OBJECT_COMMIT)<sp/>!=<sp/>0){</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="PDJE__LOG__SETTER_8hpp_1ab5c002a5dab4ac06223c10cc8c69e287" kindref="member">critlog</ref>(</highlight><highlight class="stringliteral">&quot;failed<sp/>to<sp/>ref<sp/>target.<sp/>from<sp/>gitwrap::branch<sp/>CheckoutCommitTemp.<sp/>gitLog:<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="PDJE__LOG__SETTER_8hpp_1ab5c002a5dab4ac06223c10cc8c69e287" kindref="member">critlog</ref>(git_error_last()-&gt;message);</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(git_checkout_tree(<ref refid="classgitwrap_1_1branch_1ac5d4fc73cb2f76b3bc1646454840aa95" kindref="member">repo_pointer</ref>,<sp/>target,<sp/>&amp;<ref refid="classgitwrap_1_1branch_1a0c8c937a6057d4d638e4dac6e3482265" kindref="member">checkoutOpts</ref>)<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>git_object_free(target);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="PDJE__LOG__SETTER_8hpp_1ab5c002a5dab4ac06223c10cc8c69e287" kindref="member">critlog</ref>(</highlight><highlight class="stringliteral">&quot;failed<sp/>to<sp/>checkout<sp/>to<sp/>tree.<sp/>from<sp/>gitwrap::branch<sp/>CheckoutCommitTemp.<sp/>gitLog:<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="PDJE__LOG__SETTER_8hpp_1ab5c002a5dab4ac06223c10cc8c69e287" kindref="member">critlog</ref>(git_error_last()-&gt;message);</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classgitwrap_1_1branch_1a93b2d69e629d19540344910277a643c3" kindref="member">FLAG_TEMP_CHECKOUT</ref>.has_value()){</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classgitwrap_1_1branch_1a93b2d69e629d19540344910277a643c3" kindref="member">FLAG_TEMP_CHECKOUT</ref>.reset();</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classgitwrap_1_1branch_1a93b2d69e629d19540344910277a643c3" kindref="member">FLAG_TEMP_CHECKOUT</ref>.emplace();</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/>git_oid_cpy(&amp;(<ref refid="classgitwrap_1_1branch_1a93b2d69e629d19540344910277a643c3" kindref="member">FLAG_TEMP_CHECKOUT</ref>.value()),<sp/>&amp;(c.<ref refid="structgitwrap_1_1commit_1a99f52037b3c4cc106d57ba5afb9a9084" kindref="member">commitID</ref>));</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>git_object_free(target);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="189"><highlight class="normal">}</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal">std::optional&lt;commit&gt;</highlight></codeline>
<codeline lineno="193" refid="classgitwrap_1_1branch_1a5df6117c678de498f588cdbb07473cf7" refkind="member"><highlight class="normal"><ref refid="classgitwrap_1_1branch_1a5df6117c678de498f588cdbb07473cf7" kindref="member">branch::GetHEAD</ref>()</highlight></codeline>
<codeline lineno="194"><highlight class="normal">{</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/>git_reference<sp/>*<sp/>headref<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(git_repository_head(&amp;headref,<sp/><ref refid="classgitwrap_1_1branch_1ac5d4fc73cb2f76b3bc1646454840aa95" kindref="member">repo_pointer</ref>)<sp/>==<sp/>0){</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structgitwrap_1_1commit" kindref="compound">commit</ref><sp/>c;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>git_oid_cpy(&amp;c.<ref refid="structgitwrap_1_1commit_1a99f52037b3c4cc106d57ba5afb9a9084" kindref="member">commitID</ref>,git_reference_target(headref));</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(git_commit_lookup(&amp;c.<ref refid="structgitwrap_1_1commit_1aed795b54d06cb41d5293e800ab7c06df" kindref="member">commitPointer</ref>,<sp/><ref refid="classgitwrap_1_1branch_1ac5d4fc73cb2f76b3bc1646454840aa95" kindref="member">repo_pointer</ref>,<sp/>&amp;c.<ref refid="structgitwrap_1_1commit_1a99f52037b3c4cc106d57ba5afb9a9084" kindref="member">commitID</ref>)<sp/>==<sp/>0){</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c.<ref refid="structgitwrap_1_1commit_1ac0ad6b68f27f3a5accf8ad092c7dc3be" kindref="member">msg</ref><sp/>=<sp/>git_commit_message(c.<ref refid="structgitwrap_1_1commit_1aed795b54d06cb41d5293e800ab7c06df" kindref="member">commitPointer</ref>);</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>git_reference_free(headref);</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::move(c);</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>git_reference_free(headref);</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="PDJE__LOG__SETTER_8hpp_1ab5c002a5dab4ac06223c10cc8c69e287" kindref="member">critlog</ref>(</highlight><highlight class="stringliteral">&quot;failed<sp/>to<sp/>getHead.<sp/>from<sp/>gitwrap::branch<sp/>GetHEAD.<sp/>gitLog:<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="PDJE__LOG__SETTER_8hpp_1ab5c002a5dab4ac06223c10cc8c69e287" kindref="member">critlog</ref>(git_error_last()-&gt;message);</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::nullopt;</highlight></codeline>
<codeline lineno="211"><highlight class="normal">}</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213" refid="classgitwrap_1_1branch_1a68fbfd72e7aa5aa101e6c8c9822f370a" refkind="member"><highlight class="normal"><ref refid="classgitwrap_1_1branch_1a68fbfd72e7aa5aa101e6c8c9822f370a" kindref="member">branch::~branch</ref>()</highlight></codeline>
<codeline lineno="214"><highlight class="normal">{</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="include/editor/featureWrapper/GitWrap/Branch/editorBranch.cpp"/>
  </compounddef>
</doxygen>
