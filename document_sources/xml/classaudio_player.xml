<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.14.0" xml:lang="en-US">
  <compounddef id="classaudio_player" kind="class" language="C++" prot="public">
    <compoundname>audioPlayer</compoundname>
    <includes refid="audio_player_8hpp" local="no">audioPlayer.hpp</includes>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classaudio_player_1a5c48f2c80e199026c7608f7b2ec65e39" prot="private" static="no" mutable="no">
        <type>ma_device</type>
        <definition>ma_device audioPlayer::player</definition>
        <argsstring></argsstring>
        <name>player</name>
        <qualifiedname>audioPlayer::player</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MainObjects/audioPlayer/audioPlayer.hpp" line="18" column="16" bodyfile="include/MainObjects/audioPlayer/audioPlayer.hpp" bodystart="18" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classaudio_player_1afa11eecb5a47d618a5300ac3732e6098" prot="private" static="no" mutable="no">
        <type>ma_context</type>
        <definition>ma_context audioPlayer::ctxt</definition>
        <argsstring></argsstring>
        <name>ctxt</name>
        <qualifiedname>audioPlayer::ctxt</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MainObjects/audioPlayer/audioPlayer.hpp" line="19" column="16" bodyfile="include/MainObjects/audioPlayer/audioPlayer.hpp" bodystart="19" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classaudio_player_1a7542853f2c8a2cc69b77c39d9f5793f9" prot="private" static="no" mutable="no">
        <type><ref refid="classaudio_render" kindref="compound">audioRender</ref></type>
        <definition>audioRender audioPlayer::renderer</definition>
        <argsstring></argsstring>
        <name>renderer</name>
        <qualifiedname>audioPlayer::renderer</qualifiedname>
        <briefdescription>
<para>the audio renderer object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MainObjects/audioPlayer/audioPlayer.hpp" line="22" column="17" bodyfile="include/MainObjects/audioPlayer/audioPlayer.hpp" bodystart="22" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classaudio_player_1a0f5732085e4fd82d55f373d3b1e069f8" prot="private" static="no" mutable="no">
        <type>std::vector&lt; float &gt;</type>
        <definition>std::vector&lt;float&gt; audioPlayer::LFaust</definition>
        <argsstring></argsstring>
        <name>LFaust</name>
        <qualifiedname>audioPlayer::LFaust</qualifiedname>
        <briefdescription>
<para>the separated pcm frame for the faust. the left side. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MainObjects/audioPlayer/audioPlayer.hpp" line="25" column="17" bodyfile="include/MainObjects/audioPlayer/audioPlayer.hpp" bodystart="25" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classaudio_player_1ac4d1b88a10a31ab8c0b6d5f17d76e25f" prot="private" static="no" mutable="no">
        <type>std::vector&lt; float &gt;</type>
        <definition>std::vector&lt;float&gt; audioPlayer::RFaust</definition>
        <argsstring></argsstring>
        <name>RFaust</name>
        <qualifiedname>audioPlayer::RFaust</qualifiedname>
        <briefdescription>
<para>the separated pcm frame for the faust. the right side. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MainObjects/audioPlayer/audioPlayer.hpp" line="28" column="17" bodyfile="include/MainObjects/audioPlayer/audioPlayer.hpp" bodystart="28" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classaudio_player_1ab6a3351cfab757ad5bd1cce5f4352caa" prot="private" static="no" mutable="no">
        <type><ref refid="structaudio_engine_data_struct" kindref="compound">audioEngineDataStruct</ref></type>
        <definition>audioEngineDataStruct audioPlayer::engineDatas</definition>
        <argsstring></argsstring>
        <name>engineDatas</name>
        <qualifiedname>audioPlayer::engineDatas</qualifiedname>
        <briefdescription>
<para>the core datas. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MainObjects/audioPlayer/audioPlayer.hpp" line="31" column="27" bodyfile="include/MainObjects/audioPlayer/audioPlayer.hpp" bodystart="31" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classaudio_player_1a167f44a37a6848814cc670d60f750ebb" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string audioPlayer::STATUS</definition>
        <argsstring></argsstring>
        <name>STATUS</name>
        <qualifiedname>audioPlayer::STATUS</qualifiedname>
        <initializer>= &quot;OK&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>the handler status. check when something wrong. do not change this manually. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MainObjects/audioPlayer/audioPlayer.hpp" line="46" column="17" bodyfile="include/MainObjects/audioPlayer/audioPlayer.hpp" bodystart="46" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-func">
      <memberdef kind="function" id="classaudio_player_1ac1159f3e4d2a76760e8de644e1a9ccdc" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ma_device_config</type>
        <definition>ma_device_config audioPlayer::DefaultInit</definition>
        <argsstring>(const unsigned int frameBufferSize)</argsstring>
        <name>DefaultInit</name>
        <qualifiedname>audioPlayer::DefaultInit</qualifiedname>
        <param>
          <type>const unsigned int</type>
          <declname>frameBufferSize</declname>
        </param>
        <briefdescription>
<para>the default initializer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>frameBufferSize</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MainObjects/audioPlayer/audioPlayer.hpp" line="37" column="5" bodyfile="include/MainObjects/audioPlayer/audioPlayer.cpp" bodystart="32" bodyend="47"/>
      </memberdef>
      <memberdef kind="function" id="classaudio_player_1a56b78523fa4fd9c9874eaa6f3b0abe19" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void audioPlayer::ContextInit</definition>
        <argsstring>()</argsstring>
        <name>ContextInit</name>
        <qualifiedname>audioPlayer::ContextInit</qualifiedname>
        <briefdescription>
<para>the context initializer. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MainObjects/audioPlayer/audioPlayer.hpp" line="41" column="5" bodyfile="include/MainObjects/audioPlayer/audioPlayer.cpp" bodystart="24" bodyend="29"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classaudio_player_1ae15f5f974b0ee629d267e16e8db1c8ea" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::string</type>
        <definition>const std::string audioPlayer::GetStatus</definition>
        <argsstring>()</argsstring>
        <name>GetStatus</name>
        <qualifiedname>audioPlayer::GetStatus</qualifiedname>
        <briefdescription>
<para>the status getter for binded languages. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MainObjects/audioPlayer/audioPlayer.hpp" line="50" column="5" bodyfile="include/MainObjects/audioPlayer/audioPlayer.hpp" bodystart="50" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="classaudio_player_1a7e91ca8d0037ef8e2fb50ff7289317aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool audioPlayer::Activate</definition>
        <argsstring>()</argsstring>
        <name>Activate</name>
        <qualifiedname>audioPlayer::Activate</qualifiedname>
        <briefdescription>
<para>Plays music. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MainObjects/audioPlayer/audioPlayer.hpp" line="57" column="5" bodyfile="include/MainObjects/audioPlayer/audioPlayer.cpp" bodystart="92" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="classaudio_player_1a8b3239801762770164c7eba623301c3c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool audioPlayer::Deactivate</definition>
        <argsstring>()</argsstring>
        <name>Deactivate</name>
        <qualifiedname>audioPlayer::Deactivate</qualifiedname>
        <briefdescription>
<para>Stops music. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MainObjects/audioPlayer/audioPlayer.hpp" line="61" column="5" bodyfile="include/MainObjects/audioPlayer/audioPlayer.cpp" bodystart="102" bodyend="110"/>
      </memberdef>
      <memberdef kind="function" id="classaudio_player_1abb3ef085a5c3f162cefe7941765498b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void audioPlayer::ChangeCursorPos</definition>
        <argsstring>(unsigned long long pos)</argsstring>
        <name>ChangeCursorPos</name>
        <qualifiedname>audioPlayer::ChangeCursorPos</qualifiedname>
        <param>
          <type>unsigned long long</type>
          <declname>pos</declname>
        </param>
        <briefdescription>
<para>change the prerendered music&apos;s cursor(the playing position). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MainObjects/audioPlayer/audioPlayer.hpp" line="65" column="5" bodyfile="include/MainObjects/audioPlayer/audioPlayer.cpp" bodystart="119" bodyend="122"/>
      </memberdef>
      <memberdef kind="function" id="classaudio_player_1ae34c11d79c9572daa47b6f9a77649cba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned long long</type>
        <definition>unsigned long long audioPlayer::GetConsumedFrames</definition>
        <argsstring>()</argsstring>
        <name>GetConsumedFrames</name>
        <qualifiedname>audioPlayer::GetConsumedFrames</qualifiedname>
        <briefdescription>
<para>gets consumed frames. with this, you can get how many frames are consumed and music&apos;s playback time. to get playback time, divide the returned value with 48000. The result is Seconds. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>consumed frames </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MainObjects/audioPlayer/audioPlayer.hpp" line="73" column="5" bodyfile="include/MainObjects/audioPlayer/audioPlayer.cpp" bodystart="125" bodyend="128"/>
      </memberdef>
      <memberdef kind="function" id="classaudio_player_1a00c00b5c8146cd7af90abc6c1014ee26" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_f_x_control_pannel" kindref="compound">FXControlPannel</ref> *</type>
        <definition>FXControlPannel * audioPlayer::GetFXControlPannel</definition>
        <argsstring>(const UNSANITIZED &amp;title=&quot;__PDJE__MAIN__&quot;)</argsstring>
        <name>GetFXControlPannel</name>
        <qualifiedname>audioPlayer::GetFXControlPannel</qualifiedname>
        <param>
          <type>const <ref refid="file_name_sanitizer_8hpp_1a3dbfced66c4bb073515956060fd59604" kindref="member">UNSANITIZED</ref> &amp;</type>
          <declname>title</declname>
          <defval>&quot;__PDJE__MAIN__&quot;</defval>
        </param>
        <briefdescription>
<para>fx controller getter this returns the fx controller. with this, you can control the fx in realtime manually. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>title</parametername>
</parameternamelist>
<parameterdescription>
<para>the music to control. &quot;__PDJE__MAIN__&quot; means the prerendered music. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>FXControlPannel* but the &quot;title&quot; doesn&apos;t exists, it returns nullptr. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MainObjects/audioPlayer/audioPlayer.hpp" line="84" column="5" bodyfile="include/MainObjects/audioPlayer/audioPlayer.cpp" bodystart="131" bodyend="147"/>
      </memberdef>
      <memberdef kind="function" id="classaudio_player_1a373d7c2bf9c5f5a30f01c5d628d52d53" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_music_control_pannel" kindref="compound">MusicControlPannel</ref> *</type>
        <definition>MusicControlPannel * audioPlayer::GetMusicControlPannel</definition>
        <argsstring>()</argsstring>
        <name>GetMusicControlPannel</name>
        <qualifiedname>audioPlayer::GetMusicControlPannel</qualifiedname>
        <briefdescription>
<para>music controller getter this returns the music controller. with this, you can load music, stop music in realtime manually. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>MusicControlPannel* if something wrong, it returns nullptr. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MainObjects/audioPlayer/audioPlayer.hpp" line="93" column="5" bodyfile="include/MainObjects/audioPlayer/audioPlayer.cpp" bodystart="150" bodyend="159"/>
      </memberdef>
      <memberdef kind="function" id="classaudio_player_1a3bf1fd80625892dd716c4fdd0f759f06" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>audioPlayer::audioPlayer</definition>
        <argsstring>(litedb &amp;db, trackdata &amp;td, const unsigned int frameBufferSize, const bool hasManual=false)</argsstring>
        <name>audioPlayer</name>
        <qualifiedname>audioPlayer::audioPlayer</qualifiedname>
        <param>
          <type><ref refid="classlitedb" kindref="compound">litedb</ref> &amp;</type>
          <declname>db</declname>
        </param>
        <param>
          <type><ref refid="structtrackdata" kindref="compound">trackdata</ref> &amp;</type>
          <declname>td</declname>
        </param>
        <param>
          <type>const unsigned int</type>
          <declname>frameBufferSize</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>hasManual</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>audio handler constructor. specified for pre-render mode. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>db</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classlitedb" kindref="compound">litedb(Root database)</ref> object </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>td</parametername>
</parameternamelist>
<parameterdescription>
<para>track_data </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>frameBufferSize</parametername>
</parameternamelist>
<parameterdescription>
<para>the buffer size. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hasManual</parametername>
</parameternamelist>
<parameterdescription>
<para>enable manual features. if don&apos;t, you can&apos;t use FX controller, Music controller. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MainObjects/audioPlayer/audioPlayer.hpp" line="103" column="5" bodyfile="include/MainObjects/audioPlayer/audioPlayer.cpp" bodystart="49" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="classaudio_player_1a0e1432cd3d066e05d52116f9bdd8df22" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>audioPlayer::audioPlayer</definition>
        <argsstring>(const unsigned int frameBufferSize)</argsstring>
        <name>audioPlayer</name>
        <qualifiedname>audioPlayer::audioPlayer</qualifiedname>
        <param>
          <type>const unsigned int</type>
          <declname>frameBufferSize</declname>
        </param>
        <briefdescription>
<para>audio handler constructor. specified for manual render mode. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>frameBufferSize</parametername>
</parameternamelist>
<parameterdescription>
<para>the buffer size. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MainObjects/audioPlayer/audioPlayer.hpp" line="112" column="5" bodyfile="include/MainObjects/audioPlayer/audioPlayer.cpp" bodystart="78" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="classaudio_player_1aa04a5f49cbe437425f93d78b985d3d9a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_p_d_j_e___c_o_r_e___d_a_t_a___l_i_n_e" kindref="compound">PDJE_CORE_DATA_LINE</ref></type>
        <definition>PDJE_CORE_DATA_LINE audioPlayer::PullOutDataLine</definition>
        <argsstring>()</argsstring>
        <name>PullOutDataLine</name>
        <qualifiedname>audioPlayer::PullOutDataLine</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MainObjects/audioPlayer/audioPlayer.hpp" line="115" column="5" bodyfile="include/MainObjects/audioPlayer/audioPlayer.cpp" bodystart="162" bodyend="178"/>
      </memberdef>
      <memberdef kind="function" id="classaudio_player_1afb33af34b0a934cacbd96b61b5c1731b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>audioPlayer::~audioPlayer</definition>
        <argsstring>()</argsstring>
        <name>~audioPlayer</name>
        <qualifiedname>audioPlayer::~audioPlayer</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MainObjects/audioPlayer/audioPlayer.hpp" line="117" column="5" bodyfile="include/MainObjects/audioPlayer/audioPlayer.cpp" bodystart="112" bodyend="116"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>The music handler class this is the music handler class. you can play/stop music, controlling fx, attach other music in realtime manually or getting music&apos;s playing position and consumed frames. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="4">
        <label>audioEngineDataStruct</label>
        <link refid="structaudio_engine_data_struct"/>
        <childnode refid="3" relation="usage">
          <edgelabel>pcmDataPoint</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>audioPlayer</label>
        <link refid="classaudio_player"/>
        <childnode refid="2" relation="usage">
          <edgelabel>renderer</edgelabel>
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>LFaust</edgelabel>
          <edgelabel>RFaust</edgelabel>
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>engineDatas</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>STATUS</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>audioRender</label>
        <link refid="classaudio_render"/>
      </node>
      <node id="6">
        <label>std::basic_string&lt; Char &gt;</label>
      </node>
      <node id="5">
        <label>std::string</label>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>std::vector&lt; float &gt;</label>
      </node>
    </collaborationgraph>
    <location file="include/MainObjects/audioPlayer/audioPlayer.hpp" line="16" column="1" bodyfile="include/MainObjects/audioPlayer/audioPlayer.hpp" bodystart="16" bodyend="118"/>
    <listofallmembers>
      <member refid="classaudio_player_1a7e91ca8d0037ef8e2fb50ff7289317aa" prot="public" virt="non-virtual"><scope>audioPlayer</scope><name>Activate</name></member>
      <member refid="classaudio_player_1a3bf1fd80625892dd716c4fdd0f759f06" prot="public" virt="non-virtual"><scope>audioPlayer</scope><name>audioPlayer</name></member>
      <member refid="classaudio_player_1a0e1432cd3d066e05d52116f9bdd8df22" prot="public" virt="non-virtual"><scope>audioPlayer</scope><name>audioPlayer</name></member>
      <member refid="classaudio_player_1abb3ef085a5c3f162cefe7941765498b9" prot="public" virt="non-virtual"><scope>audioPlayer</scope><name>ChangeCursorPos</name></member>
      <member refid="classaudio_player_1a56b78523fa4fd9c9874eaa6f3b0abe19" prot="private" virt="non-virtual"><scope>audioPlayer</scope><name>ContextInit</name></member>
      <member refid="classaudio_player_1afa11eecb5a47d618a5300ac3732e6098" prot="private" virt="non-virtual"><scope>audioPlayer</scope><name>ctxt</name></member>
      <member refid="classaudio_player_1a8b3239801762770164c7eba623301c3c" prot="public" virt="non-virtual"><scope>audioPlayer</scope><name>Deactivate</name></member>
      <member refid="classaudio_player_1ac1159f3e4d2a76760e8de644e1a9ccdc" prot="private" virt="non-virtual"><scope>audioPlayer</scope><name>DefaultInit</name></member>
      <member refid="classaudio_player_1ab6a3351cfab757ad5bd1cce5f4352caa" prot="private" virt="non-virtual"><scope>audioPlayer</scope><name>engineDatas</name></member>
      <member refid="classaudio_player_1ae34c11d79c9572daa47b6f9a77649cba" prot="public" virt="non-virtual"><scope>audioPlayer</scope><name>GetConsumedFrames</name></member>
      <member refid="classaudio_player_1a00c00b5c8146cd7af90abc6c1014ee26" prot="public" virt="non-virtual"><scope>audioPlayer</scope><name>GetFXControlPannel</name></member>
      <member refid="classaudio_player_1a373d7c2bf9c5f5a30f01c5d628d52d53" prot="public" virt="non-virtual"><scope>audioPlayer</scope><name>GetMusicControlPannel</name></member>
      <member refid="classaudio_player_1ae15f5f974b0ee629d267e16e8db1c8ea" prot="public" virt="non-virtual"><scope>audioPlayer</scope><name>GetStatus</name></member>
      <member refid="classaudio_player_1a0f5732085e4fd82d55f373d3b1e069f8" prot="private" virt="non-virtual"><scope>audioPlayer</scope><name>LFaust</name></member>
      <member refid="classaudio_player_1a5c48f2c80e199026c7608f7b2ec65e39" prot="private" virt="non-virtual"><scope>audioPlayer</scope><name>player</name></member>
      <member refid="classaudio_player_1aa04a5f49cbe437425f93d78b985d3d9a" prot="public" virt="non-virtual"><scope>audioPlayer</scope><name>PullOutDataLine</name></member>
      <member refid="classaudio_player_1a7542853f2c8a2cc69b77c39d9f5793f9" prot="private" virt="non-virtual"><scope>audioPlayer</scope><name>renderer</name></member>
      <member refid="classaudio_player_1ac4d1b88a10a31ab8c0b6d5f17d76e25f" prot="private" virt="non-virtual"><scope>audioPlayer</scope><name>RFaust</name></member>
      <member refid="classaudio_player_1a167f44a37a6848814cc670d60f750ebb" prot="public" virt="non-virtual"><scope>audioPlayer</scope><name>STATUS</name></member>
      <member refid="classaudio_player_1afb33af34b0a934cacbd96b61b5c1731b" prot="public" virt="non-virtual"><scope>audioPlayer</scope><name>~audioPlayer</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
