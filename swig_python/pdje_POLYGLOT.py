# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _pdje_python
else:
    import _pdje_python

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pdje_python.delete_SwigPyIterator

    def value(self):
        return _pdje_python.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _pdje_python.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _pdje_python.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _pdje_python.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _pdje_python.SwigPyIterator_equal(self, x)

    def copy(self):
        return _pdje_python.SwigPyIterator_copy(self)

    def next(self):
        return _pdje_python.SwigPyIterator_next(self)

    def __next__(self):
        return _pdje_python.SwigPyIterator___next__(self)

    def previous(self):
        return _pdje_python.SwigPyIterator_previous(self)

    def advance(self, n):
        return _pdje_python.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _pdje_python.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _pdje_python.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _pdje_python.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _pdje_python.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _pdje_python.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _pdje_python.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _pdje_python:
_pdje_python.SwigPyIterator_swigregister(SwigPyIterator)
SHARED_PTR_DISOWN = _pdje_python.SHARED_PTR_DISOWN
COMPRESSOR = _pdje_python.COMPRESSOR
DISTORTION = _pdje_python.DISTORTION
ECHO = _pdje_python.ECHO
EQ = _pdje_python.EQ
FILTER = _pdje_python.FILTER
FLANGER = _pdje_python.FLANGER
OCSFILTER = _pdje_python.OCSFILTER
PANNER = _pdje_python.PANNER
PHASER = _pdje_python.PHASER
ROBOT = _pdje_python.ROBOT
ROLL = _pdje_python.ROLL
TRANCE = _pdje_python.TRANCE
VOL = _pdje_python.VOL
class FXControlPannel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, sampleRate):
        _pdje_python.FXControlPannel_swiginit(self, _pdje_python.new_FXControlPannel(sampleRate))

    def GetArgSetter(self, fx):
        return _pdje_python.FXControlPannel_GetArgSetter(self, fx)

    def FX_ON_OFF(self, fx, onoff):
        return _pdje_python.FXControlPannel_FX_ON_OFF(self, fx, onoff)

    def addFX(self, pcm, samples):
        return _pdje_python.FXControlPannel_addFX(self, pcm, samples)

    def checkSomethingOn(self):
        return _pdje_python.FXControlPannel_checkSomethingOn(self)
    __swig_destroy__ = _pdje_python.delete_FXControlPannel

# Register FXControlPannel in _pdje_python:
_pdje_python.FXControlPannel_swigregister(FXControlPannel)

def toFaustStylePCM(faustPCM, _in, frameCount):
    return _pdje_python.toFaustStylePCM(faustPCM, _in, frameCount)

def toLRStylePCM(faustPCM, out, frameCount):
    return _pdje_python.toLRStylePCM(faustPCM, out, frameCount)
FULL_PRE_RENDER = _pdje_python.FULL_PRE_RENDER
HYBRID_RENDER = _pdje_python.HYBRID_RENDER
FULL_MANUAL_RENDER = _pdje_python.FULL_MANUAL_RENDER
class PDJE(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    DBROOT = property(_pdje_python.PDJE_DBROOT_get, _pdje_python.PDJE_DBROOT_set)

    def __init__(self, rootDir):
        _pdje_python.PDJE_swiginit(self, _pdje_python.new_PDJE(rootDir))
    __swig_destroy__ = _pdje_python.delete_PDJE
    player = property(_pdje_python.PDJE_player_get, _pdje_python.PDJE_player_set)
    editor = property(_pdje_python.PDJE_editor_get, _pdje_python.PDJE_editor_set)

    def InitPlayer(self, mode, td, FrameBufferSize):
        return _pdje_python.PDJE_InitPlayer(self, mode, td, FrameBufferSize)

    def ResetPlayer(self):
        return _pdje_python.PDJE_ResetPlayer(self)

    def CloseEditor(self):
        return _pdje_python.PDJE_CloseEditor(self)

    def PullOutDataLine(self):
        return _pdje_python.PDJE_PullOutDataLine(self)

    def InitEditor(self, auth_name, auth_email, projectRoot):
        return _pdje_python.PDJE_InitEditor(self, auth_name, auth_email, projectRoot)

    def GetNoteObjects(self, td, ObjectSetCallback):
        return _pdje_python.PDJE_GetNoteObjects(self, td, ObjectSetCallback)

    def SearchMusic(self, Title, composer, bpm=-1):
        return _pdje_python.PDJE_SearchMusic(self, Title, composer, bpm)

    def SearchTrack(self, Title):
        return _pdje_python.PDJE_SearchTrack(self, Title)

    def GetPlayerObject(self):
        return _pdje_python.PDJE_GetPlayerObject(self)

    def GetEditorObject(self):
        return _pdje_python.PDJE_GetEditorObject(self)

# Register PDJE in _pdje_python:
_pdje_python.PDJE_swigregister(PDJE)
class ARGSETTER_WRAPPER(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, pointer):
        _pdje_python.ARGSETTER_WRAPPER_swiginit(self, _pdje_python.new_ARGSETTER_WRAPPER(pointer))
    __swig_destroy__ = _pdje_python.delete_ARGSETTER_WRAPPER

    def GetFXArgKeys(self, fx):
        return _pdje_python.ARGSETTER_WRAPPER_GetFXArgKeys(self, fx)

    def SetFXArg(self, fx, key, arg):
        return _pdje_python.ARGSETTER_WRAPPER_SetFXArg(self, fx, key, arg)

# Register ARGSETTER_WRAPPER in _pdje_python:
_pdje_python.ARGSETTER_WRAPPER_swigregister(ARGSETTER_WRAPPER)
class litedb(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def KVGet(self, K, V):
        return _pdje_python.litedb_KVGet(self, K, V)

    def KVPut(self, K, V):
        return _pdje_python.litedb_KVPut(self, K, V)

    def openDB(self, dbPath):
        return _pdje_python.litedb_openDB(self, dbPath)

    def getRoot(self):
        return _pdje_python.litedb_getRoot(self)

    def __init__(self):
        _pdje_python.litedb_swiginit(self, _pdje_python.new_litedb())
    __swig_destroy__ = _pdje_python.delete_litedb

# Register litedb in _pdje_python:
_pdje_python.litedb_swigregister(litedb)
class musdata(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    title = property(_pdje_python.musdata_title_get, _pdje_python.musdata_title_set)
    composer = property(_pdje_python.musdata_composer_get, _pdje_python.musdata_composer_set)
    musicPath = property(_pdje_python.musdata_musicPath_get, _pdje_python.musdata_musicPath_set)
    bpmBinary = property(_pdje_python.musdata_bpmBinary_get, _pdje_python.musdata_bpmBinary_set)
    bpm = property(_pdje_python.musdata_bpm_get, _pdje_python.musdata_bpm_set)
    firstBeat = property(_pdje_python.musdata_firstBeat_get, _pdje_python.musdata_firstBeat_set)

    def __init__(self, *args):
        _pdje_python.musdata_swiginit(self, _pdje_python.new_musdata(*args))

    def GenSearchSTMT(self, dbstate, db):
        return _pdje_python.musdata_GenSearchSTMT(self, dbstate, db)

    def GenInsertSTMT(self, dbstate, db):
        return _pdje_python.musdata_GenInsertSTMT(self, dbstate, db)

    def GenEditSTMT(self, dbstate, db, toEdit):
        return _pdje_python.musdata_GenEditSTMT(self, dbstate, db, toEdit)

    def GenDeleteSTMT(self, dbstate, db):
        return _pdje_python.musdata_GenDeleteSTMT(self, dbstate, db)
    __swig_destroy__ = _pdje_python.delete_musdata

# Register musdata in _pdje_python:
_pdje_python.musdata_swigregister(musdata)
class trackdata(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    trackTitle = property(_pdje_python.trackdata_trackTitle_get, _pdje_python.trackdata_trackTitle_set)
    mixBinary = property(_pdje_python.trackdata_mixBinary_get, _pdje_python.trackdata_mixBinary_set)
    noteBinary = property(_pdje_python.trackdata_noteBinary_get, _pdje_python.trackdata_noteBinary_set)
    cachedMixList = property(_pdje_python.trackdata_cachedMixList_get, _pdje_python.trackdata_cachedMixList_set)

    def __init__(self, *args):
        _pdje_python.trackdata_swiginit(self, _pdje_python.new_trackdata(*args))

    def GenSearchSTMT(self, dbstate, db):
        return _pdje_python.trackdata_GenSearchSTMT(self, dbstate, db)

    def GenInsertSTMT(self, dbstate, db):
        return _pdje_python.trackdata_GenInsertSTMT(self, dbstate, db)

    def GenEditSTMT(self, dbstate, db, toEdit):
        return _pdje_python.trackdata_GenEditSTMT(self, dbstate, db, toEdit)

    def GenDeleteSTMT(self, dbstate, db):
        return _pdje_python.trackdata_GenDeleteSTMT(self, dbstate, db)
    __swig_destroy__ = _pdje_python.delete_trackdata

# Register trackdata in _pdje_python:
_pdje_python.trackdata_swigregister(trackdata)
class audioPlayer(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    STATUS = property(_pdje_python.audioPlayer_STATUS_get, _pdje_python.audioPlayer_STATUS_set)

    def GetStatus(self):
        return _pdje_python.audioPlayer_GetStatus(self)

    def Activate(self):
        return _pdje_python.audioPlayer_Activate(self)

    def Deactivate(self):
        return _pdje_python.audioPlayer_Deactivate(self)

    def ChangeCursorPos(self, pos):
        return _pdje_python.audioPlayer_ChangeCursorPos(self, pos)

    def GetConsumedFrames(self):
        return _pdje_python.audioPlayer_GetConsumedFrames(self)

    def GetFXControlPannel(self, *args):
        return _pdje_python.audioPlayer_GetFXControlPannel(self, *args)

    def GetMusicControlPannel(self):
        return _pdje_python.audioPlayer_GetMusicControlPannel(self)

    def __init__(self, *args):
        _pdje_python.audioPlayer_swiginit(self, _pdje_python.new_audioPlayer(*args))

    def PullOutDataLine(self):
        return _pdje_python.audioPlayer_PullOutDataLine(self)
    __swig_destroy__ = _pdje_python.delete_audioPlayer

# Register audioPlayer in _pdje_python:
_pdje_python.audioPlayer_swigregister(audioPlayer)
class PDJE_Name_Sanitizer(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def sanitizeFileName(fileName):
        return _pdje_python.PDJE_Name_Sanitizer_sanitizeFileName(fileName)

    @staticmethod
    def getFileName(sanitized):
        return _pdje_python.PDJE_Name_Sanitizer_getFileName(sanitized)

# Register PDJE_Name_Sanitizer in _pdje_python:
_pdje_python.PDJE_Name_Sanitizer_swigregister(PDJE_Name_Sanitizer)
class MusicOnDeck(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    play = property(_pdje_python.MusicOnDeck_play_get, _pdje_python.MusicOnDeck_play_set)
    dec = property(_pdje_python.MusicOnDeck_dec_get, _pdje_python.MusicOnDeck_dec_set)
    fxP = property(_pdje_python.MusicOnDeck_fxP_get, _pdje_python.MusicOnDeck_fxP_set)
    st = property(_pdje_python.MusicOnDeck_st_get, _pdje_python.MusicOnDeck_st_set)

    def __init__(self):
        _pdje_python.MusicOnDeck_swiginit(self, _pdje_python.new_MusicOnDeck())
    __swig_destroy__ = _pdje_python.delete_MusicOnDeck

# Register MusicOnDeck in _pdje_python:
_pdje_python.MusicOnDeck_swigregister(MusicOnDeck)
class MusicControlPannel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def LoadMusic(self, ROOTDB, Mus):
        return _pdje_python.MusicControlPannel_LoadMusic(self, ROOTDB, Mus)

    def CueMusic(self, title, newPos):
        return _pdje_python.MusicControlPannel_CueMusic(self, title, newPos)

    def SetMusic(self, title, onOff):
        return _pdje_python.MusicControlPannel_SetMusic(self, title, onOff)

    def GetLoadedMusicList(self):
        return _pdje_python.MusicControlPannel_GetLoadedMusicList(self)

    def UnloadMusic(self, title):
        return _pdje_python.MusicControlPannel_UnloadMusic(self, title)

    def GetPCMFrames(self, array, FrameSize):
        return _pdje_python.MusicControlPannel_GetPCMFrames(self, array, FrameSize)

    def getFXHandle(self, title):
        return _pdje_python.MusicControlPannel_getFXHandle(self, title)

    def ChangeBpm(self, title, targetBpm, originBpm):
        return _pdje_python.MusicControlPannel_ChangeBpm(self, title, targetBpm, originBpm)

    def __init__(self, FrameSize):
        _pdje_python.MusicControlPannel_swiginit(self, _pdje_python.new_MusicControlPannel(FrameSize))
    __swig_destroy__ = _pdje_python.delete_MusicControlPannel

# Register MusicControlPannel in _pdje_python:
_pdje_python.MusicControlPannel_swigregister(MusicControlPannel)
class EDIT_ARG_MUSIC(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    musicName = property(_pdje_python.EDIT_ARG_MUSIC_musicName_get, _pdje_python.EDIT_ARG_MUSIC_musicName_set)
    arg = property(_pdje_python.EDIT_ARG_MUSIC_arg_get, _pdje_python.EDIT_ARG_MUSIC_arg_set)

    def __init__(self):
        _pdje_python.EDIT_ARG_MUSIC_swiginit(self, _pdje_python.new_EDIT_ARG_MUSIC())
    __swig_destroy__ = _pdje_python.delete_EDIT_ARG_MUSIC

# Register EDIT_ARG_MUSIC in _pdje_python:
_pdje_python.EDIT_ARG_MUSIC_swigregister(EDIT_ARG_MUSIC)
class editorObject(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getMixRepo(self):
        return _pdje_python.editorObject_getMixRepo(self)

    def getMusicRepo(self, Title):
        return _pdje_python.editorObject_getMusicRepo(self, Title)

    def getNoteRepo(self):
        return _pdje_python.editorObject_getNoteRepo(self)

    def getKVRepo(self):
        return _pdje_python.editorObject_getKVRepo(self)

    def AddLine(self, musicName, firstBeat):
        return _pdje_python.editorObject_AddLine(self, musicName, firstBeat)

    def deleteLine(self, obj, skipType, skipDetail):
        return _pdje_python.editorObject_deleteLine(self, obj, skipType, skipDetail)

    def render(self, trackTitle, ROOTDB):
        return _pdje_python.editorObject_render(self, trackTitle, ROOTDB)

    def demoPlayInit(self, player, frameBufferSize, trackTitle):
        return _pdje_python.editorObject_demoPlayInit(self, player, frameBufferSize, trackTitle)

    def pushToRootDB(self, *args):
        return _pdje_python.editorObject_pushToRootDB(self, *args)

    def DESTROY_PROJECT(self):
        return _pdje_python.editorObject_DESTROY_PROJECT(self)

    def ConfigNewMusic(self, *args):
        return _pdje_python.editorObject_ConfigNewMusic(self, *args)

    def Open(self, projectPath):
        return _pdje_python.editorObject_Open(self, projectPath)

    def __init__(self, auth_name, auth_email):
        _pdje_python.editorObject_swiginit(self, _pdje_python.new_editorObject(auth_name, auth_email))
    __swig_destroy__ = _pdje_python.delete_editorObject

    def AddLineNote(self, obj):
        return _pdje_python.editorObject_AddLineNote(self, obj)

    def AddLineMix(self, obj):
        return _pdje_python.editorObject_AddLineMix(self, obj)

    def AddLineKV(self, obj):
        return _pdje_python.editorObject_AddLineKV(self, obj)

    def AddLineMusic(self, obj):
        return _pdje_python.editorObject_AddLineMusic(self, obj)

    def DeleteLineNote(self, obj):
        return _pdje_python.editorObject_DeleteLineNote(self, obj)

    def DeleteLineKV(self, obj):
        return _pdje_python.editorObject_DeleteLineKV(self, obj)

    def DeleteLineMusic(self, obj):
        return _pdje_python.editorObject_DeleteLineMusic(self, obj)

    def GetAllNotes(self, v):
        return _pdje_python.editorObject_GetAllNotes(self, v)

    def GetAllMixes(self, v):
        return _pdje_python.editorObject_GetAllMixes(self, v)

    def GetAllKeyValues(self, v):
        return _pdje_python.editorObject_GetAllKeyValues(self, v)

    def GetAllMusics(self, v):
        return _pdje_python.editorObject_GetAllMusics(self, v)

    def UndoNote(self):
        return _pdje_python.editorObject_UndoNote(self)

    def UndoMix(self):
        return _pdje_python.editorObject_UndoMix(self)

    def UndoKV(self):
        return _pdje_python.editorObject_UndoKV(self)

    def UndoMusic(self, musicName):
        return _pdje_python.editorObject_UndoMusic(self, musicName)

    def RedoNote(self):
        return _pdje_python.editorObject_RedoNote(self)

    def RedoMix(self):
        return _pdje_python.editorObject_RedoMix(self)

    def RedoKV(self):
        return _pdje_python.editorObject_RedoKV(self)

    def RedoMusic(self, musicName):
        return _pdje_python.editorObject_RedoMusic(self, musicName)

    def GoNote(self, branchName, commitID):
        return _pdje_python.editorObject_GoNote(self, branchName, commitID)

    def GoMix(self, branchName, commitID):
        return _pdje_python.editorObject_GoMix(self, branchName, commitID)

    def GoKV(self, branchName, commitID):
        return _pdje_python.editorObject_GoKV(self, branchName, commitID)

    def GoMusic(self, branchName, commitID):
        return _pdje_python.editorObject_GoMusic(self, branchName, commitID)

    def GetLogNoteJSON(self):
        return _pdje_python.editorObject_GetLogNoteJSON(self)

    def GetLogMixJSON(self):
        return _pdje_python.editorObject_GetLogMixJSON(self)

    def GetLogKVJSON(self):
        return _pdje_python.editorObject_GetLogKVJSON(self)

    def GetLogMusicJSON(self, musicName):
        return _pdje_python.editorObject_GetLogMusicJSON(self, musicName)

    def GetDiffNote(self, oldC, newC):
        return _pdje_python.editorObject_GetDiffNote(self, oldC, newC)

    def GetDiffMix(self, oldC, newC):
        return _pdje_python.editorObject_GetDiffMix(self, oldC, newC)

    def GetDiffKV(self, oldC, newC):
        return _pdje_python.editorObject_GetDiffKV(self, oldC, newC)

    def GetDiffMusic(self, oldC, newC):
        return _pdje_python.editorObject_GetDiffMusic(self, oldC, newC)

    def UpdateLogNote(self):
        return _pdje_python.editorObject_UpdateLogNote(self)

    def UpdateLogMix(self):
        return _pdje_python.editorObject_UpdateLogMix(self)

    def UpdateLogKV(self):
        return _pdje_python.editorObject_UpdateLogKV(self)

    def UpdateLogMusic(self):
        return _pdje_python.editorObject_UpdateLogMusic(self)

    def UpdateLogNoteOn(self, branchName):
        return _pdje_python.editorObject_UpdateLogNoteOn(self, branchName)

    def UpdateLogMixOn(self, branchName):
        return _pdje_python.editorObject_UpdateLogMixOn(self, branchName)

    def UpdateLogKVOn(self, branchName):
        return _pdje_python.editorObject_UpdateLogKVOn(self, branchName)

    def UpdateLogMusicOn(self, musicName):
        return _pdje_python.editorObject_UpdateLogMusicOn(self, musicName)

# Register editorObject in _pdje_python:
_pdje_python.editorObject_swigregister(editorObject)
class commit(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    commitPointer = property(_pdje_python.commit_commitPointer_get, _pdje_python.commit_commitPointer_set)
    commitID = property(_pdje_python.commit_commitID_get, _pdje_python.commit_commitID_set)
    msg = property(_pdje_python.commit_msg_get, _pdje_python.commit_msg_set)

    def __init__(self, *args):
        _pdje_python.commit_swiginit(self, _pdje_python.new_commit(*args))
    __swig_destroy__ = _pdje_python.delete_commit

# Register commit in _pdje_python:
_pdje_python.commit_swigregister(commit)
class commitList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    clist = property(_pdje_python.commitList_clist_get, _pdje_python.commitList_clist_set)

    def Reset(self):
        return _pdje_python.commitList_Reset(self)

    def UpdateCommits(self, repo):
        return _pdje_python.commitList_UpdateCommits(self, repo)

    def OkToAdd(self, id):
        return _pdje_python.commitList_OkToAdd(self, id)

    def __init__(self):
        _pdje_python.commitList_swiginit(self, _pdje_python.new_commitList())
    __swig_destroy__ = _pdje_python.delete_commitList

# Register commitList in _pdje_python:
_pdje_python.commitList_swigregister(commitList)
class STRING_PAIR(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pdje_python.STRING_PAIR_swiginit(self, _pdje_python.new_STRING_PAIR(*args))
    first = property(_pdje_python.STRING_PAIR_first_get, _pdje_python.STRING_PAIR_first_set)
    second = property(_pdje_python.STRING_PAIR_second_get, _pdje_python.STRING_PAIR_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _pdje_python.delete_STRING_PAIR

# Register STRING_PAIR in _pdje_python:
_pdje_python.STRING_PAIR_swigregister(STRING_PAIR)
class EDIT_ARG_MIX(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    type = property(_pdje_python.EDIT_ARG_MIX_type_get, _pdje_python.EDIT_ARG_MIX_type_set)
    details = property(_pdje_python.EDIT_ARG_MIX_details_get, _pdje_python.EDIT_ARG_MIX_details_set)
    ID = property(_pdje_python.EDIT_ARG_MIX_ID_get, _pdje_python.EDIT_ARG_MIX_ID_set)
    first = property(_pdje_python.EDIT_ARG_MIX_first_get, _pdje_python.EDIT_ARG_MIX_first_set)
    second = property(_pdje_python.EDIT_ARG_MIX_second_get, _pdje_python.EDIT_ARG_MIX_second_set)
    third = property(_pdje_python.EDIT_ARG_MIX_third_get, _pdje_python.EDIT_ARG_MIX_third_set)
    beat = property(_pdje_python.EDIT_ARG_MIX_beat_get, _pdje_python.EDIT_ARG_MIX_beat_set)
    subBeat = property(_pdje_python.EDIT_ARG_MIX_subBeat_get, _pdje_python.EDIT_ARG_MIX_subBeat_set)
    separate = property(_pdje_python.EDIT_ARG_MIX_separate_get, _pdje_python.EDIT_ARG_MIX_separate_set)
    Ebeat = property(_pdje_python.EDIT_ARG_MIX_Ebeat_get, _pdje_python.EDIT_ARG_MIX_Ebeat_set)
    EsubBeat = property(_pdje_python.EDIT_ARG_MIX_EsubBeat_get, _pdje_python.EDIT_ARG_MIX_EsubBeat_set)
    Eseparate = property(_pdje_python.EDIT_ARG_MIX_Eseparate_get, _pdje_python.EDIT_ARG_MIX_Eseparate_set)

    def __init__(self):
        _pdje_python.EDIT_ARG_MIX_swiginit(self, _pdje_python.new_EDIT_ARG_MIX())
    __swig_destroy__ = _pdje_python.delete_EDIT_ARG_MIX

# Register EDIT_ARG_MIX in _pdje_python:
_pdje_python.EDIT_ARG_MIX_swigregister(EDIT_ARG_MIX)
class EDIT_ARG_NOTE(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Note_Type = property(_pdje_python.EDIT_ARG_NOTE_Note_Type_get, _pdje_python.EDIT_ARG_NOTE_Note_Type_set)
    Note_Detail = property(_pdje_python.EDIT_ARG_NOTE_Note_Detail_get, _pdje_python.EDIT_ARG_NOTE_Note_Detail_set)
    first = property(_pdje_python.EDIT_ARG_NOTE_first_get, _pdje_python.EDIT_ARG_NOTE_first_set)
    second = property(_pdje_python.EDIT_ARG_NOTE_second_get, _pdje_python.EDIT_ARG_NOTE_second_set)
    third = property(_pdje_python.EDIT_ARG_NOTE_third_get, _pdje_python.EDIT_ARG_NOTE_third_set)
    beat = property(_pdje_python.EDIT_ARG_NOTE_beat_get, _pdje_python.EDIT_ARG_NOTE_beat_set)
    subBeat = property(_pdje_python.EDIT_ARG_NOTE_subBeat_get, _pdje_python.EDIT_ARG_NOTE_subBeat_set)
    separate = property(_pdje_python.EDIT_ARG_NOTE_separate_get, _pdje_python.EDIT_ARG_NOTE_separate_set)
    Ebeat = property(_pdje_python.EDIT_ARG_NOTE_Ebeat_get, _pdje_python.EDIT_ARG_NOTE_Ebeat_set)
    EsubBeat = property(_pdje_python.EDIT_ARG_NOTE_EsubBeat_get, _pdje_python.EDIT_ARG_NOTE_EsubBeat_set)
    Eseparate = property(_pdje_python.EDIT_ARG_NOTE_Eseparate_get, _pdje_python.EDIT_ARG_NOTE_Eseparate_set)

    def __init__(self):
        _pdje_python.EDIT_ARG_NOTE_swiginit(self, _pdje_python.new_EDIT_ARG_NOTE())
    __swig_destroy__ = _pdje_python.delete_EDIT_ARG_NOTE

# Register EDIT_ARG_NOTE in _pdje_python:
_pdje_python.EDIT_ARG_NOTE_swigregister(EDIT_ARG_NOTE)
class MusicArgs(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    bpm = property(_pdje_python.MusicArgs_bpm_get, _pdje_python.MusicArgs_bpm_set)
    beat = property(_pdje_python.MusicArgs_beat_get, _pdje_python.MusicArgs_beat_set)
    subBeat = property(_pdje_python.MusicArgs_subBeat_get, _pdje_python.MusicArgs_subBeat_set)
    separate = property(_pdje_python.MusicArgs_separate_get, _pdje_python.MusicArgs_separate_set)

    def __init__(self):
        _pdje_python.MusicArgs_swiginit(self, _pdje_python.new_MusicArgs())
    __swig_destroy__ = _pdje_python.delete_MusicArgs

# Register MusicArgs in _pdje_python:
_pdje_python.MusicArgs_swigregister(MusicArgs)
class NoteVisitor(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pdje_python.delete_NoteVisitor

    def on_item(self, o):
        return _pdje_python.NoteVisitor_on_item(self, o)

# Register NoteVisitor in _pdje_python:
_pdje_python.NoteVisitor_swigregister(NoteVisitor)
class MixVisitor(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pdje_python.delete_MixVisitor

    def on_item(self, o):
        return _pdje_python.MixVisitor_on_item(self, o)

# Register MixVisitor in _pdje_python:
_pdje_python.MixVisitor_swigregister(MixVisitor)
class KVVisitor(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pdje_python.delete_KVVisitor

    def on_item(self, o):
        return _pdje_python.KVVisitor_on_item(self, o)

# Register KVVisitor in _pdje_python:
_pdje_python.KVVisitor_swigregister(KVVisitor)
class MusicVisitor(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pdje_python.delete_MusicVisitor

    def on_item(self, o):
        return _pdje_python.MusicVisitor_on_item(self, o)

# Register MusicVisitor in _pdje_python:
_pdje_python.MusicVisitor_swigregister(MusicVisitor)
class MUS_VEC(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _pdje_python.MUS_VEC_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pdje_python.MUS_VEC___nonzero__(self)

    def __bool__(self):
        return _pdje_python.MUS_VEC___bool__(self)

    def __len__(self):
        return _pdje_python.MUS_VEC___len__(self)

    def __getslice__(self, i, j):
        return _pdje_python.MUS_VEC___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pdje_python.MUS_VEC___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pdje_python.MUS_VEC___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pdje_python.MUS_VEC___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pdje_python.MUS_VEC___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pdje_python.MUS_VEC___setitem__(self, *args)

    def pop(self):
        return _pdje_python.MUS_VEC_pop(self)

    def append(self, x):
        return _pdje_python.MUS_VEC_append(self, x)

    def empty(self):
        return _pdje_python.MUS_VEC_empty(self)

    def size(self):
        return _pdje_python.MUS_VEC_size(self)

    def swap(self, v):
        return _pdje_python.MUS_VEC_swap(self, v)

    def begin(self):
        return _pdje_python.MUS_VEC_begin(self)

    def end(self):
        return _pdje_python.MUS_VEC_end(self)

    def rbegin(self):
        return _pdje_python.MUS_VEC_rbegin(self)

    def rend(self):
        return _pdje_python.MUS_VEC_rend(self)

    def clear(self):
        return _pdje_python.MUS_VEC_clear(self)

    def get_allocator(self):
        return _pdje_python.MUS_VEC_get_allocator(self)

    def pop_back(self):
        return _pdje_python.MUS_VEC_pop_back(self)

    def erase(self, *args):
        return _pdje_python.MUS_VEC_erase(self, *args)

    def __init__(self, *args):
        _pdje_python.MUS_VEC_swiginit(self, _pdje_python.new_MUS_VEC(*args))

    def push_back(self, x):
        return _pdje_python.MUS_VEC_push_back(self, x)

    def front(self):
        return _pdje_python.MUS_VEC_front(self)

    def back(self):
        return _pdje_python.MUS_VEC_back(self)

    def assign(self, n, x):
        return _pdje_python.MUS_VEC_assign(self, n, x)

    def resize(self, *args):
        return _pdje_python.MUS_VEC_resize(self, *args)

    def insert(self, *args):
        return _pdje_python.MUS_VEC_insert(self, *args)

    def reserve(self, n):
        return _pdje_python.MUS_VEC_reserve(self, n)

    def capacity(self):
        return _pdje_python.MUS_VEC_capacity(self)
    __swig_destroy__ = _pdje_python.delete_MUS_VEC

# Register MUS_VEC in _pdje_python:
_pdje_python.MUS_VEC_swigregister(MUS_VEC)
class TRACK_VEC(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _pdje_python.TRACK_VEC_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pdje_python.TRACK_VEC___nonzero__(self)

    def __bool__(self):
        return _pdje_python.TRACK_VEC___bool__(self)

    def __len__(self):
        return _pdje_python.TRACK_VEC___len__(self)

    def __getslice__(self, i, j):
        return _pdje_python.TRACK_VEC___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pdje_python.TRACK_VEC___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pdje_python.TRACK_VEC___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pdje_python.TRACK_VEC___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pdje_python.TRACK_VEC___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pdje_python.TRACK_VEC___setitem__(self, *args)

    def pop(self):
        return _pdje_python.TRACK_VEC_pop(self)

    def append(self, x):
        return _pdje_python.TRACK_VEC_append(self, x)

    def empty(self):
        return _pdje_python.TRACK_VEC_empty(self)

    def size(self):
        return _pdje_python.TRACK_VEC_size(self)

    def swap(self, v):
        return _pdje_python.TRACK_VEC_swap(self, v)

    def begin(self):
        return _pdje_python.TRACK_VEC_begin(self)

    def end(self):
        return _pdje_python.TRACK_VEC_end(self)

    def rbegin(self):
        return _pdje_python.TRACK_VEC_rbegin(self)

    def rend(self):
        return _pdje_python.TRACK_VEC_rend(self)

    def clear(self):
        return _pdje_python.TRACK_VEC_clear(self)

    def get_allocator(self):
        return _pdje_python.TRACK_VEC_get_allocator(self)

    def pop_back(self):
        return _pdje_python.TRACK_VEC_pop_back(self)

    def erase(self, *args):
        return _pdje_python.TRACK_VEC_erase(self, *args)

    def __init__(self, *args):
        _pdje_python.TRACK_VEC_swiginit(self, _pdje_python.new_TRACK_VEC(*args))

    def push_back(self, x):
        return _pdje_python.TRACK_VEC_push_back(self, x)

    def front(self):
        return _pdje_python.TRACK_VEC_front(self)

    def back(self):
        return _pdje_python.TRACK_VEC_back(self)

    def assign(self, n, x):
        return _pdje_python.TRACK_VEC_assign(self, n, x)

    def resize(self, *args):
        return _pdje_python.TRACK_VEC_resize(self, *args)

    def insert(self, *args):
        return _pdje_python.TRACK_VEC_insert(self, *args)

    def reserve(self, n):
        return _pdje_python.TRACK_VEC_reserve(self, n)

    def capacity(self):
        return _pdje_python.TRACK_VEC_capacity(self)
    __swig_destroy__ = _pdje_python.delete_TRACK_VEC

# Register TRACK_VEC in _pdje_python:
_pdje_python.TRACK_VEC_swigregister(TRACK_VEC)
class KEY_VEC(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _pdje_python.KEY_VEC_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pdje_python.KEY_VEC___nonzero__(self)

    def __bool__(self):
        return _pdje_python.KEY_VEC___bool__(self)

    def __len__(self):
        return _pdje_python.KEY_VEC___len__(self)

    def __getslice__(self, i, j):
        return _pdje_python.KEY_VEC___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pdje_python.KEY_VEC___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pdje_python.KEY_VEC___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pdje_python.KEY_VEC___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pdje_python.KEY_VEC___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pdje_python.KEY_VEC___setitem__(self, *args)

    def pop(self):
        return _pdje_python.KEY_VEC_pop(self)

    def append(self, x):
        return _pdje_python.KEY_VEC_append(self, x)

    def empty(self):
        return _pdje_python.KEY_VEC_empty(self)

    def size(self):
        return _pdje_python.KEY_VEC_size(self)

    def swap(self, v):
        return _pdje_python.KEY_VEC_swap(self, v)

    def begin(self):
        return _pdje_python.KEY_VEC_begin(self)

    def end(self):
        return _pdje_python.KEY_VEC_end(self)

    def rbegin(self):
        return _pdje_python.KEY_VEC_rbegin(self)

    def rend(self):
        return _pdje_python.KEY_VEC_rend(self)

    def clear(self):
        return _pdje_python.KEY_VEC_clear(self)

    def get_allocator(self):
        return _pdje_python.KEY_VEC_get_allocator(self)

    def pop_back(self):
        return _pdje_python.KEY_VEC_pop_back(self)

    def erase(self, *args):
        return _pdje_python.KEY_VEC_erase(self, *args)

    def __init__(self, *args):
        _pdje_python.KEY_VEC_swiginit(self, _pdje_python.new_KEY_VEC(*args))

    def push_back(self, x):
        return _pdje_python.KEY_VEC_push_back(self, x)

    def front(self):
        return _pdje_python.KEY_VEC_front(self)

    def back(self):
        return _pdje_python.KEY_VEC_back(self)

    def assign(self, n, x):
        return _pdje_python.KEY_VEC_assign(self, n, x)

    def resize(self, *args):
        return _pdje_python.KEY_VEC_resize(self, *args)

    def insert(self, *args):
        return _pdje_python.KEY_VEC_insert(self, *args)

    def reserve(self, n):
        return _pdje_python.KEY_VEC_reserve(self, n)

    def capacity(self):
        return _pdje_python.KEY_VEC_capacity(self)
    __swig_destroy__ = _pdje_python.delete_KEY_VEC

# Register KEY_VEC in _pdje_python:
_pdje_python.KEY_VEC_swigregister(KEY_VEC)
TypeEnum_FILTER = _pdje_python.TypeEnum_FILTER
TypeEnum_EQ = _pdje_python.TypeEnum_EQ
TypeEnum_DISTORTION = _pdje_python.TypeEnum_DISTORTION
TypeEnum_CONTROL = _pdje_python.TypeEnum_CONTROL
TypeEnum_VOL = _pdje_python.TypeEnum_VOL
TypeEnum_LOAD = _pdje_python.TypeEnum_LOAD
TypeEnum_UNLOAD = _pdje_python.TypeEnum_UNLOAD
TypeEnum_BPM_CONTROL = _pdje_python.TypeEnum_BPM_CONTROL
TypeEnum_ECHO = _pdje_python.TypeEnum_ECHO
TypeEnum_OSC_FILTER = _pdje_python.TypeEnum_OSC_FILTER
TypeEnum_FLANGER = _pdje_python.TypeEnum_FLANGER
TypeEnum_PHASER = _pdje_python.TypeEnum_PHASER
TypeEnum_TRANCE = _pdje_python.TypeEnum_TRANCE
TypeEnum_PANNER = _pdje_python.TypeEnum_PANNER
TypeEnum_BATTLE_DJ = _pdje_python.TypeEnum_BATTLE_DJ
TypeEnum_ROLL = _pdje_python.TypeEnum_ROLL
TypeEnum_COMPRESSOR = _pdje_python.TypeEnum_COMPRESSOR
TypeEnum_ROBOT = _pdje_python.TypeEnum_ROBOT
DetailEnum_HIGH = _pdje_python.DetailEnum_HIGH
DetailEnum_MID = _pdje_python.DetailEnum_MID
DetailEnum_LOW = _pdje_python.DetailEnum_LOW
DetailEnum_PAUSE = _pdje_python.DetailEnum_PAUSE
DetailEnum_CUE = _pdje_python.DetailEnum_CUE
DetailEnum_TRIM = _pdje_python.DetailEnum_TRIM
DetailEnum_FADER = _pdje_python.DetailEnum_FADER
DetailEnum_TIME_STRETCH = _pdje_python.DetailEnum_TIME_STRETCH
DetailEnum_SPIN = _pdje_python.DetailEnum_SPIN
DetailEnum_PITCH = _pdje_python.DetailEnum_PITCH
DetailEnum_REV = _pdje_python.DetailEnum_REV
DetailEnum_SCRATCH = _pdje_python.DetailEnum_SCRATCH
DetailEnum_BSCRATCH = _pdje_python.DetailEnum_BSCRATCH
ITPL_LINEAR = _pdje_python.ITPL_LINEAR
ITPL_COSINE = _pdje_python.ITPL_COSINE
ITPL_CUBIC = _pdje_python.ITPL_CUBIC
ITPL_FLAT = _pdje_python.ITPL_FLAT

