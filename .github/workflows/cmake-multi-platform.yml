# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      matrix:
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
            build_type: Release
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
            build_type: Release
          - os: macOS-14
            c_compiler: clang
            cpp_compiler: clang++
            build_type: Release

    steps:
    - uses: actions/checkout@v4
      with: 
        lfs: false
        fetch-depth: 1

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"
    
    - name: set conan
      id: set_conan
      shell: bash
      run: |
        python -m pip install --upgrade pip
        python -m pip install conan
        conan profile detect

    - name: set Requirements
      id: set_libevdev_ccache
      shell: bash
      if: runner.os == 'Linux'
      run: |
        sudo apt-get install libevdev-dev ccache

    - name: set macos Swig
      id: set_macos_swig
      shell: bash
      if: runner.os == 'macOS'
      run: |
        brew install swig ccache

    - name: init conan on windows
      id: init_conan_windows
      shell: pwsh
      if: runner.os == 'Windows'
      run: |
        cd "$env:GITHUB_WORKSPACE"
        ./BuildInitwithConan.bat . static Release
    - name: init conan
      id: init_conan
      shell: bash
      if: runner.os != 'Windows'
      run: |
        cd ${{ github.workspace }}
        bash BuildInitwithConan.sh . Release

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/conan_cmakes/conan_toolchain.cmake
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -DPDJE_DYNAMIC=OFF
        -S ${{ github.workspace }}

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest --build-config ${{ matrix.build_type }}
    - name: Upload build artifacts
      if: failure() 
      uses: actions/upload-artifact@v4
      with:
        name: failed-build-dir
        path: ./build/
  autoTrigger:
    name: auto trig
    needs: build
    runs-on: ubuntu-latest
    if: success()
    env:
      GH_TOKEN: ${{ secrets.PDJE_AUTO_TRIG }}
    steps:
      - name: trig start
        run: |
          gh workflow run main.yml \
            --repo Rliop913/PDJE_Godot_Plugin \
            --ref master
