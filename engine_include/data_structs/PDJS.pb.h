// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PDJS.proto
// Protobuf C++ Version: 5.26.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_PDJS_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_PDJS_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION != 5026001
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_PDJS_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_PDJS_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_PDJS_2eproto;
class dj_base;
struct dj_baseDefaultTypeInternal;
extern dj_baseDefaultTypeInternal _dj_base_default_instance_;
class dj_base_activation;
struct dj_base_activationDefaultTypeInternal;
extern dj_base_activationDefaultTypeInternal _dj_base_activation_default_instance_;
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

enum d_type : int {
  FILTER = 0,
  EQ = 1,
  DISTORTION = 2,
  CONTROL = 3,
  VOL = 4,
  LOAD = 5,
  UNLOAD = 6,
  BEAT_MATCH = 7,
  SOLA = 8,
  DJ_COMP = 9,
  INIT = 10,
  ECHO = 11,
  LFS = 12,
  FLANGER = 13,
  PHASER = 14,
  TRANCE = 15,
  PANNER = 16,
  BATTLE_DJ = 17,
  ALIVE = 18,
  ROLL = 19,
};

bool d_type_IsValid(int value);
extern const uint32_t d_type_internal_data_[];
constexpr d_type d_type_MIN = static_cast<d_type>(0);
constexpr d_type d_type_MAX = static_cast<d_type>(19);
constexpr int d_type_ARRAYSIZE = 19 + 1;
const ::google::protobuf::EnumDescriptor*
d_type_descriptor();
template <typename T>
const std::string& d_type_Name(T value) {
  static_assert(std::is_same<T, d_type>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to d_type_Name().");
  return d_type_Name(static_cast<d_type>(value));
}
template <>
inline const std::string& d_type_Name(d_type value) {
  return ::google::protobuf::internal::NameOfDenseEnum<d_type_descriptor,
                                                 0, 19>(
      static_cast<int>(value));
}
inline bool d_type_Parse(absl::string_view name, d_type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<d_type>(
      d_type_descriptor(), name, value);
}
enum d_what : int {
  SINGLE = 0,
  HIGH = 1,
  MID = 2,
  LOW = 3,
  CUE = 4,
  PLAY = 5,
  PAUSE = 6,
  TRIM = 7,
  FADER = 8,
  WARP = 9,
  MASTER = 10,
  RAW = 11,
  SPIN = 12,
  BSPIN = 13,
  REV = 14,
  SCRATCH = 15,
  BSCRATC = 16,
};

bool d_what_IsValid(int value);
extern const uint32_t d_what_internal_data_[];
constexpr d_what d_what_MIN = static_cast<d_what>(0);
constexpr d_what d_what_MAX = static_cast<d_what>(16);
constexpr int d_what_ARRAYSIZE = 16 + 1;
const ::google::protobuf::EnumDescriptor*
d_what_descriptor();
template <typename T>
const std::string& d_what_Name(T value) {
  static_assert(std::is_same<T, d_what>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to d_what_Name().");
  return d_what_Name(static_cast<d_what>(value));
}
template <>
inline const std::string& d_what_Name(d_what value) {
  return ::google::protobuf::internal::NameOfDenseEnum<d_what_descriptor,
                                                 0, 16>(
      static_cast<int>(value));
}
inline bool d_what_Parse(absl::string_view name, d_what* value) {
  return ::google::protobuf::internal::ParseNamedEnum<d_what>(
      d_what_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class dj_base_activation final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:dj_base.activation) */ {
 public:
  inline dj_base_activation() : dj_base_activation(nullptr) {}
  ~dj_base_activation() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR dj_base_activation(
      ::google::protobuf::internal::ConstantInitialized);

  inline dj_base_activation(const dj_base_activation& from) : dj_base_activation(nullptr, from) {}
  inline dj_base_activation(dj_base_activation&& from) noexcept
      : dj_base_activation(nullptr, std::move(from)) {}
  inline dj_base_activation& operator=(const dj_base_activation& from) {
    CopyFrom(from);
    return *this;
  }
  inline dj_base_activation& operator=(dj_base_activation&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const dj_base_activation& default_instance() {
    return *internal_default_instance();
  }
  static inline const dj_base_activation* internal_default_instance() {
    return reinterpret_cast<const dj_base_activation*>(
        &_dj_base_activation_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(dj_base_activation& a, dj_base_activation& b) { a.Swap(&b); }
  inline void Swap(dj_base_activation* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(dj_base_activation* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  dj_base_activation* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<dj_base_activation>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const dj_base_activation& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const dj_base_activation& from) { dj_base_activation::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(dj_base_activation* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "dj_base.activation"; }

 protected:
  explicit dj_base_activation(::google::protobuf::Arena* arena);
  dj_base_activation(::google::protobuf::Arena* arena, const dj_base_activation& from);
  dj_base_activation(::google::protobuf::Arena* arena, dj_base_activation&& from) noexcept
      : dj_base_activation(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kFirstFieldNumber = 4,
    kSecondFieldNumber = 5,
    kThirdFieldNumber = 6,
    kTypeFieldNumber = 1,
    kFromFieldNumber = 2,
    kWhatFieldNumber = 3,
    kTargetFieldNumber = 7,
    kSbarFieldNumber = 8,
    kSsepFieldNumber = 9,
    kSbeatFieldNumber = 10,
    kEbarFieldNumber = 11,
    kEsepFieldNumber = 12,
    kEbeatFieldNumber = 13,
  };
  // optional string first = 4;
  bool has_first() const;
  void clear_first() ;
  const std::string& first() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_first(Arg_&& arg, Args_... args);
  std::string* mutable_first();
  PROTOBUF_NODISCARD std::string* release_first();
  void set_allocated_first(std::string* value);

  private:
  const std::string& _internal_first() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_first(
      const std::string& value);
  std::string* _internal_mutable_first();

  public:
  // optional string second = 5;
  bool has_second() const;
  void clear_second() ;
  const std::string& second() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_second(Arg_&& arg, Args_... args);
  std::string* mutable_second();
  PROTOBUF_NODISCARD std::string* release_second();
  void set_allocated_second(std::string* value);

  private:
  const std::string& _internal_second() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_second(
      const std::string& value);
  std::string* _internal_mutable_second();

  public:
  // optional string third = 6;
  bool has_third() const;
  void clear_third() ;
  const std::string& third() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_third(Arg_&& arg, Args_... args);
  std::string* mutable_third();
  PROTOBUF_NODISCARD std::string* release_third();
  void set_allocated_third(std::string* value);

  private:
  const std::string& _internal_third() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_third(
      const std::string& value);
  std::string* _internal_mutable_third();

  public:
  // required .d_type type = 1;
  bool has_type() const;
  void clear_type() ;
  ::d_type type() const;
  void set_type(::d_type value);

  private:
  ::d_type _internal_type() const;
  void _internal_set_type(::d_type value);

  public:
  // required int32 from = 2;
  bool has_from() const;
  void clear_from() ;
  ::int32_t from() const;
  void set_from(::int32_t value);

  private:
  ::int32_t _internal_from() const;
  void _internal_set_from(::int32_t value);

  public:
  // optional .d_what what = 3;
  bool has_what() const;
  void clear_what() ;
  ::d_what what() const;
  void set_what(::d_what value);

  private:
  ::d_what _internal_what() const;
  void _internal_set_what(::d_what value);

  public:
  // optional int32 target = 7;
  bool has_target() const;
  void clear_target() ;
  ::int32_t target() const;
  void set_target(::int32_t value);

  private:
  ::int32_t _internal_target() const;
  void _internal_set_target(::int32_t value);

  public:
  // optional int32 Sbar = 8;
  bool has_sbar() const;
  void clear_sbar() ;
  ::int32_t sbar() const;
  void set_sbar(::int32_t value);

  private:
  ::int32_t _internal_sbar() const;
  void _internal_set_sbar(::int32_t value);

  public:
  // optional int32 Ssep = 9;
  bool has_ssep() const;
  void clear_ssep() ;
  ::int32_t ssep() const;
  void set_ssep(::int32_t value);

  private:
  ::int32_t _internal_ssep() const;
  void _internal_set_ssep(::int32_t value);

  public:
  // optional int32 Sbeat = 10;
  bool has_sbeat() const;
  void clear_sbeat() ;
  ::int32_t sbeat() const;
  void set_sbeat(::int32_t value);

  private:
  ::int32_t _internal_sbeat() const;
  void _internal_set_sbeat(::int32_t value);

  public:
  // optional int32 Ebar = 11;
  bool has_ebar() const;
  void clear_ebar() ;
  ::int32_t ebar() const;
  void set_ebar(::int32_t value);

  private:
  ::int32_t _internal_ebar() const;
  void _internal_set_ebar(::int32_t value);

  public:
  // optional int32 Esep = 12;
  bool has_esep() const;
  void clear_esep() ;
  ::int32_t esep() const;
  void set_esep(::int32_t value);

  private:
  ::int32_t _internal_esep() const;
  void _internal_set_esep(::int32_t value);

  public:
  // optional int32 Ebeat = 13;
  bool has_ebeat() const;
  void clear_ebeat() ;
  ::int32_t ebeat() const;
  void set_ebeat(::int32_t value);

  private:
  ::int32_t _internal_ebeat() const;
  void _internal_set_ebeat(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:dj_base.activation)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 13, 2,
      51, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr first_;
    ::google::protobuf::internal::ArenaStringPtr second_;
    ::google::protobuf::internal::ArenaStringPtr third_;
    int type_;
    ::int32_t from_;
    int what_;
    ::int32_t target_;
    ::int32_t sbar_;
    ::int32_t ssep_;
    ::int32_t sbeat_;
    ::int32_t ebar_;
    ::int32_t esep_;
    ::int32_t ebeat_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_PDJS_2eproto;
};
// -------------------------------------------------------------------

class dj_base final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:dj_base) */ {
 public:
  inline dj_base() : dj_base(nullptr) {}
  ~dj_base() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR dj_base(
      ::google::protobuf::internal::ConstantInitialized);

  inline dj_base(const dj_base& from) : dj_base(nullptr, from) {}
  inline dj_base(dj_base&& from) noexcept
      : dj_base(nullptr, std::move(from)) {}
  inline dj_base& operator=(const dj_base& from) {
    CopyFrom(from);
    return *this;
  }
  inline dj_base& operator=(dj_base&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const dj_base& default_instance() {
    return *internal_default_instance();
  }
  static inline const dj_base* internal_default_instance() {
    return reinterpret_cast<const dj_base*>(
        &_dj_base_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(dj_base& a, dj_base& b) { a.Swap(&b); }
  inline void Swap(dj_base* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(dj_base* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  dj_base* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<dj_base>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const dj_base& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const dj_base& from) { dj_base::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(dj_base* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "dj_base"; }

 protected:
  explicit dj_base(::google::protobuf::Arena* arena);
  dj_base(::google::protobuf::Arena* arena, const dj_base& from);
  dj_base(::google::protobuf::Arena* arena, dj_base&& from) noexcept
      : dj_base(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------
  using activation = dj_base_activation;

  // accessors -------------------------------------------------------
  enum : int {
    kOrdersFieldNumber = 1,
  };
  // repeated .dj_base.activation orders = 1;
  int orders_size() const;
  private:
  int _internal_orders_size() const;

  public:
  void clear_orders() ;
  ::dj_base_activation* mutable_orders(int index);
  ::google::protobuf::RepeatedPtrField<::dj_base_activation>* mutable_orders();

  private:
  const ::google::protobuf::RepeatedPtrField<::dj_base_activation>& _internal_orders() const;
  ::google::protobuf::RepeatedPtrField<::dj_base_activation>* _internal_mutable_orders();
  public:
  const ::dj_base_activation& orders(int index) const;
  ::dj_base_activation* add_orders();
  const ::google::protobuf::RepeatedPtrField<::dj_base_activation>& orders() const;
  // @@protoc_insertion_point(class_scope:dj_base)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField< ::dj_base_activation > orders_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_PDJS_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// dj_base_activation

// required .d_type type = 1;
inline bool dj_base_activation::has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void dj_base_activation::clear_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::d_type dj_base_activation::type() const {
  // @@protoc_insertion_point(field_get:dj_base.activation.type)
  return _internal_type();
}
inline void dj_base_activation::set_type(::d_type value) {
  _internal_set_type(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:dj_base.activation.type)
}
inline ::d_type dj_base_activation::_internal_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::d_type>(_impl_.type_);
}
inline void dj_base_activation::_internal_set_type(::d_type value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  assert(::d_type_IsValid(value));
  _impl_.type_ = value;
}

// required int32 from = 2;
inline bool dj_base_activation::has_from() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void dj_base_activation::clear_from() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.from_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::int32_t dj_base_activation::from() const {
  // @@protoc_insertion_point(field_get:dj_base.activation.from)
  return _internal_from();
}
inline void dj_base_activation::set_from(::int32_t value) {
  _internal_set_from(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:dj_base.activation.from)
}
inline ::int32_t dj_base_activation::_internal_from() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.from_;
}
inline void dj_base_activation::_internal_set_from(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.from_ = value;
}

// optional .d_what what = 3;
inline bool dj_base_activation::has_what() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void dj_base_activation::clear_what() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.what_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::d_what dj_base_activation::what() const {
  // @@protoc_insertion_point(field_get:dj_base.activation.what)
  return _internal_what();
}
inline void dj_base_activation::set_what(::d_what value) {
  _internal_set_what(value);
  _impl_._has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:dj_base.activation.what)
}
inline ::d_what dj_base_activation::_internal_what() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::d_what>(_impl_.what_);
}
inline void dj_base_activation::_internal_set_what(::d_what value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  assert(::d_what_IsValid(value));
  _impl_.what_ = value;
}

// optional string first = 4;
inline bool dj_base_activation::has_first() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void dj_base_activation::clear_first() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.first_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& dj_base_activation::first() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:dj_base.activation.first)
  return _internal_first();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void dj_base_activation::set_first(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.first_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:dj_base.activation.first)
}
inline std::string* dj_base_activation::mutable_first() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_first();
  // @@protoc_insertion_point(field_mutable:dj_base.activation.first)
  return _s;
}
inline const std::string& dj_base_activation::_internal_first() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.first_.Get();
}
inline void dj_base_activation::_internal_set_first(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.first_.Set(value, GetArena());
}
inline std::string* dj_base_activation::_internal_mutable_first() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.first_.Mutable( GetArena());
}
inline std::string* dj_base_activation::release_first() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:dj_base.activation.first)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.first_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.first_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void dj_base_activation::set_allocated_first(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.first_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.first_.IsDefault()) {
          _impl_.first_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dj_base.activation.first)
}

// optional string second = 5;
inline bool dj_base_activation::has_second() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void dj_base_activation::clear_second() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.second_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& dj_base_activation::second() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:dj_base.activation.second)
  return _internal_second();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void dj_base_activation::set_second(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.second_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:dj_base.activation.second)
}
inline std::string* dj_base_activation::mutable_second() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_second();
  // @@protoc_insertion_point(field_mutable:dj_base.activation.second)
  return _s;
}
inline const std::string& dj_base_activation::_internal_second() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.second_.Get();
}
inline void dj_base_activation::_internal_set_second(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.second_.Set(value, GetArena());
}
inline std::string* dj_base_activation::_internal_mutable_second() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.second_.Mutable( GetArena());
}
inline std::string* dj_base_activation::release_second() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:dj_base.activation.second)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.second_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.second_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void dj_base_activation::set_allocated_second(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.second_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.second_.IsDefault()) {
          _impl_.second_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dj_base.activation.second)
}

// optional string third = 6;
inline bool dj_base_activation::has_third() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void dj_base_activation::clear_third() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.third_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& dj_base_activation::third() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:dj_base.activation.third)
  return _internal_third();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void dj_base_activation::set_third(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.third_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:dj_base.activation.third)
}
inline std::string* dj_base_activation::mutable_third() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_third();
  // @@protoc_insertion_point(field_mutable:dj_base.activation.third)
  return _s;
}
inline const std::string& dj_base_activation::_internal_third() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.third_.Get();
}
inline void dj_base_activation::_internal_set_third(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.third_.Set(value, GetArena());
}
inline std::string* dj_base_activation::_internal_mutable_third() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.third_.Mutable( GetArena());
}
inline std::string* dj_base_activation::release_third() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:dj_base.activation.third)
  if ((_impl_._has_bits_[0] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* released = _impl_.third_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.third_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void dj_base_activation::set_allocated_third(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.third_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.third_.IsDefault()) {
          _impl_.third_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dj_base.activation.third)
}

// optional int32 target = 7;
inline bool dj_base_activation::has_target() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void dj_base_activation::clear_target() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.target_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::int32_t dj_base_activation::target() const {
  // @@protoc_insertion_point(field_get:dj_base.activation.target)
  return _internal_target();
}
inline void dj_base_activation::set_target(::int32_t value) {
  _internal_set_target(value);
  _impl_._has_bits_[0] |= 0x00000040u;
  // @@protoc_insertion_point(field_set:dj_base.activation.target)
}
inline ::int32_t dj_base_activation::_internal_target() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.target_;
}
inline void dj_base_activation::_internal_set_target(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.target_ = value;
}

// optional int32 Sbar = 8;
inline bool dj_base_activation::has_sbar() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void dj_base_activation::clear_sbar() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.sbar_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline ::int32_t dj_base_activation::sbar() const {
  // @@protoc_insertion_point(field_get:dj_base.activation.Sbar)
  return _internal_sbar();
}
inline void dj_base_activation::set_sbar(::int32_t value) {
  _internal_set_sbar(value);
  _impl_._has_bits_[0] |= 0x00000080u;
  // @@protoc_insertion_point(field_set:dj_base.activation.Sbar)
}
inline ::int32_t dj_base_activation::_internal_sbar() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.sbar_;
}
inline void dj_base_activation::_internal_set_sbar(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.sbar_ = value;
}

// optional int32 Ssep = 9;
inline bool dj_base_activation::has_ssep() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void dj_base_activation::clear_ssep() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.ssep_ = 0;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline ::int32_t dj_base_activation::ssep() const {
  // @@protoc_insertion_point(field_get:dj_base.activation.Ssep)
  return _internal_ssep();
}
inline void dj_base_activation::set_ssep(::int32_t value) {
  _internal_set_ssep(value);
  _impl_._has_bits_[0] |= 0x00000100u;
  // @@protoc_insertion_point(field_set:dj_base.activation.Ssep)
}
inline ::int32_t dj_base_activation::_internal_ssep() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.ssep_;
}
inline void dj_base_activation::_internal_set_ssep(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.ssep_ = value;
}

// optional int32 Sbeat = 10;
inline bool dj_base_activation::has_sbeat() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline void dj_base_activation::clear_sbeat() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.sbeat_ = 0;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline ::int32_t dj_base_activation::sbeat() const {
  // @@protoc_insertion_point(field_get:dj_base.activation.Sbeat)
  return _internal_sbeat();
}
inline void dj_base_activation::set_sbeat(::int32_t value) {
  _internal_set_sbeat(value);
  _impl_._has_bits_[0] |= 0x00000200u;
  // @@protoc_insertion_point(field_set:dj_base.activation.Sbeat)
}
inline ::int32_t dj_base_activation::_internal_sbeat() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.sbeat_;
}
inline void dj_base_activation::_internal_set_sbeat(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.sbeat_ = value;
}

// optional int32 Ebar = 11;
inline bool dj_base_activation::has_ebar() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline void dj_base_activation::clear_ebar() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.ebar_ = 0;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline ::int32_t dj_base_activation::ebar() const {
  // @@protoc_insertion_point(field_get:dj_base.activation.Ebar)
  return _internal_ebar();
}
inline void dj_base_activation::set_ebar(::int32_t value) {
  _internal_set_ebar(value);
  _impl_._has_bits_[0] |= 0x00000400u;
  // @@protoc_insertion_point(field_set:dj_base.activation.Ebar)
}
inline ::int32_t dj_base_activation::_internal_ebar() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.ebar_;
}
inline void dj_base_activation::_internal_set_ebar(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.ebar_ = value;
}

// optional int32 Esep = 12;
inline bool dj_base_activation::has_esep() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline void dj_base_activation::clear_esep() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.esep_ = 0;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline ::int32_t dj_base_activation::esep() const {
  // @@protoc_insertion_point(field_get:dj_base.activation.Esep)
  return _internal_esep();
}
inline void dj_base_activation::set_esep(::int32_t value) {
  _internal_set_esep(value);
  _impl_._has_bits_[0] |= 0x00000800u;
  // @@protoc_insertion_point(field_set:dj_base.activation.Esep)
}
inline ::int32_t dj_base_activation::_internal_esep() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.esep_;
}
inline void dj_base_activation::_internal_set_esep(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.esep_ = value;
}

// optional int32 Ebeat = 13;
inline bool dj_base_activation::has_ebeat() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline void dj_base_activation::clear_ebeat() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.ebeat_ = 0;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline ::int32_t dj_base_activation::ebeat() const {
  // @@protoc_insertion_point(field_get:dj_base.activation.Ebeat)
  return _internal_ebeat();
}
inline void dj_base_activation::set_ebeat(::int32_t value) {
  _internal_set_ebeat(value);
  _impl_._has_bits_[0] |= 0x00001000u;
  // @@protoc_insertion_point(field_set:dj_base.activation.Ebeat)
}
inline ::int32_t dj_base_activation::_internal_ebeat() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.ebeat_;
}
inline void dj_base_activation::_internal_set_ebeat(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.ebeat_ = value;
}

// -------------------------------------------------------------------

// dj_base

// repeated .dj_base.activation orders = 1;
inline int dj_base::_internal_orders_size() const {
  return _internal_orders().size();
}
inline int dj_base::orders_size() const {
  return _internal_orders_size();
}
inline void dj_base::clear_orders() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.orders_.Clear();
}
inline ::dj_base_activation* dj_base::mutable_orders(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:dj_base.orders)
  return _internal_mutable_orders()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::dj_base_activation>* dj_base::mutable_orders()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:dj_base.orders)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_orders();
}
inline const ::dj_base_activation& dj_base::orders(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:dj_base.orders)
  return _internal_orders().Get(index);
}
inline ::dj_base_activation* dj_base::add_orders() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::dj_base_activation* _add = _internal_mutable_orders()->Add();
  // @@protoc_insertion_point(field_add:dj_base.orders)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::dj_base_activation>& dj_base::orders() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:dj_base.orders)
  return _internal_orders();
}
inline const ::google::protobuf::RepeatedPtrField<::dj_base_activation>&
dj_base::_internal_orders() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.orders_;
}
inline ::google::protobuf::RepeatedPtrField<::dj_base_activation>*
dj_base::_internal_mutable_orders() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.orders_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::d_type> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::d_type>() {
  return ::d_type_descriptor();
}
template <>
struct is_proto_enum<::d_what> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::d_what>() {
  return ::d_what_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_PDJS_2eproto_2epb_2eh
