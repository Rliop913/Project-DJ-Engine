/**
 * @file gitWrapper.hpp
 * @brief High level Git helpers used by the editor.
 */
#pragma once
#include <string>
#include <optional>

#include <git2.h>
#include <nlohmann/json.hpp>

#include "BlameController.hpp"
#include "DiffController.hpp"
#include "AddController.hpp"


#include "editorBranch.hpp"
#include "git2/repository.h"
#include "gitLog.hpp"

#include "PDJE_EXPORT_SETTER.hpp"
#include "fileNameSanitizer.hpp"

using MAYBE_BLAME = std::optional<BlameController>;

using BranchCommits = std::pair<std::string, std::vector<gitwrap::commit>>;
// using SaveDatas = std::vector<BranchCommits>;

using BRANCH_HANDLE = std::optional<gitwrap::branch>;

/**
 * @brief Thin wrapper around libgit2 for common operations.
 */
class PDJE_API GitWrapper{
private:
    git_signature* auth_sign = nullptr;
    std::optional<AddController> addIndex;
public:
    git_repository* repo = nullptr;
    std::optional<gitwrap::logHandle> log_hdl;
    BRANCH_HANDLE handleBranch;

    /// Add a file to the repository index
    bool add(const fs::path&  path);
    /// Open an existing repository
    bool open(const fs::path&  path);

    /// Get a diff between two commits
    DiffResult diff(
        const gitwrap::commit& oldCommit,
        const gitwrap::commit& newCommit);

    /// Run git blame on a file between two commits
    MAYBE_BLAME Blame(
        const fs::path& filepath,
        const gitwrap::commit& newCommit,
        const gitwrap::commit& oldCommit);

    /// Commit staged changes using the provided signature
    bool commit(git_signature* sign, const std::string& message);

    bool log();
    bool log(const std::string& branchName);

    static std::string GenTimeStamp();
    // SaveDatas GetCommits();


    /// Close the repository and free resources
    bool close();

    /// Construct an empty wrapper
    GitWrapper();
    /// Destructor
    ~GitWrapper();
}; 



/**
 * @brief User facing helper that manages a Git repository and history.
 */
class PDJE_API PDJE_GitHandler{
private:
    git_signature* sign = nullptr;
public:
    std::string RecentERR;
    GitWrapper gw;

    /// Commit changes with an autogenerated message
    bool Save(const std::string& tracingFile, const std::string& timeStamp);
    bool Undo();
    bool Redo();

    
    bool Go(const std::string& branchName, git_oid* commitID);
    std::string GetLogWithJSONGraph();
    bool UpdateLog(){
        return gw.log();
    }
    bool UpdateLog(const std::string& branchName){
        return gw.log(branchName);
    }

    /// Retrieve a diff between two timestamps
    DiffResult GetDiff(const gitwrap::commit& oldTimeStamp, const gitwrap::commit& newTimeStamp);

    /// Delete repository data at the given path
    bool DeleteGIT(const fs::path& path);
    /// Initialize the handler with an existing repository path
    bool Open(const fs::path& path);
    /// Close the repository
    bool Close();
    // SaveDatas GetCommits();

    PDJE_GitHandler() = delete;
    /// Construct with author information for commits
    PDJE_GitHandler(const std::string& auth_name, const std::string& auth_email);
    ~PDJE_GitHandler();

};

